// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace sisyfox.sisycol.response
{

using global::System;
using global::FlatBuffers;

public struct GetDmxDeviceRange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GetDmxDeviceRange GetRootAsGetDmxDeviceRange(ByteBuffer _bb) { return GetRootAsGetDmxDeviceRange(_bb, new GetDmxDeviceRange()); }
  public static GetDmxDeviceRange GetRootAsGetDmxDeviceRange(ByteBuffer _bb, GetDmxDeviceRange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GetDmxDeviceRange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint DeviceId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public DmxDevice? Device(int j) { int o = __p.__offset(6); return o != 0 ? (DmxDevice?)(new DmxDevice()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DeviceLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GetDmxDeviceRange> CreateGetDmxDeviceRange(FlatBufferBuilder builder,
      uint deviceId = 0,
      VectorOffset deviceOffset = default(VectorOffset)) {
    builder.StartObject(2);
    GetDmxDeviceRange.AddDevice(builder, deviceOffset);
    GetDmxDeviceRange.AddDeviceId(builder, deviceId);
    return GetDmxDeviceRange.EndGetDmxDeviceRange(builder);
  }

  public static void StartGetDmxDeviceRange(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddDeviceId(FlatBufferBuilder builder, uint deviceId) { builder.AddUint(0, deviceId, 0); }
  public static void AddDevice(FlatBufferBuilder builder, VectorOffset deviceOffset) { builder.AddOffset(1, deviceOffset.Value, 0); }
  public static VectorOffset CreateDeviceVector(FlatBufferBuilder builder, Offset<DmxDevice>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartDeviceVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GetDmxDeviceRange> EndGetDmxDeviceRange(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GetDmxDeviceRange>(o);
  }
};


}
