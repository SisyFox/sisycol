// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace sisyfox.sisycol.request
{

using global::System;
using global::FlatBuffers;

public struct GetIdealTime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GetIdealTime GetRootAsGetIdealTime(ByteBuffer _bb) { return GetRootAsGetIdealTime(_bb, new GetIdealTime()); }
  public static GetIdealTime GetRootAsGetIdealTime(ByteBuffer _bb, GetIdealTime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GetIdealTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte World { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte GameMode { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Difficulty { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<GetIdealTime> CreateGetIdealTime(FlatBufferBuilder builder,
      byte world = 0,
      byte level = 0,
      byte gameMode = 0,
      byte difficulty = 0) {
    builder.StartObject(4);
    GetIdealTime.AddDifficulty(builder, difficulty);
    GetIdealTime.AddGameMode(builder, gameMode);
    GetIdealTime.AddLevel(builder, level);
    GetIdealTime.AddWorld(builder, world);
    return GetIdealTime.EndGetIdealTime(builder);
  }

  public static void StartGetIdealTime(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddWorld(FlatBufferBuilder builder, byte world) { builder.AddByte(0, world, 0); }
  public static void AddLevel(FlatBufferBuilder builder, byte level) { builder.AddByte(1, level, 0); }
  public static void AddGameMode(FlatBufferBuilder builder, byte gameMode) { builder.AddByte(2, gameMode, 0); }
  public static void AddDifficulty(FlatBufferBuilder builder, byte difficulty) { builder.AddByte(3, difficulty, 0); }
  public static Offset<GetIdealTime> EndGetIdealTime(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GetIdealTime>(o);
  }
};


}
