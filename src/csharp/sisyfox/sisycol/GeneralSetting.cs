// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace sisyfox.sisycol
{

using global::System;
using global::FlatBuffers;

public struct GeneralSetting : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GeneralSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Available { get { return 0!=__p.bb.Get(__p.bb_pos + 0); } }
  public Language GameLanguage { get { return (Language)__p.bb.Get(__p.bb_pos + 1); } }
  public Language InterfaceLanguage { get { return (Language)__p.bb.Get(__p.bb_pos + 2); } }
  public byte MasterVolume { get { return __p.bb.Get(__p.bb_pos + 3); } }
  public bool CompetitionMode { get { return 0!=__p.bb.Get(__p.bb_pos + 4); } }
  public bool DebugMode { get { return 0!=__p.bb.Get(__p.bb_pos + 5); } }
  public byte TimeFrame { get { return __p.bb.Get(__p.bb_pos + 6); } }
  public bool GameActive { get { return 0!=__p.bb.Get(__p.bb_pos + 7); } }
  public bool GameEnabled { get { return 0!=__p.bb.Get(__p.bb_pos + 8); } }
  public byte MusicVolume { get { return __p.bb.Get(__p.bb_pos + 9); } }
  public byte SfxVolume { get { return __p.bb.Get(__p.bb_pos + 10); } }
  public bool Voices { get { return 0!=__p.bb.Get(__p.bb_pos + 11); } }
  public uint IdleTime { get { return __p.bb.GetUint(__p.bb_pos + 12); } }

  public static Offset<GeneralSetting> CreateGeneralSetting(FlatBufferBuilder builder, bool Available, Language GameLanguage, Language InterfaceLanguage, byte MasterVolume, bool CompetitionMode, bool DebugMode, byte TimeFrame, bool GameActive, bool GameEnabled, byte MusicVolume, byte SfxVolume, bool Voices, uint IdleTime) {
    builder.Prep(4, 16);
    builder.PutUint(IdleTime);
    builder.PutBool(Voices);
    builder.PutByte(SfxVolume);
    builder.PutByte(MusicVolume);
    builder.PutBool(GameEnabled);
    builder.PutBool(GameActive);
    builder.PutByte(TimeFrame);
    builder.PutBool(DebugMode);
    builder.PutBool(CompetitionMode);
    builder.PutByte(MasterVolume);
    builder.PutByte((byte)InterfaceLanguage);
    builder.PutByte((byte)GameLanguage);
    builder.PutBool(Available);
    return new Offset<GeneralSetting>(builder.Offset);
  }
};


}
