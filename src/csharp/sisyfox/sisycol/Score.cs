// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace sisyfox.sisycol
{

using global::System;
using global::FlatBuffers;

public struct Score : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Score __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { return __p.bb.GetUint(__p.bb_pos + 0); } }
  public int Height { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public int MaxHeight { get { return __p.bb.GetInt(__p.bb_pos + 8); } }
  public int Time { get { return __p.bb.GetInt(__p.bb_pos + 12); } }
  public uint Rank { get { return __p.bb.GetUint(__p.bb_pos + 16); } }
  public long Timestamp { get { return __p.bb.GetLong(__p.bb_pos + 24); } }
  public byte Level { get { return __p.bb.Get(__p.bb_pos + 32); } }
  public byte World { get { return __p.bb.Get(__p.bb_pos + 33); } }
  public byte GameMode { get { return __p.bb.Get(__p.bb_pos + 34); } }
  public byte Difficulty { get { return __p.bb.Get(__p.bb_pos + 35); } }
  public EndReason Reason { get { return (EndReason)__p.bb.Get(__p.bb_pos + 36); } }
  public int GoalScore { get { return __p.bb.GetInt(__p.bb_pos + 40); } }
  public int TimeScore { get { return __p.bb.GetInt(__p.bb_pos + 44); } }
  public int Score { get { return __p.bb.GetInt(__p.bb_pos + 48); } }
  public int Rating { get { return __p.bb.GetInt(__p.bb_pos + 52); } }

  public static Offset<Score> CreateScore(FlatBufferBuilder builder, uint Id, int Height, int MaxHeight, int Time, uint Rank, long Timestamp, byte Level, byte World, byte GameMode, byte Difficulty, EndReason Reason, int GoalScore, int TimeScore, int Score, int Rating) {
    builder.Prep(8, 56);
    builder.PutInt(Rating);
    builder.PutInt(Score);
    builder.PutInt(TimeScore);
    builder.PutInt(GoalScore);
    builder.Pad(3);
    builder.PutByte((byte)Reason);
    builder.PutByte(Difficulty);
    builder.PutByte(GameMode);
    builder.PutByte(World);
    builder.PutByte(Level);
    builder.PutLong(Timestamp);
    builder.Pad(4);
    builder.PutUint(Rank);
    builder.PutInt(Time);
    builder.PutInt(MaxHeight);
    builder.PutInt(Height);
    builder.PutUint(Id);
    return new Offset<Score>(builder.Offset);
  }
};


}
