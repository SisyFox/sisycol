// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SISYCOL_SISYFOX_SISYCOL_RESPONSE_H_
#define FLATBUFFERS_GENERATED_SISYCOL_SISYFOX_SISYCOL_RESPONSE_H_

#include "flatbuffers/flatbuffers.h"

namespace sisyfox {
namespace sisycol {

struct Root;

struct Version;

struct LiveData;

struct Coordinates;

struct Score;

struct Setting;

struct DmxDeviceChannel;

struct DmxChannelRule;

struct DmxRuleRangeSetting;

struct DmxRuleBoolSetting;

struct User;

namespace request {

struct Info;

struct AddScore;

struct GetScore;

struct GetScoreRange;

struct AddLocation;

struct GetLocation;

struct SetLiveData;

struct GetLiveData;

struct AddUser;

struct GetUser;

struct SetUser;

struct GetCurrentUser;

struct GetUserRange;

struct RemoveUser;

struct UnsetUser;

struct SetSetting;

struct GetSetting;

struct GetSettings;

struct Trigger;

struct AddDmxDevice;

struct RemoveDmxDevice;

struct AddDmxDeviceChannel;

struct RemoveDmxDeviceChannel;

struct AddDmxChannelRule;

struct RemoveDmxChannelRule;

struct AddDmxDeviceSetting;

struct RemoveDmxDeviceSetting;

struct AddDmxRuleRangeSetting;

struct AddDmxRuleBoolSetting;

struct RemoveDmxRuleSetting;

struct ChangeDmxDeviceSettingValue;

struct SetDmxDeviceMode;

struct GetDmxDevice;

struct GetDmxDeviceRange;

struct GetDmxDeviceChannel;

struct GetDmxDeviceChannelRange;

struct GetDmxChannelRule;

struct GetDmxChannelRuleRange;

struct GetDmxDeviceSetting;

struct GetDmxDeviceSettingRange;

struct GetDmxRuleSetting;

struct GetDmxRuleSettingRange;

struct ResetDmxConfig;

struct GetIdealTime;

}  // namespace request

namespace response {

struct Error;

struct Info;

struct AddScore;

struct GetScore;

struct GetScoreRange;

struct GetLocation;

struct GetLiveData;

struct AddRule;

struct AddUser;

struct GetUser;

struct SetUser;

struct UnsetUser;

struct GetCurrentUser;

struct GetUserRange;

struct RemoveUser;

struct SetSetting;

struct GetSetting;

struct GetSettings;

struct Trigger;

struct AddDmxDevice;

struct RemoveDmxDevice;

struct AddDmxDeviceChannel;

struct RemoveDmxDeviceChannel;

struct AddDmxChannelRule;

struct RemoveDmxChannelRule;

struct AddDmxDeviceSetting;

struct RemoveDmxDeviceSetting;

struct AddDmxRuleSetting;

struct RemoveDmxRuleSetting;

struct ChangeDmxDeviceSettingValue;

struct SetDmxDeviceMode;

struct DmxDevice;

struct GetDmxDevice;

struct GetDmxDeviceRange;

struct GetDmxDeviceChannel;

struct GetDmxDeviceChannelRange;

struct GetDmxChannelRule;

struct GetDmxChannelRuleRange;

struct DmxDeviceSetting;

struct GetDmxDeviceSetting;

struct GetDmxDeviceSettingRange;

struct GetDmxRuleRangeSetting;

struct GetDmxRuleRangeSettingRange;

struct GetDmxRuleBoolSetting;

struct GetDmxRuleBoolSettingRange;

struct ResetDmxConfig;

struct GetIdealTime;

}  // namespace response

enum Payload {
  NONE = 0,
  Error = 1,
  Info = 2,
  AddScore = 3,
  GetScore = 4,
  GetScoreRange = 5,
  SetLiveData = 6,
  GetLiveData = 7,
  AddUser = 8,
  GetUser = 9,
  SetUser = 10,
  GetCurrentUser = 11,
  GetUserRange = 12,
  RemoveUser = 13,
  UnsetUser = 14,
  AddLocation = 15,
  GetLocation = 16,
  SetSetting = 17,
  GetSetting = 18,
  GetSettings = 19,
  Trigger = 20,
  AddDmxDevice = 21,
  RemoveDmxDevice = 22,
  AddDmxDeviceChannel = 23,
  RemoveDmxDeviceChannel = 24,
  AddDmxChannelRule = 25,
  RemoveDmxChannelRule = 26,
  AddDmxDeviceSetting = 27,
  AddDmxRuleSetting = 28,
  RemoveDmxDeviceSetting = 29,
  AddDmxRuleRangeSetting = 30,
  AddDmxRuleBoolSetting = 31,
  RemoveDmxRuleSetting = 32,
  ChangeDmxDeviceSettingValue = 33,
  GetDmxDevice = 34,
  GetDmxDeviceChannel = 35,
  GetDmxChannelRule = 36,
  GetDmxDeviceSetting = 37,
  GetDmxRuleSetting = 38,
  GetDmxDeviceRange = 39,
  GetDmxDeviceChannelRange = 40,
  GetDmxChannelRuleRange = 41,
  GetDmxDeviceSettingRange = 42,
  GetDmxRuleSettingRange = 43,
  GetDmxRuleRangeSetting = 44,
  GetDmxRuleRangeSettingRange = 45,
  GetDmxRuleBoolSetting = 46,
  GetDmxRuleBoolSettingRange = 47,
  SetDmxDeviceMode = 48,
  ResetDmxConfig = 49,
  GetIdealTime = 50
};

inline Payload (&EnumValuesPayload())[51] {
  static Payload values[] = {
    NONE,
    Error,
    Info,
    AddScore,
    GetScore,
    GetScoreRange,
    SetLiveData,
    GetLiveData,
    AddUser,
    GetUser,
    SetUser,
    GetCurrentUser,
    GetUserRange,
    RemoveUser,
    UnsetUser,
    AddLocation,
    GetLocation,
    SetSetting,
    GetSetting,
    GetSettings,
    Trigger,
    AddDmxDevice,
    RemoveDmxDevice,
    AddDmxDeviceChannel,
    RemoveDmxDeviceChannel,
    AddDmxChannelRule,
    RemoveDmxChannelRule,
    AddDmxDeviceSetting,
    AddDmxRuleSetting,
    RemoveDmxDeviceSetting,
    AddDmxRuleRangeSetting,
    AddDmxRuleBoolSetting,
    RemoveDmxRuleSetting,
    ChangeDmxDeviceSettingValue,
    GetDmxDevice,
    GetDmxDeviceChannel,
    GetDmxChannelRule,
    GetDmxDeviceSetting,
    GetDmxRuleSetting,
    GetDmxDeviceRange,
    GetDmxDeviceChannelRange,
    GetDmxChannelRuleRange,
    GetDmxDeviceSettingRange,
    GetDmxRuleSettingRange,
    GetDmxRuleRangeSetting,
    GetDmxRuleRangeSettingRange,
    GetDmxRuleBoolSetting,
    GetDmxRuleBoolSettingRange,
    SetDmxDeviceMode,
    ResetDmxConfig,
    GetIdealTime
  };
  return values;
}

inline const char **EnumNamesPayload() {
  static const char *names[] = {
    "NONE",
    "Error",
    "Info",
    "AddScore",
    "GetScore",
    "GetScoreRange",
    "SetLiveData",
    "GetLiveData",
    "AddUser",
    "GetUser",
    "SetUser",
    "GetCurrentUser",
    "GetUserRange",
    "RemoveUser",
    "UnsetUser",
    "AddLocation",
    "GetLocation",
    "SetSetting",
    "GetSetting",
    "GetSettings",
    "Trigger",
    "AddDmxDevice",
    "RemoveDmxDevice",
    "AddDmxDeviceChannel",
    "RemoveDmxDeviceChannel",
    "AddDmxChannelRule",
    "RemoveDmxChannelRule",
    "AddDmxDeviceSetting",
    "AddDmxRuleSetting",
    "RemoveDmxDeviceSetting",
    "AddDmxRuleRangeSetting",
    "AddDmxRuleBoolSetting",
    "RemoveDmxRuleSetting",
    "ChangeDmxDeviceSettingValue",
    "GetDmxDevice",
    "GetDmxDeviceChannel",
    "GetDmxChannelRule",
    "GetDmxDeviceSetting",
    "GetDmxRuleSetting",
    "GetDmxDeviceRange",
    "GetDmxDeviceChannelRange",
    "GetDmxChannelRuleRange",
    "GetDmxDeviceSettingRange",
    "GetDmxRuleSettingRange",
    "GetDmxRuleRangeSetting",
    "GetDmxRuleRangeSettingRange",
    "GetDmxRuleBoolSetting",
    "GetDmxRuleBoolSettingRange",
    "SetDmxDeviceMode",
    "ResetDmxConfig",
    "GetIdealTime",
    nullptr
  };
  return names;
}

inline const char *EnumNamePayload(Payload e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPayload()[index];
}

template<typename T> struct PayloadTraits {
  static const Payload enum_value = NONE;
};

template<> struct PayloadTraits<sisyfox::sisycol::response::Error> {
  static const Payload enum_value = Error;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::Info> {
  static const Payload enum_value = Info;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddScore> {
  static const Payload enum_value = AddScore;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetScore> {
  static const Payload enum_value = GetScore;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetScoreRange> {
  static const Payload enum_value = GetScoreRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::SetLiveData> {
  static const Payload enum_value = SetLiveData;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetLiveData> {
  static const Payload enum_value = GetLiveData;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddUser> {
  static const Payload enum_value = AddUser;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetUser> {
  static const Payload enum_value = GetUser;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::SetUser> {
  static const Payload enum_value = SetUser;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetCurrentUser> {
  static const Payload enum_value = GetCurrentUser;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetUserRange> {
  static const Payload enum_value = GetUserRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::RemoveUser> {
  static const Payload enum_value = RemoveUser;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::UnsetUser> {
  static const Payload enum_value = UnsetUser;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddLocation> {
  static const Payload enum_value = AddLocation;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetLocation> {
  static const Payload enum_value = GetLocation;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::SetSetting> {
  static const Payload enum_value = SetSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetSetting> {
  static const Payload enum_value = GetSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetSettings> {
  static const Payload enum_value = GetSettings;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::Trigger> {
  static const Payload enum_value = Trigger;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddDmxDevice> {
  static const Payload enum_value = AddDmxDevice;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::RemoveDmxDevice> {
  static const Payload enum_value = RemoveDmxDevice;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddDmxDeviceChannel> {
  static const Payload enum_value = AddDmxDeviceChannel;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::RemoveDmxDeviceChannel> {
  static const Payload enum_value = RemoveDmxDeviceChannel;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddDmxChannelRule> {
  static const Payload enum_value = AddDmxChannelRule;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::RemoveDmxChannelRule> {
  static const Payload enum_value = RemoveDmxChannelRule;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddDmxDeviceSetting> {
  static const Payload enum_value = AddDmxDeviceSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::response::AddDmxRuleSetting> {
  static const Payload enum_value = AddDmxRuleSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::RemoveDmxDeviceSetting> {
  static const Payload enum_value = RemoveDmxDeviceSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddDmxRuleRangeSetting> {
  static const Payload enum_value = AddDmxRuleRangeSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::AddDmxRuleBoolSetting> {
  static const Payload enum_value = AddDmxRuleBoolSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::RemoveDmxRuleSetting> {
  static const Payload enum_value = RemoveDmxRuleSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::ChangeDmxDeviceSettingValue> {
  static const Payload enum_value = ChangeDmxDeviceSettingValue;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxDevice> {
  static const Payload enum_value = GetDmxDevice;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxDeviceChannel> {
  static const Payload enum_value = GetDmxDeviceChannel;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxChannelRule> {
  static const Payload enum_value = GetDmxChannelRule;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxDeviceSetting> {
  static const Payload enum_value = GetDmxDeviceSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxRuleSetting> {
  static const Payload enum_value = GetDmxRuleSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxDeviceRange> {
  static const Payload enum_value = GetDmxDeviceRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxDeviceChannelRange> {
  static const Payload enum_value = GetDmxDeviceChannelRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxChannelRuleRange> {
  static const Payload enum_value = GetDmxChannelRuleRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxDeviceSettingRange> {
  static const Payload enum_value = GetDmxDeviceSettingRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetDmxRuleSettingRange> {
  static const Payload enum_value = GetDmxRuleSettingRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::response::GetDmxRuleRangeSetting> {
  static const Payload enum_value = GetDmxRuleRangeSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::response::GetDmxRuleRangeSettingRange> {
  static const Payload enum_value = GetDmxRuleRangeSettingRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::response::GetDmxRuleBoolSetting> {
  static const Payload enum_value = GetDmxRuleBoolSetting;
};

template<> struct PayloadTraits<sisyfox::sisycol::response::GetDmxRuleBoolSettingRange> {
  static const Payload enum_value = GetDmxRuleBoolSettingRange;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::SetDmxDeviceMode> {
  static const Payload enum_value = SetDmxDeviceMode;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::ResetDmxConfig> {
  static const Payload enum_value = ResetDmxConfig;
};

template<> struct PayloadTraits<sisyfox::sisycol::request::GetIdealTime> {
  static const Payload enum_value = GetIdealTime;
};

bool VerifyPayload(flatbuffers::Verifier &verifier, const void *obj, Payload type);
bool VerifyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum ErrorCode {
  BAD_TRANSMISSION = 0,
  BAD_VERSION = 1,
  BAD_PAYLOAD_TYPE = 2,
  GENERAL_ERROR = 3,
  NOT_AVAILABLE = 4
};

inline ErrorCode (&EnumValuesErrorCode())[5] {
  static ErrorCode values[] = {
    BAD_TRANSMISSION,
    BAD_VERSION,
    BAD_PAYLOAD_TYPE,
    GENERAL_ERROR,
    NOT_AVAILABLE
  };
  return values;
}

inline const char **EnumNamesErrorCode() {
  static const char *names[] = {
    "BAD_TRANSMISSION",
    "BAD_VERSION",
    "BAD_PAYLOAD_TYPE",
    "GENERAL_ERROR",
    "NOT_AVAILABLE",
    nullptr
  };
  return names;
}

inline const char *EnumNameErrorCode(ErrorCode e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesErrorCode()[index];
}

enum EndReason {
  WIN = 0,
  MAP_BORDER = 1,
  COLLISION = 2,
  INSTANT_LOSS_ANGLE = 3,
  GROUND_DIST = 4,
  TOO_STEEP = 5,
  FLASH = 6,
  UNDERWATER = 7,
  TIME_UP = 8
};

inline EndReason (&EnumValuesEndReason())[9] {
  static EndReason values[] = {
    WIN,
    MAP_BORDER,
    COLLISION,
    INSTANT_LOSS_ANGLE,
    GROUND_DIST,
    TOO_STEEP,
    FLASH,
    UNDERWATER,
    TIME_UP
  };
  return values;
}

inline const char **EnumNamesEndReason() {
  static const char *names[] = {
    "WIN",
    "MAP_BORDER",
    "COLLISION",
    "INSTANT_LOSS_ANGLE",
    "GROUND_DIST",
    "TOO_STEEP",
    "FLASH",
    "UNDERWATER",
    "TIME_UP",
    nullptr
  };
  return names;
}

inline const char *EnumNameEndReason(EndReason e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEndReason()[index];
}

enum TriggerType {
  NEW_ROUND = 0
};

inline TriggerType (&EnumValuesTriggerType())[1] {
  static TriggerType values[] = {
    NEW_ROUND
  };
  return values;
}

inline const char **EnumNamesTriggerType() {
  static const char *names[] = {
    "NEW_ROUND",
    nullptr
  };
  return names;
}

inline const char *EnumNameTriggerType(TriggerType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesTriggerType()[index];
}

enum SettingType {
  GAME_LANGUAGE = 0,
  INTERFACE_LANGUAGE = 1,
  MASTER_VOLUME = 2,
  COMPETITION_MODE = 3,
  DEBUG_MODE = 4,
  TIMEFRAME = 5,
  MUSIC_VOLUME = 6,
  SFX_VOLUME = 7,
  VOICES = 8,
  IDLE_TIME = 9,
  WIN_TRANSITIONS_TO_LOSS = 10,
  WORLD = 64,
  LEVEL = 65,
  DIFFICULTY = 66,
  GAME_MODE = 67,
  MAX_COLLECT_WORLD = 68,
  MAX_COLLECT_LEVEL = 69,
  GEM_SCORE = 70,
  TIME_ATTACK = 71,
  ENDLESS = 72,
  HASH = 73,
  GAME = 74,
  GAME_ACTIVE = 128,
  GAME_ENABLED = 129
};

inline SettingType (&EnumValuesSettingType())[24] {
  static SettingType values[] = {
    GAME_LANGUAGE,
    INTERFACE_LANGUAGE,
    MASTER_VOLUME,
    COMPETITION_MODE,
    DEBUG_MODE,
    TIMEFRAME,
    MUSIC_VOLUME,
    SFX_VOLUME,
    VOICES,
    IDLE_TIME,
    WIN_TRANSITIONS_TO_LOSS,
    WORLD,
    LEVEL,
    DIFFICULTY,
    GAME_MODE,
    MAX_COLLECT_WORLD,
    MAX_COLLECT_LEVEL,
    GEM_SCORE,
    TIME_ATTACK,
    ENDLESS,
    HASH,
    GAME,
    GAME_ACTIVE,
    GAME_ENABLED
  };
  return values;
}

enum SettingVariableType {
  BOOL = 0,
  UBYTE = 1,
  UINT = 2
};

inline SettingVariableType (&EnumValuesSettingVariableType())[3] {
  static SettingVariableType values[] = {
    BOOL,
    UBYTE,
    UINT
  };
  return values;
}

inline const char **EnumNamesSettingVariableType() {
  static const char *names[] = {
    "BOOL",
    "UBYTE",
    "UINT",
    nullptr
  };
  return names;
}

inline const char *EnumNameSettingVariableType(SettingVariableType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSettingVariableType()[index];
}

enum Language {
  ENGLISH = 0,
  GERMAN = 1,
  CHINESE = 2,
  CRUMMY_GERMAN = 255
};

inline Language (&EnumValuesLanguage())[4] {
  static Language values[] = {
    ENGLISH,
    GERMAN,
    CHINESE,
    CRUMMY_GERMAN
  };
  return values;
}

enum GameMode {
  CLIMB = 0,
  COLLECT = 1,
  EXPLORE = 2
};

inline GameMode (&EnumValuesGameMode())[3] {
  static GameMode values[] = {
    CLIMB,
    COLLECT,
    EXPLORE
  };
  return values;
}

inline const char **EnumNamesGameMode() {
  static const char *names[] = {
    "CLIMB",
    "COLLECT",
    "EXPLORE",
    nullptr
  };
  return names;
}

inline const char *EnumNameGameMode(GameMode e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesGameMode()[index];
}

enum Difficulty {
  VERY_EASY = 0,
  EASY = 1,
  NORMAL = 2,
  HARD = 3,
  VERY_HARD = 4
};

inline Difficulty (&EnumValuesDifficulty())[5] {
  static Difficulty values[] = {
    VERY_EASY,
    EASY,
    NORMAL,
    HARD,
    VERY_HARD
  };
  return values;
}

inline const char **EnumNamesDifficulty() {
  static const char *names[] = {
    "VERY_EASY",
    "EASY",
    "NORMAL",
    "HARD",
    "VERY_HARD",
    nullptr
  };
  return names;
}

inline const char *EnumNameDifficulty(Difficulty e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDifficulty()[index];
}

enum World {
  ORIGIN_MOUNTAIN = 0,
  BLOCKSBERG = 1,
  RED_CANYON = 2,
  SECRET_ISLAND = 3
};

inline World (&EnumValuesWorld())[4] {
  static World values[] = {
    ORIGIN_MOUNTAIN,
    BLOCKSBERG,
    RED_CANYON,
    SECRET_ISLAND
  };
  return values;
}

inline const char **EnumNamesWorld() {
  static const char *names[] = {
    "ORIGIN_MOUNTAIN",
    "BLOCKSBERG",
    "RED_CANYON",
    "SECRET_ISLAND",
    nullptr
  };
  return names;
}

inline const char *EnumNameWorld(World e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesWorld()[index];
}

enum Game {
  CLASSIC = 0,
  DOWNHILL = 1
};

inline Game (&EnumValuesGame())[2] {
  static Game values[] = {
    CLASSIC,
    DOWNHILL
  };
  return values;
}

inline const char **EnumNamesGame() {
  static const char *names[] = {
    "CLASSIC",
    "DOWNHILL",
    nullptr
  };
  return names;
}

inline const char *EnumNameGame(Game e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesGame()[index];
}

enum DmxChannelRuleType {
  GOAL = 0,
  TIME = 1,
  PITCH = 2
};

inline DmxChannelRuleType (&EnumValuesDmxChannelRuleType())[3] {
  static DmxChannelRuleType values[] = {
    GOAL,
    TIME,
    PITCH
  };
  return values;
}

inline const char **EnumNamesDmxChannelRuleType() {
  static const char *names[] = {
    "GOAL",
    "TIME",
    "PITCH",
    nullptr
  };
  return names;
}

inline const char *EnumNameDmxChannelRuleType(DmxChannelRuleType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDmxChannelRuleType()[index];
}

enum DmxDeviceSettingType {
  RANGE = 0,
  CHECKBOX = 1
};

inline DmxDeviceSettingType (&EnumValuesDmxDeviceSettingType())[2] {
  static DmxDeviceSettingType values[] = {
    RANGE,
    CHECKBOX
  };
  return values;
}

inline const char **EnumNamesDmxDeviceSettingType() {
  static const char *names[] = {
    "RANGE",
    "CHECKBOX",
    nullptr
  };
  return names;
}

inline const char *EnumNameDmxDeviceSettingType(DmxDeviceSettingType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDmxDeviceSettingType()[index];
}

enum DmxDeviceMode {
  TEST = 0,
  DISABLED = 1
};

inline DmxDeviceMode (&EnumValuesDmxDeviceMode())[2] {
  static DmxDeviceMode values[] = {
    TEST,
    DISABLED
  };
  return values;
}

inline const char **EnumNamesDmxDeviceMode() {
  static const char *names[] = {
    "TEST",
    "DISABLED",
    nullptr
  };
  return names;
}

inline const char *EnumNameDmxDeviceMode(DmxDeviceMode e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDmxDeviceMode()[index];
}

MANUALLY_ALIGNED_STRUCT(1) Version FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t high_;
  uint8_t low_;

 public:
  Version() {
    memset(this, 0, sizeof(Version));
  }
  Version(const Version &_o) {
    memcpy(this, &_o, sizeof(Version));
  }
  Version(uint8_t _high, uint8_t _low)
      : high_(flatbuffers::EndianScalar(_high)),
        low_(flatbuffers::EndianScalar(_low)) {
  }
  uint8_t high() const {
    return flatbuffers::EndianScalar(high_);
  }
  uint8_t low() const {
    return flatbuffers::EndianScalar(low_);
  }
};
STRUCT_END(Version, 2);

MANUALLY_ALIGNED_STRUCT(4) LiveData FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t goal_;
  int32_t time_;
  int32_t pitch_;

 public:
  LiveData() {
    memset(this, 0, sizeof(LiveData));
  }
  LiveData(const LiveData &_o) {
    memcpy(this, &_o, sizeof(LiveData));
  }
  LiveData(int32_t _goal, int32_t _time, int32_t _pitch)
      : goal_(flatbuffers::EndianScalar(_goal)),
        time_(flatbuffers::EndianScalar(_time)),
        pitch_(flatbuffers::EndianScalar(_pitch)) {
  }
  int32_t goal() const {
    return flatbuffers::EndianScalar(goal_);
  }
  int32_t time() const {
    return flatbuffers::EndianScalar(time_);
  }
  int32_t pitch() const {
    return flatbuffers::EndianScalar(pitch_);
  }
};
STRUCT_END(LiveData, 12);

MANUALLY_ALIGNED_STRUCT(4) Coordinates FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;
  int32_t z_;

 public:
  Coordinates() {
    memset(this, 0, sizeof(Coordinates));
  }
  Coordinates(const Coordinates &_o) {
    memcpy(this, &_o, sizeof(Coordinates));
  }
  Coordinates(int32_t _x, int32_t _y, int32_t _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  int32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
  int32_t z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Coordinates, 12);

MANUALLY_ALIGNED_STRUCT(4) Setting FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t type_;
  uint8_t variableType_;
  int16_t padding0__;
  uint32_t value_;

 public:
  Setting() {
    memset(this, 0, sizeof(Setting));
  }
  Setting(const Setting &_o) {
    memcpy(this, &_o, sizeof(Setting));
  }
  Setting(SettingType _type, SettingVariableType _variableType, uint32_t _value)
      : type_(flatbuffers::EndianScalar(static_cast<uint8_t>(_type))),
        variableType_(flatbuffers::EndianScalar(static_cast<uint8_t>(_variableType))),
        padding0__(0),
        value_(flatbuffers::EndianScalar(_value)) {
    (void)padding0__;
  }
  SettingType type() const {
    return static_cast<SettingType>(flatbuffers::EndianScalar(type_));
  }
  SettingVariableType variableType() const {
    return static_cast<SettingVariableType>(flatbuffers::EndianScalar(variableType_));
  }
  uint32_t value() const {
    return flatbuffers::EndianScalar(value_);
  }
};
STRUCT_END(Setting, 8);

MANUALLY_ALIGNED_STRUCT(4) DmxDeviceChannel FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t storageRef_;
  uint32_t channel_;
  uint8_t test_;
  uint8_t norm_;
  int16_t padding0__;
  uint32_t ruleCount_;

 public:
  DmxDeviceChannel() {
    memset(this, 0, sizeof(DmxDeviceChannel));
  }
  DmxDeviceChannel(const DmxDeviceChannel &_o) {
    memcpy(this, &_o, sizeof(DmxDeviceChannel));
  }
  DmxDeviceChannel(int32_t _storageRef, uint32_t _channel, uint8_t _test, uint8_t _norm, uint32_t _ruleCount)
      : storageRef_(flatbuffers::EndianScalar(_storageRef)),
        channel_(flatbuffers::EndianScalar(_channel)),
        test_(flatbuffers::EndianScalar(_test)),
        norm_(flatbuffers::EndianScalar(_norm)),
        padding0__(0),
        ruleCount_(flatbuffers::EndianScalar(_ruleCount)) {
    (void)padding0__;
  }
  int32_t storageRef() const {
    return flatbuffers::EndianScalar(storageRef_);
  }
  uint32_t channel() const {
    return flatbuffers::EndianScalar(channel_);
  }
  uint8_t test() const {
    return flatbuffers::EndianScalar(test_);
  }
  uint8_t norm() const {
    return flatbuffers::EndianScalar(norm_);
  }
  uint32_t ruleCount() const {
    return flatbuffers::EndianScalar(ruleCount_);
  }
};
STRUCT_END(DmxDeviceChannel, 16);

MANUALLY_ALIGNED_STRUCT(4) DmxChannelRule FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t storageRef_;
  int8_t type_;
  int8_t padding0__;  int16_t padding1__;
  int32_t on_;
  int32_t calcOn_;
  int32_t off_;
  int32_t calcOff_;
  uint8_t start_;
  uint8_t calcStart_;
  int16_t padding2__;
  float step_;
  float calcStep_;

 public:
  DmxChannelRule() {
    memset(this, 0, sizeof(DmxChannelRule));
  }
  DmxChannelRule(const DmxChannelRule &_o) {
    memcpy(this, &_o, sizeof(DmxChannelRule));
  }
  DmxChannelRule(int32_t _storageRef, DmxChannelRuleType _type, int32_t _on, int32_t _calcOn, int32_t _off, int32_t _calcOff, uint8_t _start, uint8_t _calcStart, float _step, float _calcStep)
      : storageRef_(flatbuffers::EndianScalar(_storageRef)),
        type_(flatbuffers::EndianScalar(static_cast<int8_t>(_type))),
        padding0__(0),
        padding1__(0),
        on_(flatbuffers::EndianScalar(_on)),
        calcOn_(flatbuffers::EndianScalar(_calcOn)),
        off_(flatbuffers::EndianScalar(_off)),
        calcOff_(flatbuffers::EndianScalar(_calcOff)),
        start_(flatbuffers::EndianScalar(_start)),
        calcStart_(flatbuffers::EndianScalar(_calcStart)),
        padding2__(0),
        step_(flatbuffers::EndianScalar(_step)),
        calcStep_(flatbuffers::EndianScalar(_calcStep)) {
    (void)padding0__;    (void)padding1__;
    (void)padding2__;
  }
  int32_t storageRef() const {
    return flatbuffers::EndianScalar(storageRef_);
  }
  DmxChannelRuleType type() const {
    return static_cast<DmxChannelRuleType>(flatbuffers::EndianScalar(type_));
  }
  int32_t on() const {
    return flatbuffers::EndianScalar(on_);
  }
  int32_t calcOn() const {
    return flatbuffers::EndianScalar(calcOn_);
  }
  int32_t off() const {
    return flatbuffers::EndianScalar(off_);
  }
  int32_t calcOff() const {
    return flatbuffers::EndianScalar(calcOff_);
  }
  uint8_t start() const {
    return flatbuffers::EndianScalar(start_);
  }
  uint8_t calcStart() const {
    return flatbuffers::EndianScalar(calcStart_);
  }
  float step() const {
    return flatbuffers::EndianScalar(step_);
  }
  float calcStep() const {
    return flatbuffers::EndianScalar(calcStep_);
  }
};
STRUCT_END(DmxChannelRule, 36);

MANUALLY_ALIGNED_STRUCT(4) DmxRuleRangeSetting FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t storageRef_;
  uint32_t channel_;
  uint32_t ruleNo_;
  float on_;
  float off_;
  float start_;
  float step_;

 public:
  DmxRuleRangeSetting() {
    memset(this, 0, sizeof(DmxRuleRangeSetting));
  }
  DmxRuleRangeSetting(const DmxRuleRangeSetting &_o) {
    memcpy(this, &_o, sizeof(DmxRuleRangeSetting));
  }
  DmxRuleRangeSetting(int32_t _storageRef, uint32_t _channel, uint32_t _ruleNo, float _on, float _off, float _start, float _step)
      : storageRef_(flatbuffers::EndianScalar(_storageRef)),
        channel_(flatbuffers::EndianScalar(_channel)),
        ruleNo_(flatbuffers::EndianScalar(_ruleNo)),
        on_(flatbuffers::EndianScalar(_on)),
        off_(flatbuffers::EndianScalar(_off)),
        start_(flatbuffers::EndianScalar(_start)),
        step_(flatbuffers::EndianScalar(_step)) {
  }
  int32_t storageRef() const {
    return flatbuffers::EndianScalar(storageRef_);
  }
  uint32_t channel() const {
    return flatbuffers::EndianScalar(channel_);
  }
  uint32_t ruleNo() const {
    return flatbuffers::EndianScalar(ruleNo_);
  }
  float on() const {
    return flatbuffers::EndianScalar(on_);
  }
  float off() const {
    return flatbuffers::EndianScalar(off_);
  }
  float start() const {
    return flatbuffers::EndianScalar(start_);
  }
  float step() const {
    return flatbuffers::EndianScalar(step_);
  }
};
STRUCT_END(DmxRuleRangeSetting, 28);

MANUALLY_ALIGNED_STRUCT(4) DmxRuleBoolSetting FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t storageRef_;
  uint32_t channel_;
  uint32_t ruleNo_;
  int32_t on_;
  int32_t off_;
  uint8_t start_;
  int8_t padding0__;  int16_t padding1__;
  float step_;

 public:
  DmxRuleBoolSetting() {
    memset(this, 0, sizeof(DmxRuleBoolSetting));
  }
  DmxRuleBoolSetting(const DmxRuleBoolSetting &_o) {
    memcpy(this, &_o, sizeof(DmxRuleBoolSetting));
  }
  DmxRuleBoolSetting(int32_t _storageRef, uint32_t _channel, uint32_t _ruleNo, int32_t _on, int32_t _off, uint8_t _start, float _step)
      : storageRef_(flatbuffers::EndianScalar(_storageRef)),
        channel_(flatbuffers::EndianScalar(_channel)),
        ruleNo_(flatbuffers::EndianScalar(_ruleNo)),
        on_(flatbuffers::EndianScalar(_on)),
        off_(flatbuffers::EndianScalar(_off)),
        start_(flatbuffers::EndianScalar(_start)),
        padding0__(0),
        padding1__(0),
        step_(flatbuffers::EndianScalar(_step)) {
    (void)padding0__;    (void)padding1__;
  }
  int32_t storageRef() const {
    return flatbuffers::EndianScalar(storageRef_);
  }
  uint32_t channel() const {
    return flatbuffers::EndianScalar(channel_);
  }
  uint32_t ruleNo() const {
    return flatbuffers::EndianScalar(ruleNo_);
  }
  int32_t on() const {
    return flatbuffers::EndianScalar(on_);
  }
  int32_t off() const {
    return flatbuffers::EndianScalar(off_);
  }
  uint8_t start() const {
    return flatbuffers::EndianScalar(start_);
  }
  float step() const {
    return flatbuffers::EndianScalar(step_);
  }
};
STRUCT_END(DmxRuleBoolSetting, 28);

struct Root FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VERSION = 4,
    VT_MESSAGEID = 6,
    VT_PAYLOAD_TYPE = 8,
    VT_PAYLOAD = 10
  };
  const Version *version() const {
    return GetStruct<const Version *>(VT_VERSION);
  }
  uint16_t messageId() const {
    return GetField<uint16_t>(VT_MESSAGEID, 0);
  }
  Payload payload_type() const {
    return static_cast<Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const sisyfox::sisycol::response::Error *payload_as_Error() const {
    return payload_type() == Error ? static_cast<const sisyfox::sisycol::response::Error *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::Info *payload_as_Info() const {
    return payload_type() == Info ? static_cast<const sisyfox::sisycol::request::Info *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddScore *payload_as_AddScore() const {
    return payload_type() == AddScore ? static_cast<const sisyfox::sisycol::request::AddScore *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetScore *payload_as_GetScore() const {
    return payload_type() == GetScore ? static_cast<const sisyfox::sisycol::request::GetScore *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetScoreRange *payload_as_GetScoreRange() const {
    return payload_type() == GetScoreRange ? static_cast<const sisyfox::sisycol::request::GetScoreRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::SetLiveData *payload_as_SetLiveData() const {
    return payload_type() == SetLiveData ? static_cast<const sisyfox::sisycol::request::SetLiveData *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetLiveData *payload_as_GetLiveData() const {
    return payload_type() == GetLiveData ? static_cast<const sisyfox::sisycol::request::GetLiveData *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddUser *payload_as_AddUser() const {
    return payload_type() == AddUser ? static_cast<const sisyfox::sisycol::request::AddUser *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetUser *payload_as_GetUser() const {
    return payload_type() == GetUser ? static_cast<const sisyfox::sisycol::request::GetUser *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::SetUser *payload_as_SetUser() const {
    return payload_type() == SetUser ? static_cast<const sisyfox::sisycol::request::SetUser *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetCurrentUser *payload_as_GetCurrentUser() const {
    return payload_type() == GetCurrentUser ? static_cast<const sisyfox::sisycol::request::GetCurrentUser *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetUserRange *payload_as_GetUserRange() const {
    return payload_type() == GetUserRange ? static_cast<const sisyfox::sisycol::request::GetUserRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::RemoveUser *payload_as_RemoveUser() const {
    return payload_type() == RemoveUser ? static_cast<const sisyfox::sisycol::request::RemoveUser *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::UnsetUser *payload_as_UnsetUser() const {
    return payload_type() == UnsetUser ? static_cast<const sisyfox::sisycol::request::UnsetUser *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddLocation *payload_as_AddLocation() const {
    return payload_type() == AddLocation ? static_cast<const sisyfox::sisycol::request::AddLocation *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetLocation *payload_as_GetLocation() const {
    return payload_type() == GetLocation ? static_cast<const sisyfox::sisycol::request::GetLocation *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::SetSetting *payload_as_SetSetting() const {
    return payload_type() == SetSetting ? static_cast<const sisyfox::sisycol::request::SetSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetSetting *payload_as_GetSetting() const {
    return payload_type() == GetSetting ? static_cast<const sisyfox::sisycol::request::GetSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetSettings *payload_as_GetSettings() const {
    return payload_type() == GetSettings ? static_cast<const sisyfox::sisycol::request::GetSettings *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::Trigger *payload_as_Trigger() const {
    return payload_type() == Trigger ? static_cast<const sisyfox::sisycol::request::Trigger *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddDmxDevice *payload_as_AddDmxDevice() const {
    return payload_type() == AddDmxDevice ? static_cast<const sisyfox::sisycol::request::AddDmxDevice *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::RemoveDmxDevice *payload_as_RemoveDmxDevice() const {
    return payload_type() == RemoveDmxDevice ? static_cast<const sisyfox::sisycol::request::RemoveDmxDevice *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddDmxDeviceChannel *payload_as_AddDmxDeviceChannel() const {
    return payload_type() == AddDmxDeviceChannel ? static_cast<const sisyfox::sisycol::request::AddDmxDeviceChannel *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::RemoveDmxDeviceChannel *payload_as_RemoveDmxDeviceChannel() const {
    return payload_type() == RemoveDmxDeviceChannel ? static_cast<const sisyfox::sisycol::request::RemoveDmxDeviceChannel *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddDmxChannelRule *payload_as_AddDmxChannelRule() const {
    return payload_type() == AddDmxChannelRule ? static_cast<const sisyfox::sisycol::request::AddDmxChannelRule *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::RemoveDmxChannelRule *payload_as_RemoveDmxChannelRule() const {
    return payload_type() == RemoveDmxChannelRule ? static_cast<const sisyfox::sisycol::request::RemoveDmxChannelRule *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddDmxDeviceSetting *payload_as_AddDmxDeviceSetting() const {
    return payload_type() == AddDmxDeviceSetting ? static_cast<const sisyfox::sisycol::request::AddDmxDeviceSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::response::AddDmxRuleSetting *payload_as_AddDmxRuleSetting() const {
    return payload_type() == AddDmxRuleSetting ? static_cast<const sisyfox::sisycol::response::AddDmxRuleSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::RemoveDmxDeviceSetting *payload_as_RemoveDmxDeviceSetting() const {
    return payload_type() == RemoveDmxDeviceSetting ? static_cast<const sisyfox::sisycol::request::RemoveDmxDeviceSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddDmxRuleRangeSetting *payload_as_AddDmxRuleRangeSetting() const {
    return payload_type() == AddDmxRuleRangeSetting ? static_cast<const sisyfox::sisycol::request::AddDmxRuleRangeSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::AddDmxRuleBoolSetting *payload_as_AddDmxRuleBoolSetting() const {
    return payload_type() == AddDmxRuleBoolSetting ? static_cast<const sisyfox::sisycol::request::AddDmxRuleBoolSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::RemoveDmxRuleSetting *payload_as_RemoveDmxRuleSetting() const {
    return payload_type() == RemoveDmxRuleSetting ? static_cast<const sisyfox::sisycol::request::RemoveDmxRuleSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::ChangeDmxDeviceSettingValue *payload_as_ChangeDmxDeviceSettingValue() const {
    return payload_type() == ChangeDmxDeviceSettingValue ? static_cast<const sisyfox::sisycol::request::ChangeDmxDeviceSettingValue *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxDevice *payload_as_GetDmxDevice() const {
    return payload_type() == GetDmxDevice ? static_cast<const sisyfox::sisycol::request::GetDmxDevice *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxDeviceChannel *payload_as_GetDmxDeviceChannel() const {
    return payload_type() == GetDmxDeviceChannel ? static_cast<const sisyfox::sisycol::request::GetDmxDeviceChannel *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxChannelRule *payload_as_GetDmxChannelRule() const {
    return payload_type() == GetDmxChannelRule ? static_cast<const sisyfox::sisycol::request::GetDmxChannelRule *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxDeviceSetting *payload_as_GetDmxDeviceSetting() const {
    return payload_type() == GetDmxDeviceSetting ? static_cast<const sisyfox::sisycol::request::GetDmxDeviceSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxRuleSetting *payload_as_GetDmxRuleSetting() const {
    return payload_type() == GetDmxRuleSetting ? static_cast<const sisyfox::sisycol::request::GetDmxRuleSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxDeviceRange *payload_as_GetDmxDeviceRange() const {
    return payload_type() == GetDmxDeviceRange ? static_cast<const sisyfox::sisycol::request::GetDmxDeviceRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxDeviceChannelRange *payload_as_GetDmxDeviceChannelRange() const {
    return payload_type() == GetDmxDeviceChannelRange ? static_cast<const sisyfox::sisycol::request::GetDmxDeviceChannelRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxChannelRuleRange *payload_as_GetDmxChannelRuleRange() const {
    return payload_type() == GetDmxChannelRuleRange ? static_cast<const sisyfox::sisycol::request::GetDmxChannelRuleRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxDeviceSettingRange *payload_as_GetDmxDeviceSettingRange() const {
    return payload_type() == GetDmxDeviceSettingRange ? static_cast<const sisyfox::sisycol::request::GetDmxDeviceSettingRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetDmxRuleSettingRange *payload_as_GetDmxRuleSettingRange() const {
    return payload_type() == GetDmxRuleSettingRange ? static_cast<const sisyfox::sisycol::request::GetDmxRuleSettingRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::response::GetDmxRuleRangeSetting *payload_as_GetDmxRuleRangeSetting() const {
    return payload_type() == GetDmxRuleRangeSetting ? static_cast<const sisyfox::sisycol::response::GetDmxRuleRangeSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::response::GetDmxRuleRangeSettingRange *payload_as_GetDmxRuleRangeSettingRange() const {
    return payload_type() == GetDmxRuleRangeSettingRange ? static_cast<const sisyfox::sisycol::response::GetDmxRuleRangeSettingRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::response::GetDmxRuleBoolSetting *payload_as_GetDmxRuleBoolSetting() const {
    return payload_type() == GetDmxRuleBoolSetting ? static_cast<const sisyfox::sisycol::response::GetDmxRuleBoolSetting *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::response::GetDmxRuleBoolSettingRange *payload_as_GetDmxRuleBoolSettingRange() const {
    return payload_type() == GetDmxRuleBoolSettingRange ? static_cast<const sisyfox::sisycol::response::GetDmxRuleBoolSettingRange *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::SetDmxDeviceMode *payload_as_SetDmxDeviceMode() const {
    return payload_type() == SetDmxDeviceMode ? static_cast<const sisyfox::sisycol::request::SetDmxDeviceMode *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::ResetDmxConfig *payload_as_ResetDmxConfig() const {
    return payload_type() == ResetDmxConfig ? static_cast<const sisyfox::sisycol::request::ResetDmxConfig *>(payload()) : nullptr;
  }
  const sisyfox::sisycol::request::GetIdealTime *payload_as_GetIdealTime() const {
    return payload_type() == GetIdealTime ? static_cast<const sisyfox::sisycol::request::GetIdealTime *>(payload()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Version>(verifier, VT_VERSION) &&
           VerifyField<uint16_t>(verifier, VT_MESSAGEID) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const sisyfox::sisycol::response::Error *Root::payload_as<sisyfox::sisycol::response::Error>() const {
  return payload_as_Error();
}

template<> inline const sisyfox::sisycol::request::Info *Root::payload_as<sisyfox::sisycol::request::Info>() const {
  return payload_as_Info();
}

template<> inline const sisyfox::sisycol::request::AddScore *Root::payload_as<sisyfox::sisycol::request::AddScore>() const {
  return payload_as_AddScore();
}

template<> inline const sisyfox::sisycol::request::GetScore *Root::payload_as<sisyfox::sisycol::request::GetScore>() const {
  return payload_as_GetScore();
}

template<> inline const sisyfox::sisycol::request::GetScoreRange *Root::payload_as<sisyfox::sisycol::request::GetScoreRange>() const {
  return payload_as_GetScoreRange();
}

template<> inline const sisyfox::sisycol::request::SetLiveData *Root::payload_as<sisyfox::sisycol::request::SetLiveData>() const {
  return payload_as_SetLiveData();
}

template<> inline const sisyfox::sisycol::request::GetLiveData *Root::payload_as<sisyfox::sisycol::request::GetLiveData>() const {
  return payload_as_GetLiveData();
}

template<> inline const sisyfox::sisycol::request::AddUser *Root::payload_as<sisyfox::sisycol::request::AddUser>() const {
  return payload_as_AddUser();
}

template<> inline const sisyfox::sisycol::request::GetUser *Root::payload_as<sisyfox::sisycol::request::GetUser>() const {
  return payload_as_GetUser();
}

template<> inline const sisyfox::sisycol::request::SetUser *Root::payload_as<sisyfox::sisycol::request::SetUser>() const {
  return payload_as_SetUser();
}

template<> inline const sisyfox::sisycol::request::GetCurrentUser *Root::payload_as<sisyfox::sisycol::request::GetCurrentUser>() const {
  return payload_as_GetCurrentUser();
}

template<> inline const sisyfox::sisycol::request::GetUserRange *Root::payload_as<sisyfox::sisycol::request::GetUserRange>() const {
  return payload_as_GetUserRange();
}

template<> inline const sisyfox::sisycol::request::RemoveUser *Root::payload_as<sisyfox::sisycol::request::RemoveUser>() const {
  return payload_as_RemoveUser();
}

template<> inline const sisyfox::sisycol::request::UnsetUser *Root::payload_as<sisyfox::sisycol::request::UnsetUser>() const {
  return payload_as_UnsetUser();
}

template<> inline const sisyfox::sisycol::request::AddLocation *Root::payload_as<sisyfox::sisycol::request::AddLocation>() const {
  return payload_as_AddLocation();
}

template<> inline const sisyfox::sisycol::request::GetLocation *Root::payload_as<sisyfox::sisycol::request::GetLocation>() const {
  return payload_as_GetLocation();
}

template<> inline const sisyfox::sisycol::request::SetSetting *Root::payload_as<sisyfox::sisycol::request::SetSetting>() const {
  return payload_as_SetSetting();
}

template<> inline const sisyfox::sisycol::request::GetSetting *Root::payload_as<sisyfox::sisycol::request::GetSetting>() const {
  return payload_as_GetSetting();
}

template<> inline const sisyfox::sisycol::request::GetSettings *Root::payload_as<sisyfox::sisycol::request::GetSettings>() const {
  return payload_as_GetSettings();
}

template<> inline const sisyfox::sisycol::request::Trigger *Root::payload_as<sisyfox::sisycol::request::Trigger>() const {
  return payload_as_Trigger();
}

template<> inline const sisyfox::sisycol::request::AddDmxDevice *Root::payload_as<sisyfox::sisycol::request::AddDmxDevice>() const {
  return payload_as_AddDmxDevice();
}

template<> inline const sisyfox::sisycol::request::RemoveDmxDevice *Root::payload_as<sisyfox::sisycol::request::RemoveDmxDevice>() const {
  return payload_as_RemoveDmxDevice();
}

template<> inline const sisyfox::sisycol::request::AddDmxDeviceChannel *Root::payload_as<sisyfox::sisycol::request::AddDmxDeviceChannel>() const {
  return payload_as_AddDmxDeviceChannel();
}

template<> inline const sisyfox::sisycol::request::RemoveDmxDeviceChannel *Root::payload_as<sisyfox::sisycol::request::RemoveDmxDeviceChannel>() const {
  return payload_as_RemoveDmxDeviceChannel();
}

template<> inline const sisyfox::sisycol::request::AddDmxChannelRule *Root::payload_as<sisyfox::sisycol::request::AddDmxChannelRule>() const {
  return payload_as_AddDmxChannelRule();
}

template<> inline const sisyfox::sisycol::request::RemoveDmxChannelRule *Root::payload_as<sisyfox::sisycol::request::RemoveDmxChannelRule>() const {
  return payload_as_RemoveDmxChannelRule();
}

template<> inline const sisyfox::sisycol::request::AddDmxDeviceSetting *Root::payload_as<sisyfox::sisycol::request::AddDmxDeviceSetting>() const {
  return payload_as_AddDmxDeviceSetting();
}

template<> inline const sisyfox::sisycol::response::AddDmxRuleSetting *Root::payload_as<sisyfox::sisycol::response::AddDmxRuleSetting>() const {
  return payload_as_AddDmxRuleSetting();
}

template<> inline const sisyfox::sisycol::request::RemoveDmxDeviceSetting *Root::payload_as<sisyfox::sisycol::request::RemoveDmxDeviceSetting>() const {
  return payload_as_RemoveDmxDeviceSetting();
}

template<> inline const sisyfox::sisycol::request::AddDmxRuleRangeSetting *Root::payload_as<sisyfox::sisycol::request::AddDmxRuleRangeSetting>() const {
  return payload_as_AddDmxRuleRangeSetting();
}

template<> inline const sisyfox::sisycol::request::AddDmxRuleBoolSetting *Root::payload_as<sisyfox::sisycol::request::AddDmxRuleBoolSetting>() const {
  return payload_as_AddDmxRuleBoolSetting();
}

template<> inline const sisyfox::sisycol::request::RemoveDmxRuleSetting *Root::payload_as<sisyfox::sisycol::request::RemoveDmxRuleSetting>() const {
  return payload_as_RemoveDmxRuleSetting();
}

template<> inline const sisyfox::sisycol::request::ChangeDmxDeviceSettingValue *Root::payload_as<sisyfox::sisycol::request::ChangeDmxDeviceSettingValue>() const {
  return payload_as_ChangeDmxDeviceSettingValue();
}

template<> inline const sisyfox::sisycol::request::GetDmxDevice *Root::payload_as<sisyfox::sisycol::request::GetDmxDevice>() const {
  return payload_as_GetDmxDevice();
}

template<> inline const sisyfox::sisycol::request::GetDmxDeviceChannel *Root::payload_as<sisyfox::sisycol::request::GetDmxDeviceChannel>() const {
  return payload_as_GetDmxDeviceChannel();
}

template<> inline const sisyfox::sisycol::request::GetDmxChannelRule *Root::payload_as<sisyfox::sisycol::request::GetDmxChannelRule>() const {
  return payload_as_GetDmxChannelRule();
}

template<> inline const sisyfox::sisycol::request::GetDmxDeviceSetting *Root::payload_as<sisyfox::sisycol::request::GetDmxDeviceSetting>() const {
  return payload_as_GetDmxDeviceSetting();
}

template<> inline const sisyfox::sisycol::request::GetDmxRuleSetting *Root::payload_as<sisyfox::sisycol::request::GetDmxRuleSetting>() const {
  return payload_as_GetDmxRuleSetting();
}

template<> inline const sisyfox::sisycol::request::GetDmxDeviceRange *Root::payload_as<sisyfox::sisycol::request::GetDmxDeviceRange>() const {
  return payload_as_GetDmxDeviceRange();
}

template<> inline const sisyfox::sisycol::request::GetDmxDeviceChannelRange *Root::payload_as<sisyfox::sisycol::request::GetDmxDeviceChannelRange>() const {
  return payload_as_GetDmxDeviceChannelRange();
}

template<> inline const sisyfox::sisycol::request::GetDmxChannelRuleRange *Root::payload_as<sisyfox::sisycol::request::GetDmxChannelRuleRange>() const {
  return payload_as_GetDmxChannelRuleRange();
}

template<> inline const sisyfox::sisycol::request::GetDmxDeviceSettingRange *Root::payload_as<sisyfox::sisycol::request::GetDmxDeviceSettingRange>() const {
  return payload_as_GetDmxDeviceSettingRange();
}

template<> inline const sisyfox::sisycol::request::GetDmxRuleSettingRange *Root::payload_as<sisyfox::sisycol::request::GetDmxRuleSettingRange>() const {
  return payload_as_GetDmxRuleSettingRange();
}

template<> inline const sisyfox::sisycol::response::GetDmxRuleRangeSetting *Root::payload_as<sisyfox::sisycol::response::GetDmxRuleRangeSetting>() const {
  return payload_as_GetDmxRuleRangeSetting();
}

template<> inline const sisyfox::sisycol::response::GetDmxRuleRangeSettingRange *Root::payload_as<sisyfox::sisycol::response::GetDmxRuleRangeSettingRange>() const {
  return payload_as_GetDmxRuleRangeSettingRange();
}

template<> inline const sisyfox::sisycol::response::GetDmxRuleBoolSetting *Root::payload_as<sisyfox::sisycol::response::GetDmxRuleBoolSetting>() const {
  return payload_as_GetDmxRuleBoolSetting();
}

template<> inline const sisyfox::sisycol::response::GetDmxRuleBoolSettingRange *Root::payload_as<sisyfox::sisycol::response::GetDmxRuleBoolSettingRange>() const {
  return payload_as_GetDmxRuleBoolSettingRange();
}

template<> inline const sisyfox::sisycol::request::SetDmxDeviceMode *Root::payload_as<sisyfox::sisycol::request::SetDmxDeviceMode>() const {
  return payload_as_SetDmxDeviceMode();
}

template<> inline const sisyfox::sisycol::request::ResetDmxConfig *Root::payload_as<sisyfox::sisycol::request::ResetDmxConfig>() const {
  return payload_as_ResetDmxConfig();
}

template<> inline const sisyfox::sisycol::request::GetIdealTime *Root::payload_as<sisyfox::sisycol::request::GetIdealTime>() const {
  return payload_as_GetIdealTime();
}

struct RootBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(const Version *version) {
    fbb_.AddStruct(Root::VT_VERSION, version);
  }
  void add_messageId(uint16_t messageId) {
    fbb_.AddElement<uint16_t>(Root::VT_MESSAGEID, messageId, 0);
  }
  void add_payload_type(Payload payload_type) {
    fbb_.AddElement<uint8_t>(Root::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Root::VT_PAYLOAD, payload);
  }
  explicit RootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RootBuilder &operator=(const RootBuilder &);
  flatbuffers::Offset<Root> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Root>(end);
    return o;
  }
};

inline flatbuffers::Offset<Root> CreateRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Version *version = 0,
    uint16_t messageId = 0,
    Payload payload_type = NONE,
    flatbuffers::Offset<void> payload = 0) {
  RootBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_version(version);
  builder_.add_messageId(messageId);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

struct Score FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_GOAL = 6,
    VT_MAXGOAL = 8,
    VT_TIME = 10,
    VT_RANK = 12,
    VT_TIMESTAMP = 14,
    VT_LEVEL = 16,
    VT_WORLD = 18,
    VT_GAMEMODE = 20,
    VT_DIFFICULTY = 22,
    VT_REASON = 24,
    VT_GOALSCORE = 26,
    VT_TIMESCORE = 28,
    VT_ENDSCORE = 30,
    VT_RATING = 32,
    VT_MODESPECIFCVALUE = 34,
    VT_ENDPOSITION = 36,
    VT_HASH = 38
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  int32_t goal() const {
    return GetField<int32_t>(VT_GOAL, 0);
  }
  int32_t maxGoal() const {
    return GetField<int32_t>(VT_MAXGOAL, 0);
  }
  int32_t time() const {
    return GetField<int32_t>(VT_TIME, 0);
  }
  uint32_t rank() const {
    return GetField<uint32_t>(VT_RANK, 0);
  }
  int64_t timestamp() const {
    return GetField<int64_t>(VT_TIMESTAMP, 0);
  }
  uint8_t level() const {
    return GetField<uint8_t>(VT_LEVEL, 0);
  }
  uint8_t world() const {
    return GetField<uint8_t>(VT_WORLD, 0);
  }
  GameMode gameMode() const {
    return static_cast<GameMode>(GetField<uint8_t>(VT_GAMEMODE, 0));
  }
  Difficulty difficulty() const {
    return static_cast<Difficulty>(GetField<uint8_t>(VT_DIFFICULTY, 0));
  }
  EndReason reason() const {
    return static_cast<EndReason>(GetField<uint8_t>(VT_REASON, 0));
  }
  int32_t goalScore() const {
    return GetField<int32_t>(VT_GOALSCORE, 0);
  }
  int32_t timeScore() const {
    return GetField<int32_t>(VT_TIMESCORE, 0);
  }
  int32_t endScore() const {
    return GetField<int32_t>(VT_ENDSCORE, 0);
  }
  int32_t rating() const {
    return GetField<int32_t>(VT_RATING, 0);
  }
  int32_t modeSpecifcValue() const {
    return GetField<int32_t>(VT_MODESPECIFCVALUE, 0);
  }
  const Coordinates *endPosition() const {
    return GetStruct<const Coordinates *>(VT_ENDPOSITION);
  }
  const flatbuffers::Vector<uint8_t> *hash() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HASH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<int32_t>(verifier, VT_GOAL) &&
           VerifyField<int32_t>(verifier, VT_MAXGOAL) &&
           VerifyField<int32_t>(verifier, VT_TIME) &&
           VerifyField<uint32_t>(verifier, VT_RANK) &&
           VerifyField<int64_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<uint8_t>(verifier, VT_LEVEL) &&
           VerifyField<uint8_t>(verifier, VT_WORLD) &&
           VerifyField<uint8_t>(verifier, VT_GAMEMODE) &&
           VerifyField<uint8_t>(verifier, VT_DIFFICULTY) &&
           VerifyField<uint8_t>(verifier, VT_REASON) &&
           VerifyField<int32_t>(verifier, VT_GOALSCORE) &&
           VerifyField<int32_t>(verifier, VT_TIMESCORE) &&
           VerifyField<int32_t>(verifier, VT_ENDSCORE) &&
           VerifyField<int32_t>(verifier, VT_RATING) &&
           VerifyField<int32_t>(verifier, VT_MODESPECIFCVALUE) &&
           VerifyField<Coordinates>(verifier, VT_ENDPOSITION) &&
           VerifyOffset(verifier, VT_HASH) &&
           verifier.Verify(hash()) &&
           verifier.EndTable();
  }
};

struct ScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Score::VT_ID, id, 0);
  }
  void add_goal(int32_t goal) {
    fbb_.AddElement<int32_t>(Score::VT_GOAL, goal, 0);
  }
  void add_maxGoal(int32_t maxGoal) {
    fbb_.AddElement<int32_t>(Score::VT_MAXGOAL, maxGoal, 0);
  }
  void add_time(int32_t time) {
    fbb_.AddElement<int32_t>(Score::VT_TIME, time, 0);
  }
  void add_rank(uint32_t rank) {
    fbb_.AddElement<uint32_t>(Score::VT_RANK, rank, 0);
  }
  void add_timestamp(int64_t timestamp) {
    fbb_.AddElement<int64_t>(Score::VT_TIMESTAMP, timestamp, 0);
  }
  void add_level(uint8_t level) {
    fbb_.AddElement<uint8_t>(Score::VT_LEVEL, level, 0);
  }
  void add_world(uint8_t world) {
    fbb_.AddElement<uint8_t>(Score::VT_WORLD, world, 0);
  }
  void add_gameMode(GameMode gameMode) {
    fbb_.AddElement<uint8_t>(Score::VT_GAMEMODE, static_cast<uint8_t>(gameMode), 0);
  }
  void add_difficulty(Difficulty difficulty) {
    fbb_.AddElement<uint8_t>(Score::VT_DIFFICULTY, static_cast<uint8_t>(difficulty), 0);
  }
  void add_reason(EndReason reason) {
    fbb_.AddElement<uint8_t>(Score::VT_REASON, static_cast<uint8_t>(reason), 0);
  }
  void add_goalScore(int32_t goalScore) {
    fbb_.AddElement<int32_t>(Score::VT_GOALSCORE, goalScore, 0);
  }
  void add_timeScore(int32_t timeScore) {
    fbb_.AddElement<int32_t>(Score::VT_TIMESCORE, timeScore, 0);
  }
  void add_endScore(int32_t endScore) {
    fbb_.AddElement<int32_t>(Score::VT_ENDSCORE, endScore, 0);
  }
  void add_rating(int32_t rating) {
    fbb_.AddElement<int32_t>(Score::VT_RATING, rating, 0);
  }
  void add_modeSpecifcValue(int32_t modeSpecifcValue) {
    fbb_.AddElement<int32_t>(Score::VT_MODESPECIFCVALUE, modeSpecifcValue, 0);
  }
  void add_endPosition(const Coordinates *endPosition) {
    fbb_.AddStruct(Score::VT_ENDPOSITION, endPosition);
  }
  void add_hash(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash) {
    fbb_.AddOffset(Score::VT_HASH, hash);
  }
  explicit ScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScoreBuilder &operator=(const ScoreBuilder &);
  flatbuffers::Offset<Score> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Score>(end);
    return o;
  }
};

inline flatbuffers::Offset<Score> CreateScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    int32_t goal = 0,
    int32_t maxGoal = 0,
    int32_t time = 0,
    uint32_t rank = 0,
    int64_t timestamp = 0,
    uint8_t level = 0,
    uint8_t world = 0,
    GameMode gameMode = CLIMB,
    Difficulty difficulty = VERY_EASY,
    EndReason reason = WIN,
    int32_t goalScore = 0,
    int32_t timeScore = 0,
    int32_t endScore = 0,
    int32_t rating = 0,
    int32_t modeSpecifcValue = 0,
    const Coordinates *endPosition = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash = 0) {
  ScoreBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_hash(hash);
  builder_.add_endPosition(endPosition);
  builder_.add_modeSpecifcValue(modeSpecifcValue);
  builder_.add_rating(rating);
  builder_.add_endScore(endScore);
  builder_.add_timeScore(timeScore);
  builder_.add_goalScore(goalScore);
  builder_.add_rank(rank);
  builder_.add_time(time);
  builder_.add_maxGoal(maxGoal);
  builder_.add_goal(goal);
  builder_.add_id(id);
  builder_.add_reason(reason);
  builder_.add_difficulty(difficulty);
  builder_.add_gameMode(gameMode);
  builder_.add_world(world);
  builder_.add_level(level);
  return builder_.Finish();
}

inline flatbuffers::Offset<Score> CreateScoreDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    int32_t goal = 0,
    int32_t maxGoal = 0,
    int32_t time = 0,
    uint32_t rank = 0,
    int64_t timestamp = 0,
    uint8_t level = 0,
    uint8_t world = 0,
    GameMode gameMode = CLIMB,
    Difficulty difficulty = VERY_EASY,
    EndReason reason = WIN,
    int32_t goalScore = 0,
    int32_t timeScore = 0,
    int32_t endScore = 0,
    int32_t rating = 0,
    int32_t modeSpecifcValue = 0,
    const Coordinates *endPosition = 0,
    const std::vector<uint8_t> *hash = nullptr) {
  return sisyfox::sisycol::CreateScore(
      _fbb,
      id,
      goal,
      maxGoal,
      time,
      rank,
      timestamp,
      level,
      world,
      gameMode,
      difficulty,
      reason,
      goalScore,
      timeScore,
      endScore,
      rating,
      modeSpecifcValue,
      endPosition,
      hash ? _fbb.CreateVector<uint8_t>(*hash) : 0);
}

struct User FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4,
    VT_TIMESTAMP = 6,
    VT_NAME = 8
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct UserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(User::VT_UID, uId, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(User::VT_TIMESTAMP, timestamp, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(User::VT_NAME, name);
  }
  explicit UserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UserBuilder &operator=(const UserBuilder &);
  flatbuffers::Offset<User> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<User>(end);
    return o;
  }
};

inline flatbuffers::Offset<User> CreateUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0,
    uint64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  UserBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_name(name);
  builder_.add_uId(uId);
  return builder_.Finish();
}

inline flatbuffers::Offset<User> CreateUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0,
    uint64_t timestamp = 0,
    const char *name = nullptr) {
  return sisyfox::sisycol::CreateUser(
      _fbb,
      uId,
      timestamp,
      name ? _fbb.CreateString(name) : 0);
}

namespace request {

struct Info FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct InfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit InfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InfoBuilder &operator=(const InfoBuilder &);
  flatbuffers::Offset<Info> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Info>(end);
    return o;
  }
};

inline flatbuffers::Offset<Info> CreateInfo(
    flatbuffers::FlatBufferBuilder &_fbb) {
  InfoBuilder builder_(_fbb);
  return builder_.Finish();
}

struct AddScore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_GOAL = 4,
    VT_MAXGOAL = 6,
    VT_TIME = 8,
    VT_REASON = 10,
    VT_LEVEL = 12,
    VT_WORLD = 14,
    VT_GAMEMODE = 16,
    VT_DIFFICULTY = 18,
    VT_MODESPECIFICVALUE = 20,
    VT_ENDPOSITION = 22,
    VT_HASH = 24
  };
  int32_t goal() const {
    return GetField<int32_t>(VT_GOAL, 0);
  }
  int32_t maxGoal() const {
    return GetField<int32_t>(VT_MAXGOAL, 0);
  }
  int32_t time() const {
    return GetField<int32_t>(VT_TIME, 0);
  }
  sisyfox::sisycol::EndReason reason() const {
    return static_cast<sisyfox::sisycol::EndReason>(GetField<uint8_t>(VT_REASON, 0));
  }
  uint8_t level() const {
    return GetField<uint8_t>(VT_LEVEL, 0);
  }
  uint8_t world() const {
    return GetField<uint8_t>(VT_WORLD, 0);
  }
  sisyfox::sisycol::GameMode gameMode() const {
    return static_cast<sisyfox::sisycol::GameMode>(GetField<uint8_t>(VT_GAMEMODE, 0));
  }
  sisyfox::sisycol::Difficulty difficulty() const {
    return static_cast<sisyfox::sisycol::Difficulty>(GetField<uint8_t>(VT_DIFFICULTY, 0));
  }
  int32_t modeSpecificValue() const {
    return GetField<int32_t>(VT_MODESPECIFICVALUE, 0);
  }
  const sisyfox::sisycol::Coordinates *endPosition() const {
    return GetStruct<const sisyfox::sisycol::Coordinates *>(VT_ENDPOSITION);
  }
  const flatbuffers::Vector<uint8_t> *hash() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HASH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_GOAL) &&
           VerifyField<int32_t>(verifier, VT_MAXGOAL) &&
           VerifyField<int32_t>(verifier, VT_TIME) &&
           VerifyField<uint8_t>(verifier, VT_REASON) &&
           VerifyField<uint8_t>(verifier, VT_LEVEL) &&
           VerifyField<uint8_t>(verifier, VT_WORLD) &&
           VerifyField<uint8_t>(verifier, VT_GAMEMODE) &&
           VerifyField<uint8_t>(verifier, VT_DIFFICULTY) &&
           VerifyField<int32_t>(verifier, VT_MODESPECIFICVALUE) &&
           VerifyField<sisyfox::sisycol::Coordinates>(verifier, VT_ENDPOSITION) &&
           VerifyOffset(verifier, VT_HASH) &&
           verifier.Verify(hash()) &&
           verifier.EndTable();
  }
};

struct AddScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_goal(int32_t goal) {
    fbb_.AddElement<int32_t>(AddScore::VT_GOAL, goal, 0);
  }
  void add_maxGoal(int32_t maxGoal) {
    fbb_.AddElement<int32_t>(AddScore::VT_MAXGOAL, maxGoal, 0);
  }
  void add_time(int32_t time) {
    fbb_.AddElement<int32_t>(AddScore::VT_TIME, time, 0);
  }
  void add_reason(sisyfox::sisycol::EndReason reason) {
    fbb_.AddElement<uint8_t>(AddScore::VT_REASON, static_cast<uint8_t>(reason), 0);
  }
  void add_level(uint8_t level) {
    fbb_.AddElement<uint8_t>(AddScore::VT_LEVEL, level, 0);
  }
  void add_world(uint8_t world) {
    fbb_.AddElement<uint8_t>(AddScore::VT_WORLD, world, 0);
  }
  void add_gameMode(sisyfox::sisycol::GameMode gameMode) {
    fbb_.AddElement<uint8_t>(AddScore::VT_GAMEMODE, static_cast<uint8_t>(gameMode), 0);
  }
  void add_difficulty(sisyfox::sisycol::Difficulty difficulty) {
    fbb_.AddElement<uint8_t>(AddScore::VT_DIFFICULTY, static_cast<uint8_t>(difficulty), 0);
  }
  void add_modeSpecificValue(int32_t modeSpecificValue) {
    fbb_.AddElement<int32_t>(AddScore::VT_MODESPECIFICVALUE, modeSpecificValue, 0);
  }
  void add_endPosition(const sisyfox::sisycol::Coordinates *endPosition) {
    fbb_.AddStruct(AddScore::VT_ENDPOSITION, endPosition);
  }
  void add_hash(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash) {
    fbb_.AddOffset(AddScore::VT_HASH, hash);
  }
  explicit AddScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddScoreBuilder &operator=(const AddScoreBuilder &);
  flatbuffers::Offset<AddScore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddScore>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddScore> CreateAddScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t goal = 0,
    int32_t maxGoal = 0,
    int32_t time = 0,
    sisyfox::sisycol::EndReason reason = sisyfox::sisycol::WIN,
    uint8_t level = 0,
    uint8_t world = 0,
    sisyfox::sisycol::GameMode gameMode = sisyfox::sisycol::CLIMB,
    sisyfox::sisycol::Difficulty difficulty = sisyfox::sisycol::VERY_EASY,
    int32_t modeSpecificValue = 0,
    const sisyfox::sisycol::Coordinates *endPosition = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash = 0) {
  AddScoreBuilder builder_(_fbb);
  builder_.add_hash(hash);
  builder_.add_endPosition(endPosition);
  builder_.add_modeSpecificValue(modeSpecificValue);
  builder_.add_time(time);
  builder_.add_maxGoal(maxGoal);
  builder_.add_goal(goal);
  builder_.add_difficulty(difficulty);
  builder_.add_gameMode(gameMode);
  builder_.add_world(world);
  builder_.add_level(level);
  builder_.add_reason(reason);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddScore> CreateAddScoreDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t goal = 0,
    int32_t maxGoal = 0,
    int32_t time = 0,
    sisyfox::sisycol::EndReason reason = sisyfox::sisycol::WIN,
    uint8_t level = 0,
    uint8_t world = 0,
    sisyfox::sisycol::GameMode gameMode = sisyfox::sisycol::CLIMB,
    sisyfox::sisycol::Difficulty difficulty = sisyfox::sisycol::VERY_EASY,
    int32_t modeSpecificValue = 0,
    const sisyfox::sisycol::Coordinates *endPosition = 0,
    const std::vector<uint8_t> *hash = nullptr) {
  return sisyfox::sisycol::request::CreateAddScore(
      _fbb,
      goal,
      maxGoal,
      time,
      reason,
      level,
      world,
      gameMode,
      difficulty,
      modeSpecificValue,
      endPosition,
      hash ? _fbb.CreateVector<uint8_t>(*hash) : 0);
}

struct GetScore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct GetScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(GetScore::VT_ID, id, 0);
  }
  explicit GetScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetScoreBuilder &operator=(const GetScoreBuilder &);
  flatbuffers::Offset<GetScore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetScore>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetScore> CreateGetScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0) {
  GetScoreBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct GetScoreRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RANGE = 4,
    VT_STARTID = 6
  };
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  uint32_t startId() const {
    return GetField<uint32_t>(VT_STARTID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           VerifyField<uint32_t>(verifier, VT_STARTID) &&
           verifier.EndTable();
  }
};

struct GetScoreRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetScoreRange::VT_RANGE, range, 0);
  }
  void add_startId(uint32_t startId) {
    fbb_.AddElement<uint32_t>(GetScoreRange::VT_STARTID, startId, 0);
  }
  explicit GetScoreRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetScoreRangeBuilder &operator=(const GetScoreRangeBuilder &);
  flatbuffers::Offset<GetScoreRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetScoreRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetScoreRange> CreateGetScoreRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t range = 0,
    uint32_t startId = 0) {
  GetScoreRangeBuilder builder_(_fbb);
  builder_.add_startId(startId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct AddLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STARTID = 4,
    VT_NAME = 6
  };
  uint32_t startId() const {
    return GetField<uint32_t>(VT_STARTID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_STARTID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct AddLocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_startId(uint32_t startId) {
    fbb_.AddElement<uint32_t>(AddLocation::VT_STARTID, startId, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AddLocation::VT_NAME, name);
  }
  explicit AddLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddLocationBuilder &operator=(const AddLocationBuilder &);
  flatbuffers::Offset<AddLocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddLocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddLocation> CreateAddLocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t startId = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  AddLocationBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_startId(startId);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddLocation> CreateAddLocationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t startId = 0,
    const char *name = nullptr) {
  return sisyfox::sisycol::request::CreateAddLocation(
      _fbb,
      startId,
      name ? _fbb.CreateString(name) : 0);
}

struct GetLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct GetLocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(GetLocation::VT_ID, id, 0);
  }
  explicit GetLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetLocationBuilder &operator=(const GetLocationBuilder &);
  flatbuffers::Offset<GetLocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetLocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetLocation> CreateGetLocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0) {
  GetLocationBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct SetLiveData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LIVEDATA = 4
  };
  const sisyfox::sisycol::LiveData *liveData() const {
    return GetStruct<const sisyfox::sisycol::LiveData *>(VT_LIVEDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<sisyfox::sisycol::LiveData>(verifier, VT_LIVEDATA) &&
           verifier.EndTable();
  }
};

struct SetLiveDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_liveData(const sisyfox::sisycol::LiveData *liveData) {
    fbb_.AddStruct(SetLiveData::VT_LIVEDATA, liveData);
  }
  explicit SetLiveDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetLiveDataBuilder &operator=(const SetLiveDataBuilder &);
  flatbuffers::Offset<SetLiveData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetLiveData>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetLiveData> CreateSetLiveData(
    flatbuffers::FlatBufferBuilder &_fbb,
    const sisyfox::sisycol::LiveData *liveData = 0) {
  SetLiveDataBuilder builder_(_fbb);
  builder_.add_liveData(liveData);
  return builder_.Finish();
}

struct GetLiveData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetLiveDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit GetLiveDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetLiveDataBuilder &operator=(const GetLiveDataBuilder &);
  flatbuffers::Offset<GetLiveData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetLiveData>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetLiveData> CreateGetLiveData(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GetLiveDataBuilder builder_(_fbb);
  return builder_.Finish();
}

struct AddUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct AddUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AddUser::VT_NAME, name);
  }
  explicit AddUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddUserBuilder &operator=(const AddUserBuilder &);
  flatbuffers::Offset<AddUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddUser> CreateAddUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  AddUserBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddUser> CreateAddUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return sisyfox::sisycol::request::CreateAddUser(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

struct GetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct GetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(GetUser::VT_UID, uId, 0);
  }
  explicit GetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetUserBuilder &operator=(const GetUserBuilder &);
  flatbuffers::Offset<GetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetUser> CreateGetUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0) {
  GetUserBuilder builder_(_fbb);
  builder_.add_uId(uId);
  return builder_.Finish();
}

struct SetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct SetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(SetUser::VT_UID, uId, 0);
  }
  explicit SetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetUserBuilder &operator=(const SetUserBuilder &);
  flatbuffers::Offset<SetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetUser> CreateSetUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0) {
  SetUserBuilder builder_(_fbb);
  builder_.add_uId(uId);
  return builder_.Finish();
}

struct GetCurrentUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetCurrentUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit GetCurrentUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetCurrentUserBuilder &operator=(const GetCurrentUserBuilder &);
  flatbuffers::Offset<GetCurrentUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetCurrentUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetCurrentUser> CreateGetCurrentUser(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GetCurrentUserBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GetUserRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STARTUID = 4,
    VT_RANGE = 6
  };
  uint32_t startUid() const {
    return GetField<uint32_t>(VT_STARTUID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_STARTUID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetUserRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_startUid(uint32_t startUid) {
    fbb_.AddElement<uint32_t>(GetUserRange::VT_STARTUID, startUid, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetUserRange::VT_RANGE, range, 0);
  }
  explicit GetUserRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetUserRangeBuilder &operator=(const GetUserRangeBuilder &);
  flatbuffers::Offset<GetUserRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetUserRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetUserRange> CreateGetUserRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t startUid = 0,
    uint8_t range = 0) {
  GetUserRangeBuilder builder_(_fbb);
  builder_.add_startUid(startUid);
  builder_.add_range(range);
  return builder_.Finish();
}

struct RemoveUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct RemoveUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(RemoveUser::VT_UID, uid, 0);
  }
  explicit RemoveUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveUserBuilder &operator=(const RemoveUserBuilder &);
  flatbuffers::Offset<RemoveUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveUser> CreateRemoveUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0) {
  RemoveUserBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct UnsetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct UnsetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit UnsetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UnsetUserBuilder &operator=(const UnsetUserBuilder &);
  flatbuffers::Offset<UnsetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UnsetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<UnsetUser> CreateUnsetUser(
    flatbuffers::FlatBufferBuilder &_fbb) {
  UnsetUserBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SetSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_VALUE = 6
  };
  sisyfox::sisycol::SettingType type() const {
    return static_cast<sisyfox::sisycol::SettingType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint32_t value() const {
    return GetField<uint32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct SetSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(sisyfox::sisycol::SettingType type) {
    fbb_.AddElement<uint8_t>(SetSetting::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_value(uint32_t value) {
    fbb_.AddElement<uint32_t>(SetSetting::VT_VALUE, value, 0);
  }
  explicit SetSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetSettingBuilder &operator=(const SetSettingBuilder &);
  flatbuffers::Offset<SetSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetSetting> CreateSetSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    sisyfox::sisycol::SettingType type = sisyfox::sisycol::GAME_LANGUAGE,
    uint32_t value = 0) {
  SetSettingBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_type(type);
  return builder_.Finish();
}

struct GetSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4
  };
  sisyfox::sisycol::SettingType type() const {
    return static_cast<sisyfox::sisycol::SettingType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct GetSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(sisyfox::sisycol::SettingType type) {
    fbb_.AddElement<uint8_t>(GetSetting::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit GetSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetSettingBuilder &operator=(const GetSettingBuilder &);
  flatbuffers::Offset<GetSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetSetting> CreateGetSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    sisyfox::sisycol::SettingType type = sisyfox::sisycol::GAME_LANGUAGE) {
  GetSettingBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

struct GetSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetSettingsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit GetSettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetSettingsBuilder &operator=(const GetSettingsBuilder &);
  flatbuffers::Offset<GetSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetSettings>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetSettings> CreateGetSettings(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GetSettingsBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Trigger FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4
  };
  sisyfox::sisycol::TriggerType type() const {
    return static_cast<sisyfox::sisycol::TriggerType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct TriggerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(sisyfox::sisycol::TriggerType type) {
    fbb_.AddElement<uint8_t>(Trigger::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit TriggerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TriggerBuilder &operator=(const TriggerBuilder &);
  flatbuffers::Offset<Trigger> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Trigger>(end);
    return o;
  }
};

inline flatbuffers::Offset<Trigger> CreateTrigger(
    flatbuffers::FlatBufferBuilder &_fbb,
    sisyfox::sisycol::TriggerType type = sisyfox::sisycol::NEW_ROUND) {
  TriggerBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

struct AddDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AddDmxDevice::VT_NAME, name);
  }
  explicit AddDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceBuilder &operator=(const AddDmxDeviceBuilder &);
  flatbuffers::Offset<AddDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDevice> CreateAddDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  AddDmxDeviceBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddDmxDevice> CreateAddDmxDeviceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return sisyfox::sisycol::request::CreateAddDmxDevice(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

struct RemoveDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDevice::VT_DEVICEID, deviceId, 0);
  }
  explicit RemoveDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceBuilder &operator=(const RemoveDmxDeviceBuilder &);
  flatbuffers::Offset<RemoveDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDevice> CreateRemoveDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0) {
  RemoveDmxDeviceBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNEL = 6,
    VT_NORM = 8,
    VT_TEST = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channel() const {
    return GetField<uint32_t>(VT_CHANNEL, 0);
  }
  uint8_t norm() const {
    return GetField<uint8_t>(VT_NORM, 0);
  }
  uint8_t test() const {
    return GetField<uint8_t>(VT_TEST, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNEL) &&
           VerifyField<uint8_t>(verifier, VT_NORM) &&
           VerifyField<uint8_t>(verifier, VT_TEST) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channel(uint32_t channel) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceChannel::VT_CHANNEL, channel, 0);
  }
  void add_norm(uint8_t norm) {
    fbb_.AddElement<uint8_t>(AddDmxDeviceChannel::VT_NORM, norm, 0);
  }
  void add_test(uint8_t test) {
    fbb_.AddElement<uint8_t>(AddDmxDeviceChannel::VT_TEST, test, 0);
  }
  explicit AddDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceChannelBuilder &operator=(const AddDmxDeviceChannelBuilder &);
  flatbuffers::Offset<AddDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDeviceChannel> CreateAddDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channel = 0,
    uint8_t norm = 0,
    uint8_t test = 0) {
  AddDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_deviceId(deviceId);
  builder_.add_test(test);
  builder_.add_norm(norm);
  return builder_.Finish();
}

struct RemoveDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceChannel::VT_CHANNELID, channelId, 0);
  }
  explicit RemoveDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceChannelBuilder &operator=(const RemoveDmxDeviceChannelBuilder &);
  flatbuffers::Offset<RemoveDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDeviceChannel> CreateRemoveDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0) {
  RemoveDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULETYPE = 8,
    VT_ON = 10,
    VT_OFF = 12,
    VT_START = 14,
    VT_STEP = 16
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  sisyfox::sisycol::DmxChannelRuleType ruleType() const {
    return static_cast<sisyfox::sisycol::DmxChannelRuleType>(GetField<int8_t>(VT_RULETYPE, 0));
  }
  int32_t on() const {
    return GetField<int32_t>(VT_ON, 0);
  }
  int32_t off() const {
    return GetField<int32_t>(VT_OFF, 0);
  }
  uint8_t start() const {
    return GetField<uint8_t>(VT_START, 0);
  }
  float step() const {
    return GetField<float>(VT_STEP, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<int8_t>(verifier, VT_RULETYPE) &&
           VerifyField<int32_t>(verifier, VT_ON) &&
           VerifyField<int32_t>(verifier, VT_OFF) &&
           VerifyField<uint8_t>(verifier, VT_START) &&
           VerifyField<float>(verifier, VT_STEP) &&
           verifier.EndTable();
  }
};

struct AddDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(AddDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleType(sisyfox::sisycol::DmxChannelRuleType ruleType) {
    fbb_.AddElement<int8_t>(AddDmxChannelRule::VT_RULETYPE, static_cast<int8_t>(ruleType), 0);
  }
  void add_on(int32_t on) {
    fbb_.AddElement<int32_t>(AddDmxChannelRule::VT_ON, on, 0);
  }
  void add_off(int32_t off) {
    fbb_.AddElement<int32_t>(AddDmxChannelRule::VT_OFF, off, 0);
  }
  void add_start(uint8_t start) {
    fbb_.AddElement<uint8_t>(AddDmxChannelRule::VT_START, start, 0);
  }
  void add_step(float step) {
    fbb_.AddElement<float>(AddDmxChannelRule::VT_STEP, step, 0.0f);
  }
  explicit AddDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxChannelRuleBuilder &operator=(const AddDmxChannelRuleBuilder &);
  flatbuffers::Offset<AddDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxChannelRule> CreateAddDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    sisyfox::sisycol::DmxChannelRuleType ruleType = sisyfox::sisycol::GOAL,
    int32_t on = 0,
    int32_t off = 0,
    uint8_t start = 0,
    float step = 0.0f) {
  AddDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_step(step);
  builder_.add_off(off);
  builder_.add_on(on);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  builder_.add_start(start);
  builder_.add_ruleType(ruleType);
  return builder_.Finish();
}

struct RemoveDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_RULEID, ruleId, 0);
  }
  explicit RemoveDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxChannelRuleBuilder &operator=(const RemoveDmxChannelRuleBuilder &);
  flatbuffers::Offset<RemoveDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxChannelRule> CreateRemoveDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0) {
  RemoveDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGTYPE = 6,
    VT_NAME = 8,
    VT_NORM = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  sisyfox::sisycol::DmxDeviceSettingType settingType() const {
    return static_cast<sisyfox::sisycol::DmxDeviceSettingType>(GetField<int8_t>(VT_SETTINGTYPE, 0));
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int8_t norm() const {
    return GetField<int8_t>(VT_NORM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<int8_t>(verifier, VT_SETTINGTYPE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int8_t>(verifier, VT_NORM) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingType(sisyfox::sisycol::DmxDeviceSettingType settingType) {
    fbb_.AddElement<int8_t>(AddDmxDeviceSetting::VT_SETTINGTYPE, static_cast<int8_t>(settingType), 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AddDmxDeviceSetting::VT_NAME, name);
  }
  void add_norm(int8_t norm) {
    fbb_.AddElement<int8_t>(AddDmxDeviceSetting::VT_NORM, norm, 0);
  }
  explicit AddDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceSettingBuilder &operator=(const AddDmxDeviceSettingBuilder &);
  flatbuffers::Offset<AddDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDeviceSetting> CreateAddDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    sisyfox::sisycol::DmxDeviceSettingType settingType = sisyfox::sisycol::RANGE,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int8_t norm = 0) {
  AddDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_deviceId(deviceId);
  builder_.add_norm(norm);
  builder_.add_settingType(settingType);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddDmxDeviceSetting> CreateAddDmxDeviceSettingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    sisyfox::sisycol::DmxDeviceSettingType settingType = sisyfox::sisycol::RANGE,
    const char *name = nullptr,
    int8_t norm = 0) {
  return sisyfox::sisycol::request::CreateAddDmxDeviceSetting(
      _fbb,
      deviceId,
      settingType,
      name ? _fbb.CreateString(name) : 0,
      norm);
}

struct RemoveDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceSetting::VT_SETTINGID, settingId, 0);
  }
  explicit RemoveDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceSettingBuilder &operator=(const RemoveDmxDeviceSettingBuilder &);
  flatbuffers::Offset<RemoveDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDeviceSetting> CreateRemoveDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0) {
  RemoveDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxRuleRangeSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_CHANNELID = 8,
    VT_RULEID = 10,
    VT_ON = 12,
    VT_OFF = 14,
    VT_START = 16,
    VT_STEP = 18
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  float on() const {
    return GetField<float>(VT_ON, 0.0f);
  }
  float off() const {
    return GetField<float>(VT_OFF, 0.0f);
  }
  float start() const {
    return GetField<float>(VT_START, 0.0f);
  }
  float step() const {
    return GetField<float>(VT_STEP, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           VerifyField<float>(verifier, VT_ON) &&
           VerifyField<float>(verifier, VT_OFF) &&
           VerifyField<float>(verifier, VT_START) &&
           VerifyField<float>(verifier, VT_STEP) &&
           verifier.EndTable();
  }
};

struct AddDmxRuleRangeSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleRangeSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleRangeSetting::VT_SETTINGID, settingId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleRangeSetting::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleRangeSetting::VT_RULEID, ruleId, 0);
  }
  void add_on(float on) {
    fbb_.AddElement<float>(AddDmxRuleRangeSetting::VT_ON, on, 0.0f);
  }
  void add_off(float off) {
    fbb_.AddElement<float>(AddDmxRuleRangeSetting::VT_OFF, off, 0.0f);
  }
  void add_start(float start) {
    fbb_.AddElement<float>(AddDmxRuleRangeSetting::VT_START, start, 0.0f);
  }
  void add_step(float step) {
    fbb_.AddElement<float>(AddDmxRuleRangeSetting::VT_STEP, step, 0.0f);
  }
  explicit AddDmxRuleRangeSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxRuleRangeSettingBuilder &operator=(const AddDmxRuleRangeSettingBuilder &);
  flatbuffers::Offset<AddDmxRuleRangeSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxRuleRangeSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxRuleRangeSetting> CreateAddDmxRuleRangeSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    float on = 0.0f,
    float off = 0.0f,
    float start = 0.0f,
    float step = 0.0f) {
  AddDmxRuleRangeSettingBuilder builder_(_fbb);
  builder_.add_step(step);
  builder_.add_start(start);
  builder_.add_off(off);
  builder_.add_on(on);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxRuleBoolSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_CHANNELID = 8,
    VT_RULEID = 10,
    VT_ON = 12,
    VT_OFF = 14,
    VT_START = 16,
    VT_STEP = 18
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  int32_t on() const {
    return GetField<int32_t>(VT_ON, 0);
  }
  int32_t off() const {
    return GetField<int32_t>(VT_OFF, 0);
  }
  uint8_t start() const {
    return GetField<uint8_t>(VT_START, 0);
  }
  float step() const {
    return GetField<float>(VT_STEP, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           VerifyField<int32_t>(verifier, VT_ON) &&
           VerifyField<int32_t>(verifier, VT_OFF) &&
           VerifyField<uint8_t>(verifier, VT_START) &&
           VerifyField<float>(verifier, VT_STEP) &&
           verifier.EndTable();
  }
};

struct AddDmxRuleBoolSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleBoolSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleBoolSetting::VT_SETTINGID, settingId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleBoolSetting::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleBoolSetting::VT_RULEID, ruleId, 0);
  }
  void add_on(int32_t on) {
    fbb_.AddElement<int32_t>(AddDmxRuleBoolSetting::VT_ON, on, 0);
  }
  void add_off(int32_t off) {
    fbb_.AddElement<int32_t>(AddDmxRuleBoolSetting::VT_OFF, off, 0);
  }
  void add_start(uint8_t start) {
    fbb_.AddElement<uint8_t>(AddDmxRuleBoolSetting::VT_START, start, 0);
  }
  void add_step(float step) {
    fbb_.AddElement<float>(AddDmxRuleBoolSetting::VT_STEP, step, 0.0f);
  }
  explicit AddDmxRuleBoolSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxRuleBoolSettingBuilder &operator=(const AddDmxRuleBoolSettingBuilder &);
  flatbuffers::Offset<AddDmxRuleBoolSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxRuleBoolSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxRuleBoolSetting> CreateAddDmxRuleBoolSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    int32_t on = 0,
    int32_t off = 0,
    uint8_t start = 0,
    float step = 0.0f) {
  AddDmxRuleBoolSettingBuilder builder_(_fbb);
  builder_.add_step(step);
  builder_.add_off(off);
  builder_.add_on(on);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_start(start);
  return builder_.Finish();
}

struct RemoveDmxRuleSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxRuleSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_RULESETTINGID, ruleSettingId, 0);
  }
  explicit RemoveDmxRuleSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxRuleSettingBuilder &operator=(const RemoveDmxRuleSettingBuilder &);
  flatbuffers::Offset<RemoveDmxRuleSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxRuleSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxRuleSetting> CreateRemoveDmxRuleSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0) {
  RemoveDmxRuleSettingBuilder builder_(_fbb);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct ChangeDmxDeviceSettingValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_VALUE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  int8_t value() const {
    return GetField<int8_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<int8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct ChangeDmxDeviceSettingValueBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(ChangeDmxDeviceSettingValue::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(ChangeDmxDeviceSettingValue::VT_SETTINGID, settingId, 0);
  }
  void add_value(int8_t value) {
    fbb_.AddElement<int8_t>(ChangeDmxDeviceSettingValue::VT_VALUE, value, 0);
  }
  explicit ChangeDmxDeviceSettingValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChangeDmxDeviceSettingValueBuilder &operator=(const ChangeDmxDeviceSettingValueBuilder &);
  flatbuffers::Offset<ChangeDmxDeviceSettingValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChangeDmxDeviceSettingValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChangeDmxDeviceSettingValue> CreateChangeDmxDeviceSettingValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    int8_t value = 0) {
  ChangeDmxDeviceSettingValueBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_value(value);
  return builder_.Finish();
}

struct SetDmxDeviceMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_MODE = 6,
    VT_VALUE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  sisyfox::sisycol::DmxDeviceMode mode() const {
    return static_cast<sisyfox::sisycol::DmxDeviceMode>(GetField<int8_t>(VT_MODE, 0));
  }
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct SetDmxDeviceModeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(SetDmxDeviceMode::VT_DEVICEID, deviceId, 0);
  }
  void add_mode(sisyfox::sisycol::DmxDeviceMode mode) {
    fbb_.AddElement<int8_t>(SetDmxDeviceMode::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(SetDmxDeviceMode::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit SetDmxDeviceModeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetDmxDeviceModeBuilder &operator=(const SetDmxDeviceModeBuilder &);
  flatbuffers::Offset<SetDmxDeviceMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetDmxDeviceMode>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetDmxDeviceMode> CreateSetDmxDeviceMode(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    sisyfox::sisycol::DmxDeviceMode mode = sisyfox::sisycol::TEST,
    bool value = false) {
  SetDmxDeviceModeBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  builder_.add_value(value);
  builder_.add_mode(mode);
  return builder_.Finish();
}

struct GetDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDevice::VT_DEVICEID, deviceId, 0);
  }
  explicit GetDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceBuilder &operator=(const GetDmxDeviceBuilder &);
  flatbuffers::Offset<GetDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDevice> CreateGetDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0) {
  GetDmxDeviceBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_RANGE = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceRange::VT_DEVICEID, deviceId, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxDeviceRange::VT_RANGE, range, 0);
  }
  explicit GetDmxDeviceRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceRangeBuilder &operator=(const GetDmxDeviceRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceRange> CreateGetDmxDeviceRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint8_t range = 0) {
  GetDmxDeviceRangeBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct GetDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannel::VT_CHANNELID, channelId, 0);
  }
  explicit GetDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceChannelBuilder &operator=(const GetDmxDeviceChannelBuilder &);
  flatbuffers::Offset<GetDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceChannel> CreateGetDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0) {
  GetDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceChannelRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RANGE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceChannelRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannelRange::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannelRange::VT_CHANNELID, channelId, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxDeviceChannelRange::VT_RANGE, range, 0);
  }
  explicit GetDmxDeviceChannelRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceChannelRangeBuilder &operator=(const GetDmxDeviceChannelRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceChannelRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceChannelRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceChannelRange> CreateGetDmxDeviceChannelRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint8_t range = 0) {
  GetDmxDeviceChannelRangeBuilder builder_(_fbb);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct GetDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           verifier.EndTable();
  }
};

struct GetDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_RULEID, ruleId, 0);
  }
  explicit GetDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxChannelRuleBuilder &operator=(const GetDmxChannelRuleBuilder &);
  flatbuffers::Offset<GetDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxChannelRule> CreateGetDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0) {
  GetDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxChannelRuleRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8,
    VT_RANGE = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxChannelRuleRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_RULEID, ruleId, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxChannelRuleRange::VT_RANGE, range, 0);
  }
  explicit GetDmxChannelRuleRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxChannelRuleRangeBuilder &operator=(const GetDmxChannelRuleRangeBuilder &);
  flatbuffers::Offset<GetDmxChannelRuleRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxChannelRuleRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxChannelRuleRange> CreateGetDmxChannelRuleRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    uint8_t range = 0) {
  GetDmxChannelRuleRangeBuilder builder_(_fbb);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct GetDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSetting::VT_SETTINGID, settingId, 0);
  }
  explicit GetDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceSettingBuilder &operator=(const GetDmxDeviceSettingBuilder &);
  flatbuffers::Offset<GetDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceSetting> CreateGetDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0) {
  GetDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceSettingRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RANGE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceSettingRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSettingRange::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSettingRange::VT_SETTINGID, settingId, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxDeviceSettingRange::VT_RANGE, range, 0);
  }
  explicit GetDmxDeviceSettingRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceSettingRangeBuilder &operator=(const GetDmxDeviceSettingRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceSettingRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceSettingRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceSettingRange> CreateGetDmxDeviceSettingRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint8_t range = 0) {
  GetDmxDeviceSettingRangeBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct GetDmxRuleSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8,
    VT_TYPE = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  sisyfox::sisycol::DmxDeviceSettingType type() const {
    return static_cast<sisyfox::sisycol::DmxDeviceSettingType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct GetDmxRuleSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSetting::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSetting::VT_RULESETTINGID, ruleSettingId, 0);
  }
  void add_type(sisyfox::sisycol::DmxDeviceSettingType type) {
    fbb_.AddElement<int8_t>(GetDmxRuleSetting::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit GetDmxRuleSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxRuleSettingBuilder &operator=(const GetDmxRuleSettingBuilder &);
  flatbuffers::Offset<GetDmxRuleSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxRuleSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxRuleSetting> CreateGetDmxRuleSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    sisyfox::sisycol::DmxDeviceSettingType type = sisyfox::sisycol::RANGE) {
  GetDmxRuleSettingBuilder builder_(_fbb);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_type(type);
  return builder_.Finish();
}

struct GetDmxRuleSettingRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8,
    VT_TYPE = 10,
    VT_RANGE = 12
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  sisyfox::sisycol::DmxDeviceSettingType type() const {
    return static_cast<sisyfox::sisycol::DmxDeviceSettingType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxRuleSettingRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSettingRange::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSettingRange::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSettingRange::VT_RULESETTINGID, ruleSettingId, 0);
  }
  void add_type(sisyfox::sisycol::DmxDeviceSettingType type) {
    fbb_.AddElement<int8_t>(GetDmxRuleSettingRange::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxRuleSettingRange::VT_RANGE, range, 0);
  }
  explicit GetDmxRuleSettingRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxRuleSettingRangeBuilder &operator=(const GetDmxRuleSettingRangeBuilder &);
  flatbuffers::Offset<GetDmxRuleSettingRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxRuleSettingRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxRuleSettingRange> CreateGetDmxRuleSettingRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    sisyfox::sisycol::DmxDeviceSettingType type = sisyfox::sisycol::RANGE,
    uint8_t range = 0) {
  GetDmxRuleSettingRangeBuilder builder_(_fbb);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  builder_.add_type(type);
  return builder_.Finish();
}

struct ResetDmxConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ResetDmxConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ResetDmxConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResetDmxConfigBuilder &operator=(const ResetDmxConfigBuilder &);
  flatbuffers::Offset<ResetDmxConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResetDmxConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResetDmxConfig> CreateResetDmxConfig(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ResetDmxConfigBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GetIdealTime FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetIdealTimeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit GetIdealTimeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetIdealTimeBuilder &operator=(const GetIdealTimeBuilder &);
  flatbuffers::Offset<GetIdealTime> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetIdealTime>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetIdealTime> CreateGetIdealTime(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GetIdealTimeBuilder builder_(_fbb);
  return builder_.Finish();
}

}  // namespace request

namespace response {

struct Error FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ERRORCODE = 4
  };
  sisyfox::sisycol::ErrorCode errorCode() const {
    return static_cast<sisyfox::sisycol::ErrorCode>(GetField<uint8_t>(VT_ERRORCODE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ERRORCODE) &&
           verifier.EndTable();
  }
};

struct ErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_errorCode(sisyfox::sisycol::ErrorCode errorCode) {
    fbb_.AddElement<uint8_t>(Error::VT_ERRORCODE, static_cast<uint8_t>(errorCode), 0);
  }
  explicit ErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ErrorBuilder &operator=(const ErrorBuilder &);
  flatbuffers::Offset<Error> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Error>(end);
    return o;
  }
};

inline flatbuffers::Offset<Error> CreateError(
    flatbuffers::FlatBufferBuilder &_fbb,
    sisyfox::sisycol::ErrorCode errorCode = sisyfox::sisycol::BAD_TRANSMISSION) {
  ErrorBuilder builder_(_fbb);
  builder_.add_errorCode(errorCode);
  return builder_.Finish();
}

struct Info FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SERVERVERSION = 4,
    VT_SCORECOUNT = 6,
    VT_USERCOUNT = 8,
    VT_DMXDEVICECOUNT = 10,
    VT_REGISTRYENTRYCOUNT = 12,
    VT_USERID = 14
  };
  uint32_t serverVersion() const {
    return GetField<uint32_t>(VT_SERVERVERSION, 4294967295);
  }
  uint32_t scoreCount() const {
    return GetField<uint32_t>(VT_SCORECOUNT, 4294967295);
  }
  uint32_t userCount() const {
    return GetField<uint32_t>(VT_USERCOUNT, 4294967295);
  }
  uint32_t dmxDeviceCount() const {
    return GetField<uint32_t>(VT_DMXDEVICECOUNT, 4294967295);
  }
  uint32_t registryEntryCount() const {
    return GetField<uint32_t>(VT_REGISTRYENTRYCOUNT, 4294967295);
  }
  uint32_t userId() const {
    return GetField<uint32_t>(VT_USERID, 4294967295);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SERVERVERSION) &&
           VerifyField<uint32_t>(verifier, VT_SCORECOUNT) &&
           VerifyField<uint32_t>(verifier, VT_USERCOUNT) &&
           VerifyField<uint32_t>(verifier, VT_DMXDEVICECOUNT) &&
           VerifyField<uint32_t>(verifier, VT_REGISTRYENTRYCOUNT) &&
           VerifyField<uint32_t>(verifier, VT_USERID) &&
           verifier.EndTable();
  }
};

struct InfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_serverVersion(uint32_t serverVersion) {
    fbb_.AddElement<uint32_t>(Info::VT_SERVERVERSION, serverVersion, 4294967295);
  }
  void add_scoreCount(uint32_t scoreCount) {
    fbb_.AddElement<uint32_t>(Info::VT_SCORECOUNT, scoreCount, 4294967295);
  }
  void add_userCount(uint32_t userCount) {
    fbb_.AddElement<uint32_t>(Info::VT_USERCOUNT, userCount, 4294967295);
  }
  void add_dmxDeviceCount(uint32_t dmxDeviceCount) {
    fbb_.AddElement<uint32_t>(Info::VT_DMXDEVICECOUNT, dmxDeviceCount, 4294967295);
  }
  void add_registryEntryCount(uint32_t registryEntryCount) {
    fbb_.AddElement<uint32_t>(Info::VT_REGISTRYENTRYCOUNT, registryEntryCount, 4294967295);
  }
  void add_userId(uint32_t userId) {
    fbb_.AddElement<uint32_t>(Info::VT_USERID, userId, 4294967295);
  }
  explicit InfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InfoBuilder &operator=(const InfoBuilder &);
  flatbuffers::Offset<Info> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Info>(end);
    return o;
  }
};

inline flatbuffers::Offset<Info> CreateInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t serverVersion = 4294967295,
    uint32_t scoreCount = 4294967295,
    uint32_t userCount = 4294967295,
    uint32_t dmxDeviceCount = 4294967295,
    uint32_t registryEntryCount = 4294967295,
    uint32_t userId = 4294967295) {
  InfoBuilder builder_(_fbb);
  builder_.add_userId(userId);
  builder_.add_registryEntryCount(registryEntryCount);
  builder_.add_dmxDeviceCount(dmxDeviceCount);
  builder_.add_userCount(userCount);
  builder_.add_scoreCount(scoreCount);
  builder_.add_serverVersion(serverVersion);
  return builder_.Finish();
}

struct AddScore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const sisyfox::sisycol::Score *data() const {
    return GetPointer<const sisyfox::sisycol::Score *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct AddScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<sisyfox::sisycol::Score> data) {
    fbb_.AddOffset(AddScore::VT_DATA, data);
  }
  explicit AddScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddScoreBuilder &operator=(const AddScoreBuilder &);
  flatbuffers::Offset<AddScore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddScore>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddScore> CreateAddScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<sisyfox::sisycol::Score> data = 0) {
  AddScoreBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

struct GetScore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const sisyfox::sisycol::Score *data() const {
    return GetPointer<const sisyfox::sisycol::Score *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct GetScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<sisyfox::sisycol::Score> data) {
    fbb_.AddOffset(GetScore::VT_DATA, data);
  }
  explicit GetScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetScoreBuilder &operator=(const GetScoreBuilder &);
  flatbuffers::Offset<GetScore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetScore>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetScore> CreateGetScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<sisyfox::sisycol::Score> data = 0) {
  GetScoreBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

struct GetScoreRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<sisyfox::sisycol::Score>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<sisyfox::sisycol::Score>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct GetScoreRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<sisyfox::sisycol::Score>>> data) {
    fbb_.AddOffset(GetScoreRange::VT_DATA, data);
  }
  explicit GetScoreRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetScoreRangeBuilder &operator=(const GetScoreRangeBuilder &);
  flatbuffers::Offset<GetScoreRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetScoreRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetScoreRange> CreateGetScoreRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<sisyfox::sisycol::Score>>> data = 0) {
  GetScoreRangeBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetScoreRange> CreateGetScoreRangeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<sisyfox::sisycol::Score>> *data = nullptr) {
  return sisyfox::sisycol::response::CreateGetScoreRange(
      _fbb,
      data ? _fbb.CreateVector<flatbuffers::Offset<sisyfox::sisycol::Score>>(*data) : 0);
}

struct GetLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct GetLocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(GetLocation::VT_NAME, name);
  }
  explicit GetLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetLocationBuilder &operator=(const GetLocationBuilder &);
  flatbuffers::Offset<GetLocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetLocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetLocation> CreateGetLocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  GetLocationBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetLocation> CreateGetLocationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return sisyfox::sisycol::response::CreateGetLocation(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

struct GetLiveData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LIVEDATA = 4
  };
  const sisyfox::sisycol::LiveData *liveData() const {
    return GetStruct<const sisyfox::sisycol::LiveData *>(VT_LIVEDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<sisyfox::sisycol::LiveData>(verifier, VT_LIVEDATA) &&
           verifier.EndTable();
  }
};

struct GetLiveDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_liveData(const sisyfox::sisycol::LiveData *liveData) {
    fbb_.AddStruct(GetLiveData::VT_LIVEDATA, liveData);
  }
  explicit GetLiveDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetLiveDataBuilder &operator=(const GetLiveDataBuilder &);
  flatbuffers::Offset<GetLiveData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetLiveData>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetLiveData> CreateGetLiveData(
    flatbuffers::FlatBufferBuilder &_fbb,
    const sisyfox::sisycol::LiveData *liveData = 0) {
  GetLiveDataBuilder builder_(_fbb);
  builder_.add_liveData(liveData);
  return builder_.Finish();
}

struct AddRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct AddRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(AddRule::VT_ID, id, 0);
  }
  explicit AddRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddRuleBuilder &operator=(const AddRuleBuilder &);
  flatbuffers::Offset<AddRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddRule> CreateAddRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0) {
  AddRuleBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct AddUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct AddUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(AddUser::VT_UID, uId, 0);
  }
  explicit AddUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddUserBuilder &operator=(const AddUserBuilder &);
  flatbuffers::Offset<AddUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddUser> CreateAddUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0) {
  AddUserBuilder builder_(_fbb);
  builder_.add_uId(uId);
  return builder_.Finish();
}

struct GetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const sisyfox::sisycol::User *data() const {
    return GetPointer<const sisyfox::sisycol::User *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
};

struct GetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<sisyfox::sisycol::User> data) {
    fbb_.AddOffset(GetUser::VT_DATA, data);
  }
  explicit GetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetUserBuilder &operator=(const GetUserBuilder &);
  flatbuffers::Offset<GetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetUser> CreateGetUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<sisyfox::sisycol::User> data = 0) {
  GetUserBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

struct SetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct SetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(SetUser::VT_UID, uId, 0);
  }
  explicit SetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetUserBuilder &operator=(const SetUserBuilder &);
  flatbuffers::Offset<SetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetUser> CreateSetUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0) {
  SetUserBuilder builder_(_fbb);
  builder_.add_uId(uId);
  return builder_.Finish();
}

struct UnsetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct UnsetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit UnsetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UnsetUserBuilder &operator=(const UnsetUserBuilder &);
  flatbuffers::Offset<UnsetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UnsetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<UnsetUser> CreateUnsetUser(
    flatbuffers::FlatBufferBuilder &_fbb) {
  UnsetUserBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GetCurrentUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4,
    VT_TIMESTAMP = 6,
    VT_NAME = 8
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct GetCurrentUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(GetCurrentUser::VT_UID, uId, 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(GetCurrentUser::VT_TIMESTAMP, timestamp, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(GetCurrentUser::VT_NAME, name);
  }
  explicit GetCurrentUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetCurrentUserBuilder &operator=(const GetCurrentUserBuilder &);
  flatbuffers::Offset<GetCurrentUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetCurrentUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetCurrentUser> CreateGetCurrentUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0,
    uint64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  GetCurrentUserBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_name(name);
  builder_.add_uId(uId);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetCurrentUser> CreateGetCurrentUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0,
    uint64_t timestamp = 0,
    const char *name = nullptr) {
  return sisyfox::sisycol::response::CreateGetCurrentUser(
      _fbb,
      uId,
      timestamp,
      name ? _fbb.CreateString(name) : 0);
}

struct GetUserRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USER = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<sisyfox::sisycol::User>> *user() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<sisyfox::sisycol::User>> *>(VT_USER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.Verify(user()) &&
           verifier.VerifyVectorOfTables(user()) &&
           verifier.EndTable();
  }
};

struct GetUserRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_user(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<sisyfox::sisycol::User>>> user) {
    fbb_.AddOffset(GetUserRange::VT_USER, user);
  }
  explicit GetUserRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetUserRangeBuilder &operator=(const GetUserRangeBuilder &);
  flatbuffers::Offset<GetUserRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetUserRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetUserRange> CreateGetUserRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<sisyfox::sisycol::User>>> user = 0) {
  GetUserRangeBuilder builder_(_fbb);
  builder_.add_user(user);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetUserRange> CreateGetUserRangeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<sisyfox::sisycol::User>> *user = nullptr) {
  return sisyfox::sisycol::response::CreateGetUserRange(
      _fbb,
      user ? _fbb.CreateVector<flatbuffers::Offset<sisyfox::sisycol::User>>(*user) : 0);
}

struct RemoveUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct RemoveUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(RemoveUser::VT_UID, uId, 0);
  }
  explicit RemoveUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveUserBuilder &operator=(const RemoveUserBuilder &);
  flatbuffers::Offset<RemoveUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveUser> CreateRemoveUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0) {
  RemoveUserBuilder builder_(_fbb);
  builder_.add_uId(uId);
  return builder_.Finish();
}

struct SetSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SETTING = 4
  };
  const sisyfox::sisycol::Setting *setting() const {
    return GetStruct<const sisyfox::sisycol::Setting *>(VT_SETTING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<sisyfox::sisycol::Setting>(verifier, VT_SETTING) &&
           verifier.EndTable();
  }
};

struct SetSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_setting(const sisyfox::sisycol::Setting *setting) {
    fbb_.AddStruct(SetSetting::VT_SETTING, setting);
  }
  explicit SetSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetSettingBuilder &operator=(const SetSettingBuilder &);
  flatbuffers::Offset<SetSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetSetting> CreateSetSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    const sisyfox::sisycol::Setting *setting = 0) {
  SetSettingBuilder builder_(_fbb);
  builder_.add_setting(setting);
  return builder_.Finish();
}

struct GetSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALUE = 4
  };
  uint32_t value() const {
    return GetField<uint32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct GetSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(uint32_t value) {
    fbb_.AddElement<uint32_t>(GetSetting::VT_VALUE, value, 0);
  }
  explicit GetSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetSettingBuilder &operator=(const GetSettingBuilder &);
  flatbuffers::Offset<GetSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetSetting> CreateGetSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t value = 0) {
  GetSettingBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

struct GetSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SETTINGS = 4
  };
  const flatbuffers::Vector<const sisyfox::sisycol::Setting *> *settings() const {
    return GetPointer<const flatbuffers::Vector<const sisyfox::sisycol::Setting *> *>(VT_SETTINGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SETTINGS) &&
           verifier.Verify(settings()) &&
           verifier.EndTable();
  }
};

struct GetSettingsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_settings(flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::Setting *>> settings) {
    fbb_.AddOffset(GetSettings::VT_SETTINGS, settings);
  }
  explicit GetSettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetSettingsBuilder &operator=(const GetSettingsBuilder &);
  flatbuffers::Offset<GetSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetSettings>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetSettings> CreateGetSettings(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::Setting *>> settings = 0) {
  GetSettingsBuilder builder_(_fbb);
  builder_.add_settings(settings);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetSettings> CreateGetSettingsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<const sisyfox::sisycol::Setting *> *settings = nullptr) {
  return sisyfox::sisycol::response::CreateGetSettings(
      _fbb,
      settings ? _fbb.CreateVector<const sisyfox::sisycol::Setting *>(*settings) : 0);
}

struct Trigger FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4
  };
  sisyfox::sisycol::TriggerType type() const {
    return static_cast<sisyfox::sisycol::TriggerType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct TriggerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(sisyfox::sisycol::TriggerType type) {
    fbb_.AddElement<uint8_t>(Trigger::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit TriggerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TriggerBuilder &operator=(const TriggerBuilder &);
  flatbuffers::Offset<Trigger> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Trigger>(end);
    return o;
  }
};

inline flatbuffers::Offset<Trigger> CreateTrigger(
    flatbuffers::FlatBufferBuilder &_fbb,
    sisyfox::sisycol::TriggerType type = sisyfox::sisycol::NEW_ROUND) {
  TriggerBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

struct AddDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxDevice::VT_DEVICEID, deviceId, 0);
  }
  explicit AddDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceBuilder &operator=(const AddDmxDeviceBuilder &);
  flatbuffers::Offset<AddDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDevice> CreateAddDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0) {
  AddDmxDeviceBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct RemoveDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDevice::VT_DEVICEID, deviceId, 0);
  }
  explicit RemoveDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceBuilder &operator=(const RemoveDmxDeviceBuilder &);
  flatbuffers::Offset<RemoveDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDevice> CreateRemoveDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0) {
  RemoveDmxDeviceBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceChannel::VT_CHANNELID, channelId, 0);
  }
  explicit AddDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceChannelBuilder &operator=(const AddDmxDeviceChannelBuilder &);
  flatbuffers::Offset<AddDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDeviceChannel> CreateAddDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0) {
  AddDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct RemoveDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceChannel::VT_CHANNELID, channelId, 0);
  }
  explicit RemoveDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceChannelBuilder &operator=(const RemoveDmxDeviceChannelBuilder &);
  flatbuffers::Offset<RemoveDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDeviceChannel> CreateRemoveDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0) {
  RemoveDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           verifier.EndTable();
  }
};

struct AddDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(AddDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(AddDmxChannelRule::VT_RULEID, ruleId, 0);
  }
  explicit AddDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxChannelRuleBuilder &operator=(const AddDmxChannelRuleBuilder &);
  flatbuffers::Offset<AddDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxChannelRule> CreateAddDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0) {
  AddDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct RemoveDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_RULEID, ruleId, 0);
  }
  explicit RemoveDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxChannelRuleBuilder &operator=(const RemoveDmxChannelRuleBuilder &);
  flatbuffers::Offset<RemoveDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxChannelRule> CreateRemoveDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0) {
  RemoveDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceSetting::VT_SETTINGID, settingId, 0);
  }
  explicit AddDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceSettingBuilder &operator=(const AddDmxDeviceSettingBuilder &);
  flatbuffers::Offset<AddDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDeviceSetting> CreateAddDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0) {
  AddDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct RemoveDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceSetting::VT_SETTINGID, settingId, 0);
  }
  explicit RemoveDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceSettingBuilder &operator=(const RemoveDmxDeviceSettingBuilder &);
  flatbuffers::Offset<RemoveDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDeviceSetting> CreateRemoveDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0) {
  RemoveDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxRuleSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           verifier.EndTable();
  }
};

struct AddDmxRuleSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleSetting::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleSetting::VT_RULESETTINGID, ruleSettingId, 0);
  }
  explicit AddDmxRuleSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxRuleSettingBuilder &operator=(const AddDmxRuleSettingBuilder &);
  flatbuffers::Offset<AddDmxRuleSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxRuleSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxRuleSetting> CreateAddDmxRuleSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0) {
  AddDmxRuleSettingBuilder builder_(_fbb);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct RemoveDmxRuleSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxRuleSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_RULESETTINGID, ruleSettingId, 0);
  }
  explicit RemoveDmxRuleSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxRuleSettingBuilder &operator=(const RemoveDmxRuleSettingBuilder &);
  flatbuffers::Offset<RemoveDmxRuleSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxRuleSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxRuleSetting> CreateRemoveDmxRuleSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0) {
  RemoveDmxRuleSettingBuilder builder_(_fbb);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct ChangeDmxDeviceSettingValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_VALUE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  int8_t value() const {
    return GetField<int8_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<int8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct ChangeDmxDeviceSettingValueBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(ChangeDmxDeviceSettingValue::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(ChangeDmxDeviceSettingValue::VT_SETTINGID, settingId, 0);
  }
  void add_value(int8_t value) {
    fbb_.AddElement<int8_t>(ChangeDmxDeviceSettingValue::VT_VALUE, value, 0);
  }
  explicit ChangeDmxDeviceSettingValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChangeDmxDeviceSettingValueBuilder &operator=(const ChangeDmxDeviceSettingValueBuilder &);
  flatbuffers::Offset<ChangeDmxDeviceSettingValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChangeDmxDeviceSettingValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChangeDmxDeviceSettingValue> CreateChangeDmxDeviceSettingValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    int8_t value = 0) {
  ChangeDmxDeviceSettingValueBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_value(value);
  return builder_.Finish();
}

struct SetDmxDeviceMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_MODE = 6,
    VT_VALUE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  sisyfox::sisycol::DmxDeviceMode mode() const {
    return static_cast<sisyfox::sisycol::DmxDeviceMode>(GetField<int8_t>(VT_MODE, 0));
  }
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct SetDmxDeviceModeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(SetDmxDeviceMode::VT_DEVICEID, deviceId, 0);
  }
  void add_mode(sisyfox::sisycol::DmxDeviceMode mode) {
    fbb_.AddElement<int8_t>(SetDmxDeviceMode::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(SetDmxDeviceMode::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit SetDmxDeviceModeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetDmxDeviceModeBuilder &operator=(const SetDmxDeviceModeBuilder &);
  flatbuffers::Offset<SetDmxDeviceMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetDmxDeviceMode>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetDmxDeviceMode> CreateSetDmxDeviceMode(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    sisyfox::sisycol::DmxDeviceMode mode = sisyfox::sisycol::TEST,
    bool value = false) {
  SetDmxDeviceModeBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  builder_.add_value(value);
  builder_.add_mode(mode);
  return builder_.Finish();
}

struct DmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_DISABLED = 6,
    VT_TESTMODE = 8,
    VT_CHANNELCOUNT = 10,
    VT_SETTINGCOUNT = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool disabled() const {
    return GetField<uint8_t>(VT_DISABLED, 0) != 0;
  }
  bool testMode() const {
    return GetField<uint8_t>(VT_TESTMODE, 0) != 0;
  }
  uint32_t channelCount() const {
    return GetField<uint32_t>(VT_CHANNELCOUNT, 0);
  }
  uint32_t settingCount() const {
    return GetField<uint32_t>(VT_SETTINGCOUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint8_t>(verifier, VT_DISABLED) &&
           VerifyField<uint8_t>(verifier, VT_TESTMODE) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELCOUNT) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGCOUNT) &&
           verifier.EndTable();
  }
};

struct DmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DmxDevice::VT_NAME, name);
  }
  void add_disabled(bool disabled) {
    fbb_.AddElement<uint8_t>(DmxDevice::VT_DISABLED, static_cast<uint8_t>(disabled), 0);
  }
  void add_testMode(bool testMode) {
    fbb_.AddElement<uint8_t>(DmxDevice::VT_TESTMODE, static_cast<uint8_t>(testMode), 0);
  }
  void add_channelCount(uint32_t channelCount) {
    fbb_.AddElement<uint32_t>(DmxDevice::VT_CHANNELCOUNT, channelCount, 0);
  }
  void add_settingCount(uint32_t settingCount) {
    fbb_.AddElement<uint32_t>(DmxDevice::VT_SETTINGCOUNT, settingCount, 0);
  }
  explicit DmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DmxDeviceBuilder &operator=(const DmxDeviceBuilder &);
  flatbuffers::Offset<DmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<DmxDevice> CreateDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    bool disabled = false,
    bool testMode = false,
    uint32_t channelCount = 0,
    uint32_t settingCount = 0) {
  DmxDeviceBuilder builder_(_fbb);
  builder_.add_settingCount(settingCount);
  builder_.add_channelCount(channelCount);
  builder_.add_name(name);
  builder_.add_testMode(testMode);
  builder_.add_disabled(disabled);
  return builder_.Finish();
}

inline flatbuffers::Offset<DmxDevice> CreateDmxDeviceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    bool disabled = false,
    bool testMode = false,
    uint32_t channelCount = 0,
    uint32_t settingCount = 0) {
  return sisyfox::sisycol::response::CreateDmxDevice(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      disabled,
      testMode,
      channelCount,
      settingCount);
}

struct GetDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_DEVICE = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  const DmxDevice *device() const {
    return GetPointer<const DmxDevice *>(VT_DEVICE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyOffset(verifier, VT_DEVICE) &&
           verifier.VerifyTable(device()) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDevice::VT_DEVICEID, deviceId, 0);
  }
  void add_device(flatbuffers::Offset<DmxDevice> device) {
    fbb_.AddOffset(GetDmxDevice::VT_DEVICE, device);
  }
  explicit GetDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceBuilder &operator=(const GetDmxDeviceBuilder &);
  flatbuffers::Offset<GetDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDevice> CreateGetDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    flatbuffers::Offset<DmxDevice> device = 0) {
  GetDmxDeviceBuilder builder_(_fbb);
  builder_.add_device(device);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_DEVICE = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DmxDevice>> *device() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DmxDevice>> *>(VT_DEVICE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyOffset(verifier, VT_DEVICE) &&
           verifier.Verify(device()) &&
           verifier.VerifyVectorOfTables(device()) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceRange::VT_DEVICEID, deviceId, 0);
  }
  void add_device(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DmxDevice>>> device) {
    fbb_.AddOffset(GetDmxDeviceRange::VT_DEVICE, device);
  }
  explicit GetDmxDeviceRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceRangeBuilder &operator=(const GetDmxDeviceRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceRange> CreateGetDmxDeviceRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DmxDevice>>> device = 0) {
  GetDmxDeviceRangeBuilder builder_(_fbb);
  builder_.add_device(device);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetDmxDeviceRange> CreateGetDmxDeviceRangeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    const std::vector<flatbuffers::Offset<DmxDevice>> *device = nullptr) {
  return sisyfox::sisycol::response::CreateGetDmxDeviceRange(
      _fbb,
      deviceId,
      device ? _fbb.CreateVector<flatbuffers::Offset<DmxDevice>>(*device) : 0);
}

struct GetDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_CHANNEL = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  const sisyfox::sisycol::DmxDeviceChannel *channel() const {
    return GetStruct<const sisyfox::sisycol::DmxDeviceChannel *>(VT_CHANNEL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<sisyfox::sisycol::DmxDeviceChannel>(verifier, VT_CHANNEL) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannel::VT_CHANNELID, channelId, 0);
  }
  void add_channel(const sisyfox::sisycol::DmxDeviceChannel *channel) {
    fbb_.AddStruct(GetDmxDeviceChannel::VT_CHANNEL, channel);
  }
  explicit GetDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceChannelBuilder &operator=(const GetDmxDeviceChannelBuilder &);
  flatbuffers::Offset<GetDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceChannel> CreateGetDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    const sisyfox::sisycol::DmxDeviceChannel *channel = 0) {
  GetDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceChannelRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_CHANNEL = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  const flatbuffers::Vector<const sisyfox::sisycol::DmxDeviceChannel *> *channel() const {
    return GetPointer<const flatbuffers::Vector<const sisyfox::sisycol::DmxDeviceChannel *> *>(VT_CHANNEL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyOffset(verifier, VT_CHANNEL) &&
           verifier.Verify(channel()) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceChannelRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannelRange::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannelRange::VT_CHANNELID, channelId, 0);
  }
  void add_channel(flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::DmxDeviceChannel *>> channel) {
    fbb_.AddOffset(GetDmxDeviceChannelRange::VT_CHANNEL, channel);
  }
  explicit GetDmxDeviceChannelRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceChannelRangeBuilder &operator=(const GetDmxDeviceChannelRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceChannelRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceChannelRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceChannelRange> CreateGetDmxDeviceChannelRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::DmxDeviceChannel *>> channel = 0) {
  GetDmxDeviceChannelRangeBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetDmxDeviceChannelRange> CreateGetDmxDeviceChannelRangeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    const std::vector<const sisyfox::sisycol::DmxDeviceChannel *> *channel = nullptr) {
  return sisyfox::sisycol::response::CreateGetDmxDeviceChannelRange(
      _fbb,
      deviceId,
      channelId,
      channel ? _fbb.CreateVector<const sisyfox::sisycol::DmxDeviceChannel *>(*channel) : 0);
}

struct GetDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8,
    VT_RULE = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  const sisyfox::sisycol::DmxChannelRule *rule() const {
    return GetStruct<const sisyfox::sisycol::DmxChannelRule *>(VT_RULE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           VerifyField<sisyfox::sisycol::DmxChannelRule>(verifier, VT_RULE) &&
           verifier.EndTable();
  }
};

struct GetDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_RULEID, ruleId, 0);
  }
  void add_rule(const sisyfox::sisycol::DmxChannelRule *rule) {
    fbb_.AddStruct(GetDmxChannelRule::VT_RULE, rule);
  }
  explicit GetDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxChannelRuleBuilder &operator=(const GetDmxChannelRuleBuilder &);
  flatbuffers::Offset<GetDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxChannelRule> CreateGetDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    const sisyfox::sisycol::DmxChannelRule *rule = 0) {
  GetDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_rule(rule);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxChannelRuleRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8,
    VT_RULE = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  const flatbuffers::Vector<const sisyfox::sisycol::DmxChannelRule *> *rule() const {
    return GetPointer<const flatbuffers::Vector<const sisyfox::sisycol::DmxChannelRule *> *>(VT_RULE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           VerifyOffset(verifier, VT_RULE) &&
           verifier.Verify(rule()) &&
           verifier.EndTable();
  }
};

struct GetDmxChannelRuleRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_RULEID, ruleId, 0);
  }
  void add_rule(flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::DmxChannelRule *>> rule) {
    fbb_.AddOffset(GetDmxChannelRuleRange::VT_RULE, rule);
  }
  explicit GetDmxChannelRuleRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxChannelRuleRangeBuilder &operator=(const GetDmxChannelRuleRangeBuilder &);
  flatbuffers::Offset<GetDmxChannelRuleRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxChannelRuleRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxChannelRuleRange> CreateGetDmxChannelRuleRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::DmxChannelRule *>> rule = 0) {
  GetDmxChannelRuleRangeBuilder builder_(_fbb);
  builder_.add_rule(rule);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetDmxChannelRuleRange> CreateGetDmxChannelRuleRangeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    const std::vector<const sisyfox::sisycol::DmxChannelRule *> *rule = nullptr) {
  return sisyfox::sisycol::response::CreateGetDmxChannelRuleRange(
      _fbb,
      deviceId,
      channelId,
      ruleId,
      rule ? _fbb.CreateVector<const sisyfox::sisycol::DmxChannelRule *>(*rule) : 0);
}

struct DmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_STORAGEREF = 6,
    VT_RULESETTINGCOUNT = 8,
    VT_NORM = 10,
    VT_VALUE = 12,
    VT_TYPE = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int32_t storageRef() const {
    return GetField<int32_t>(VT_STORAGEREF, 0);
  }
  uint32_t ruleSettingCount() const {
    return GetField<uint32_t>(VT_RULESETTINGCOUNT, 0);
  }
  int8_t norm() const {
    return GetField<int8_t>(VT_NORM, 0);
  }
  int8_t value() const {
    return GetField<int8_t>(VT_VALUE, 0);
  }
  sisyfox::sisycol::DmxDeviceSettingType type() const {
    return static_cast<sisyfox::sisycol::DmxDeviceSettingType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_STORAGEREF) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGCOUNT) &&
           VerifyField<int8_t>(verifier, VT_NORM) &&
           VerifyField<int8_t>(verifier, VT_VALUE) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct DmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(DmxDeviceSetting::VT_NAME, name);
  }
  void add_storageRef(int32_t storageRef) {
    fbb_.AddElement<int32_t>(DmxDeviceSetting::VT_STORAGEREF, storageRef, 0);
  }
  void add_ruleSettingCount(uint32_t ruleSettingCount) {
    fbb_.AddElement<uint32_t>(DmxDeviceSetting::VT_RULESETTINGCOUNT, ruleSettingCount, 0);
  }
  void add_norm(int8_t norm) {
    fbb_.AddElement<int8_t>(DmxDeviceSetting::VT_NORM, norm, 0);
  }
  void add_value(int8_t value) {
    fbb_.AddElement<int8_t>(DmxDeviceSetting::VT_VALUE, value, 0);
  }
  void add_type(sisyfox::sisycol::DmxDeviceSettingType type) {
    fbb_.AddElement<int8_t>(DmxDeviceSetting::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit DmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DmxDeviceSettingBuilder &operator=(const DmxDeviceSettingBuilder &);
  flatbuffers::Offset<DmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<DmxDeviceSetting> CreateDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t storageRef = 0,
    uint32_t ruleSettingCount = 0,
    int8_t norm = 0,
    int8_t value = 0,
    sisyfox::sisycol::DmxDeviceSettingType type = sisyfox::sisycol::RANGE) {
  DmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_ruleSettingCount(ruleSettingCount);
  builder_.add_storageRef(storageRef);
  builder_.add_name(name);
  builder_.add_type(type);
  builder_.add_value(value);
  builder_.add_norm(norm);
  return builder_.Finish();
}

inline flatbuffers::Offset<DmxDeviceSetting> CreateDmxDeviceSettingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t storageRef = 0,
    uint32_t ruleSettingCount = 0,
    int8_t norm = 0,
    int8_t value = 0,
    sisyfox::sisycol::DmxDeviceSettingType type = sisyfox::sisycol::RANGE) {
  return sisyfox::sisycol::response::CreateDmxDeviceSetting(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      storageRef,
      ruleSettingCount,
      norm,
      value,
      type);
}

struct GetDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_SETTING = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  const DmxDeviceSetting *setting() const {
    return GetPointer<const DmxDeviceSetting *>(VT_SETTING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyOffset(verifier, VT_SETTING) &&
           verifier.VerifyTable(setting()) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSetting::VT_SETTINGID, settingId, 0);
  }
  void add_setting(flatbuffers::Offset<DmxDeviceSetting> setting) {
    fbb_.AddOffset(GetDmxDeviceSetting::VT_SETTING, setting);
  }
  explicit GetDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceSettingBuilder &operator=(const GetDmxDeviceSettingBuilder &);
  flatbuffers::Offset<GetDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceSetting> CreateGetDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    flatbuffers::Offset<DmxDeviceSetting> setting = 0) {
  GetDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_setting(setting);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceSettingRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_SETTING = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<DmxDeviceSetting>> *setting() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DmxDeviceSetting>> *>(VT_SETTING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyOffset(verifier, VT_SETTING) &&
           verifier.Verify(setting()) &&
           verifier.VerifyVectorOfTables(setting()) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceSettingRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSettingRange::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSettingRange::VT_SETTINGID, settingId, 0);
  }
  void add_setting(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DmxDeviceSetting>>> setting) {
    fbb_.AddOffset(GetDmxDeviceSettingRange::VT_SETTING, setting);
  }
  explicit GetDmxDeviceSettingRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceSettingRangeBuilder &operator=(const GetDmxDeviceSettingRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceSettingRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceSettingRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceSettingRange> CreateGetDmxDeviceSettingRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DmxDeviceSetting>>> setting = 0) {
  GetDmxDeviceSettingRangeBuilder builder_(_fbb);
  builder_.add_setting(setting);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetDmxDeviceSettingRange> CreateGetDmxDeviceSettingRangeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    const std::vector<flatbuffers::Offset<DmxDeviceSetting>> *setting = nullptr) {
  return sisyfox::sisycol::response::CreateGetDmxDeviceSettingRange(
      _fbb,
      deviceId,
      settingId,
      setting ? _fbb.CreateVector<flatbuffers::Offset<DmxDeviceSetting>>(*setting) : 0);
}

struct GetDmxRuleRangeSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8,
    VT_RULESETTING = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  const sisyfox::sisycol::DmxRuleRangeSetting *ruleSetting() const {
    return GetStruct<const sisyfox::sisycol::DmxRuleRangeSetting *>(VT_RULESETTING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           VerifyField<sisyfox::sisycol::DmxRuleRangeSetting>(verifier, VT_RULESETTING) &&
           verifier.EndTable();
  }
};

struct GetDmxRuleRangeSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleRangeSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleRangeSetting::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleRangeSetting::VT_RULESETTINGID, ruleSettingId, 0);
  }
  void add_ruleSetting(const sisyfox::sisycol::DmxRuleRangeSetting *ruleSetting) {
    fbb_.AddStruct(GetDmxRuleRangeSetting::VT_RULESETTING, ruleSetting);
  }
  explicit GetDmxRuleRangeSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxRuleRangeSettingBuilder &operator=(const GetDmxRuleRangeSettingBuilder &);
  flatbuffers::Offset<GetDmxRuleRangeSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxRuleRangeSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxRuleRangeSetting> CreateGetDmxRuleRangeSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    const sisyfox::sisycol::DmxRuleRangeSetting *ruleSetting = 0) {
  GetDmxRuleRangeSettingBuilder builder_(_fbb);
  builder_.add_ruleSetting(ruleSetting);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxRuleRangeSettingRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8,
    VT_RULESETTING = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  const flatbuffers::Vector<const sisyfox::sisycol::DmxRuleRangeSetting *> *ruleSetting() const {
    return GetPointer<const flatbuffers::Vector<const sisyfox::sisycol::DmxRuleRangeSetting *> *>(VT_RULESETTING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           VerifyOffset(verifier, VT_RULESETTING) &&
           verifier.Verify(ruleSetting()) &&
           verifier.EndTable();
  }
};

struct GetDmxRuleRangeSettingRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleRangeSettingRange::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleRangeSettingRange::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleRangeSettingRange::VT_RULESETTINGID, ruleSettingId, 0);
  }
  void add_ruleSetting(flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::DmxRuleRangeSetting *>> ruleSetting) {
    fbb_.AddOffset(GetDmxRuleRangeSettingRange::VT_RULESETTING, ruleSetting);
  }
  explicit GetDmxRuleRangeSettingRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxRuleRangeSettingRangeBuilder &operator=(const GetDmxRuleRangeSettingRangeBuilder &);
  flatbuffers::Offset<GetDmxRuleRangeSettingRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxRuleRangeSettingRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxRuleRangeSettingRange> CreateGetDmxRuleRangeSettingRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::DmxRuleRangeSetting *>> ruleSetting = 0) {
  GetDmxRuleRangeSettingRangeBuilder builder_(_fbb);
  builder_.add_ruleSetting(ruleSetting);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetDmxRuleRangeSettingRange> CreateGetDmxRuleRangeSettingRangeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    const std::vector<const sisyfox::sisycol::DmxRuleRangeSetting *> *ruleSetting = nullptr) {
  return sisyfox::sisycol::response::CreateGetDmxRuleRangeSettingRange(
      _fbb,
      deviceId,
      settingId,
      ruleSettingId,
      ruleSetting ? _fbb.CreateVector<const sisyfox::sisycol::DmxRuleRangeSetting *>(*ruleSetting) : 0);
}

struct GetDmxRuleBoolSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8,
    VT_RULESETTING = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  const sisyfox::sisycol::DmxRuleBoolSetting *ruleSetting() const {
    return GetStruct<const sisyfox::sisycol::DmxRuleBoolSetting *>(VT_RULESETTING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           VerifyField<sisyfox::sisycol::DmxRuleBoolSetting>(verifier, VT_RULESETTING) &&
           verifier.EndTable();
  }
};

struct GetDmxRuleBoolSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleBoolSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleBoolSetting::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleBoolSetting::VT_RULESETTINGID, ruleSettingId, 0);
  }
  void add_ruleSetting(const sisyfox::sisycol::DmxRuleBoolSetting *ruleSetting) {
    fbb_.AddStruct(GetDmxRuleBoolSetting::VT_RULESETTING, ruleSetting);
  }
  explicit GetDmxRuleBoolSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxRuleBoolSettingBuilder &operator=(const GetDmxRuleBoolSettingBuilder &);
  flatbuffers::Offset<GetDmxRuleBoolSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxRuleBoolSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxRuleBoolSetting> CreateGetDmxRuleBoolSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    const sisyfox::sisycol::DmxRuleBoolSetting *ruleSetting = 0) {
  GetDmxRuleBoolSettingBuilder builder_(_fbb);
  builder_.add_ruleSetting(ruleSetting);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxRuleBoolSettingRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8,
    VT_RULESETTING = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  const flatbuffers::Vector<const sisyfox::sisycol::DmxRuleBoolSetting *> *ruleSetting() const {
    return GetPointer<const flatbuffers::Vector<const sisyfox::sisycol::DmxRuleBoolSetting *> *>(VT_RULESETTING);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           VerifyOffset(verifier, VT_RULESETTING) &&
           verifier.Verify(ruleSetting()) &&
           verifier.EndTable();
  }
};

struct GetDmxRuleBoolSettingRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleBoolSettingRange::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleBoolSettingRange::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleBoolSettingRange::VT_RULESETTINGID, ruleSettingId, 0);
  }
  void add_ruleSetting(flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::DmxRuleBoolSetting *>> ruleSetting) {
    fbb_.AddOffset(GetDmxRuleBoolSettingRange::VT_RULESETTING, ruleSetting);
  }
  explicit GetDmxRuleBoolSettingRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxRuleBoolSettingRangeBuilder &operator=(const GetDmxRuleBoolSettingRangeBuilder &);
  flatbuffers::Offset<GetDmxRuleBoolSettingRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxRuleBoolSettingRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxRuleBoolSettingRange> CreateGetDmxRuleBoolSettingRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    flatbuffers::Offset<flatbuffers::Vector<const sisyfox::sisycol::DmxRuleBoolSetting *>> ruleSetting = 0) {
  GetDmxRuleBoolSettingRangeBuilder builder_(_fbb);
  builder_.add_ruleSetting(ruleSetting);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetDmxRuleBoolSettingRange> CreateGetDmxRuleBoolSettingRangeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    const std::vector<const sisyfox::sisycol::DmxRuleBoolSetting *> *ruleSetting = nullptr) {
  return sisyfox::sisycol::response::CreateGetDmxRuleBoolSettingRange(
      _fbb,
      deviceId,
      settingId,
      ruleSettingId,
      ruleSetting ? _fbb.CreateVector<const sisyfox::sisycol::DmxRuleBoolSetting *>(*ruleSetting) : 0);
}

struct ResetDmxConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ResetDmxConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ResetDmxConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResetDmxConfigBuilder &operator=(const ResetDmxConfigBuilder &);
  flatbuffers::Offset<ResetDmxConfig> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResetDmxConfig>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResetDmxConfig> CreateResetDmxConfig(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ResetDmxConfigBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GetIdealTime FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TIME = 4
  };
  float time() const {
    return GetField<float>(VT_TIME, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct GetIdealTimeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(float time) {
    fbb_.AddElement<float>(GetIdealTime::VT_TIME, time, 0.0f);
  }
  explicit GetIdealTimeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetIdealTimeBuilder &operator=(const GetIdealTimeBuilder &);
  flatbuffers::Offset<GetIdealTime> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetIdealTime>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetIdealTime> CreateGetIdealTime(
    flatbuffers::FlatBufferBuilder &_fbb,
    float time = 0.0f) {
  GetIdealTimeBuilder builder_(_fbb);
  builder_.add_time(time);
  return builder_.Finish();
}

}  // namespace response

namespace request {

}  // namespace request

namespace response {

}  // namespace response

inline bool VerifyPayload(flatbuffers::Verifier &verifier, const void *obj, Payload type) {
  switch (type) {
    case NONE: {
      return true;
    }
    case Error: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::response::Error *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Info: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::Info *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddScore: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddScore *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetScore: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetScore *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetScoreRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetScoreRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SetLiveData: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::SetLiveData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetLiveData: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetLiveData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddUser: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetUser: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SetUser: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::SetUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetCurrentUser: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetCurrentUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetUserRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetUserRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RemoveUser: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::RemoveUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case UnsetUser: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::UnsetUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddLocation: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddLocation *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetLocation: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetLocation *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SetSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::SetSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetSettings: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetSettings *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Trigger: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::Trigger *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddDmxDevice: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddDmxDevice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RemoveDmxDevice: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::RemoveDmxDevice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddDmxDeviceChannel: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddDmxDeviceChannel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RemoveDmxDeviceChannel: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::RemoveDmxDeviceChannel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddDmxChannelRule: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddDmxChannelRule *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RemoveDmxChannelRule: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::RemoveDmxChannelRule *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddDmxDeviceSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddDmxDeviceSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddDmxRuleSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::response::AddDmxRuleSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RemoveDmxDeviceSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::RemoveDmxDeviceSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddDmxRuleRangeSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddDmxRuleRangeSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case AddDmxRuleBoolSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::AddDmxRuleBoolSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case RemoveDmxRuleSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::RemoveDmxRuleSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ChangeDmxDeviceSettingValue: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::ChangeDmxDeviceSettingValue *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxDevice: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxDevice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxDeviceChannel: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxDeviceChannel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxChannelRule: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxChannelRule *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxDeviceSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxDeviceSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxRuleSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxRuleSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxDeviceRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxDeviceRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxDeviceChannelRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxDeviceChannelRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxChannelRuleRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxChannelRuleRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxDeviceSettingRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxDeviceSettingRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxRuleSettingRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetDmxRuleSettingRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxRuleRangeSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::response::GetDmxRuleRangeSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxRuleRangeSettingRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::response::GetDmxRuleRangeSettingRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxRuleBoolSetting: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::response::GetDmxRuleBoolSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetDmxRuleBoolSettingRange: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::response::GetDmxRuleBoolSettingRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SetDmxDeviceMode: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::SetDmxDeviceMode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ResetDmxConfig: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::ResetDmxConfig *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case GetIdealTime: {
      auto ptr = reinterpret_cast<const sisyfox::sisycol::request::GetIdealTime *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayload(
        verifier,  values->Get(i), types->GetEnum<Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline const sisyfox::sisycol::Root *GetRoot(const void *buf) {
  return flatbuffers::GetRoot<sisyfox::sisycol::Root>(buf);
}

inline bool VerifyRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<sisyfox::sisycol::Root>(nullptr);
}

inline void FinishRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<sisyfox::sisycol::Root> root) {
  fbb.Finish(root);
}

}  // namespace sisycol
}  // namespace sisyfox

#endif  // FLATBUFFERS_GENERATED_SISYCOL_SISYFOX_SISYCOL_RESPONSE_H_
