// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SISYCOLREQ_SISYFOX_REQUEST_H_
#define FLATBUFFERS_GENERATED_SISYCOLREQ_SISYFOX_REQUEST_H_

#include "flatbuffers/flatbuffers.h"

namespace sisyfox {
namespace request {

struct Version;

struct Root;

struct Info;

struct AddScore;

struct GetScore;

struct GetScoreRange;

struct AddLocation;

struct GetLocation;

struct LiveData;

struct SetLiveData;

struct GetLiveData;

struct AddUser;

struct GetUser;

struct SetUser;

struct GetCurrentUser;

struct GetUserRange;

struct RemoveUser;

struct UnsetUser;

struct SetSetting;

struct GetSetting;

struct GetSettings;

struct Trigger;

struct AddDmxDevice;

struct RemoveDmxDevice;

struct AddDmxDeviceChannel;

struct RemoveDmxDeviceChannel;

struct AddDmxChannelRule;

struct RemoveDmxChannelRule;

struct AddDmxDeviceSetting;

struct RemoveDmxDeviceSetting;

struct AddDmxRuleRangeSetting;

struct AddDmxRuleBoolSetting;

struct RemoveDmxRuleSetting;

struct ChangeDmxDeviceSettingValue;

struct SetDmxDeviceMode;

struct GetDmxDevice;

struct GetDmxDeviceRange;

struct GetDmxDeviceChannel;

struct GetDmxDeviceChannelRange;

struct GetDmxChannelRule;

struct GetDmxChannelRuleRange;

struct GetDmxDeviceSetting;

struct GetDmxDeviceSettingRange;

struct GetDmxRuleSetting;

struct GetDmxRuleSettingRange;

enum Payload {
  Payload_NONE = 0,
  Payload_Info = 1,
  Payload_AddScore = 2,
  Payload_GetScore = 3,
  Payload_GetScoreRange = 4,
  Payload_SetLiveData = 5,
  Payload_GetLiveData = 6,
  Payload_AddUser = 7,
  Payload_GetUser = 8,
  Payload_SetUser = 9,
  Payload_GetCurrentUser = 10,
  Payload_GetUserRange = 11,
  Payload_RemoveUser = 12,
  Payload_UnsetUser = 13,
  Payload_AddLocation = 14,
  Payload_GetLocation = 15,
  Payload_SetSetting = 16,
  Payload_GetSetting = 17,
  Payload_GetSettings = 18,
  Payload_Trigger = 19,
  Payload_AddDmxDevice = 20,
  Payload_RemoveDmxDevice = 21,
  Payload_AddDmxDeviceChannel = 22,
  Payload_RemoveDmxDeviceChannel = 23,
  Payload_AddDmxChannelRule = 24,
  Payload_RemoveDmxChannelRule = 25,
  Payload_AddDmxDeviceSetting = 26,
  Payload_RemoveDmxDeviceSetting = 27,
  Payload_AddDmxRuleRangeSetting = 28,
  Payload_AddDmxRuleBoolSetting = 29,
  Payload_RemoveDmxRuleSetting = 30,
  Payload_ChangeDmxDeviceSettingValue = 31,
  Payload_GetDmxDevice = 32,
  Payload_GetDmxDeviceChannel = 33,
  Payload_GetDmxChannelRule = 34,
  Payload_GetDmxDeviceSetting = 35,
  Payload_GetDmxRuleSetting = 36,
  Payload_GetDmxDeviceRange = 37,
  Payload_GetDmxDeviceChannelRange = 38,
  Payload_GetDmxChannelRuleRange = 39,
  Payload_GetDmxDeviceSettingRange = 40,
  Payload_GetDmxRuleSettingRange = 41,
  Payload_SetDmxDeviceMode = 42,
  Payload_MIN = Payload_NONE,
  Payload_MAX = Payload_SetDmxDeviceMode
};

inline Payload (&EnumValuesPayload())[43] {
  static Payload values[] = {
    Payload_NONE,
    Payload_Info,
    Payload_AddScore,
    Payload_GetScore,
    Payload_GetScoreRange,
    Payload_SetLiveData,
    Payload_GetLiveData,
    Payload_AddUser,
    Payload_GetUser,
    Payload_SetUser,
    Payload_GetCurrentUser,
    Payload_GetUserRange,
    Payload_RemoveUser,
    Payload_UnsetUser,
    Payload_AddLocation,
    Payload_GetLocation,
    Payload_SetSetting,
    Payload_GetSetting,
    Payload_GetSettings,
    Payload_Trigger,
    Payload_AddDmxDevice,
    Payload_RemoveDmxDevice,
    Payload_AddDmxDeviceChannel,
    Payload_RemoveDmxDeviceChannel,
    Payload_AddDmxChannelRule,
    Payload_RemoveDmxChannelRule,
    Payload_AddDmxDeviceSetting,
    Payload_RemoveDmxDeviceSetting,
    Payload_AddDmxRuleRangeSetting,
    Payload_AddDmxRuleBoolSetting,
    Payload_RemoveDmxRuleSetting,
    Payload_ChangeDmxDeviceSettingValue,
    Payload_GetDmxDevice,
    Payload_GetDmxDeviceChannel,
    Payload_GetDmxChannelRule,
    Payload_GetDmxDeviceSetting,
    Payload_GetDmxRuleSetting,
    Payload_GetDmxDeviceRange,
    Payload_GetDmxDeviceChannelRange,
    Payload_GetDmxChannelRuleRange,
    Payload_GetDmxDeviceSettingRange,
    Payload_GetDmxRuleSettingRange,
    Payload_SetDmxDeviceMode
  };
  return values;
}

inline const char **EnumNamesPayload() {
  static const char *names[] = {
    "NONE",
    "Info",
    "AddScore",
    "GetScore",
    "GetScoreRange",
    "SetLiveData",
    "GetLiveData",
    "AddUser",
    "GetUser",
    "SetUser",
    "GetCurrentUser",
    "GetUserRange",
    "RemoveUser",
    "UnsetUser",
    "AddLocation",
    "GetLocation",
    "SetSetting",
    "GetSetting",
    "GetSettings",
    "Trigger",
    "AddDmxDevice",
    "RemoveDmxDevice",
    "AddDmxDeviceChannel",
    "RemoveDmxDeviceChannel",
    "AddDmxChannelRule",
    "RemoveDmxChannelRule",
    "AddDmxDeviceSetting",
    "RemoveDmxDeviceSetting",
    "AddDmxRuleRangeSetting",
    "AddDmxRuleBoolSetting",
    "RemoveDmxRuleSetting",
    "ChangeDmxDeviceSettingValue",
    "GetDmxDevice",
    "GetDmxDeviceChannel",
    "GetDmxChannelRule",
    "GetDmxDeviceSetting",
    "GetDmxRuleSetting",
    "GetDmxDeviceRange",
    "GetDmxDeviceChannelRange",
    "GetDmxChannelRuleRange",
    "GetDmxDeviceSettingRange",
    "GetDmxRuleSettingRange",
    "SetDmxDeviceMode",
    nullptr
  };
  return names;
}

inline const char *EnumNamePayload(Payload e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesPayload()[index];
}

template<typename T> struct PayloadTraits {
  static const Payload enum_value = Payload_NONE;
};

template<> struct PayloadTraits<Info> {
  static const Payload enum_value = Payload_Info;
};

template<> struct PayloadTraits<AddScore> {
  static const Payload enum_value = Payload_AddScore;
};

template<> struct PayloadTraits<GetScore> {
  static const Payload enum_value = Payload_GetScore;
};

template<> struct PayloadTraits<GetScoreRange> {
  static const Payload enum_value = Payload_GetScoreRange;
};

template<> struct PayloadTraits<SetLiveData> {
  static const Payload enum_value = Payload_SetLiveData;
};

template<> struct PayloadTraits<GetLiveData> {
  static const Payload enum_value = Payload_GetLiveData;
};

template<> struct PayloadTraits<AddUser> {
  static const Payload enum_value = Payload_AddUser;
};

template<> struct PayloadTraits<GetUser> {
  static const Payload enum_value = Payload_GetUser;
};

template<> struct PayloadTraits<SetUser> {
  static const Payload enum_value = Payload_SetUser;
};

template<> struct PayloadTraits<GetCurrentUser> {
  static const Payload enum_value = Payload_GetCurrentUser;
};

template<> struct PayloadTraits<GetUserRange> {
  static const Payload enum_value = Payload_GetUserRange;
};

template<> struct PayloadTraits<RemoveUser> {
  static const Payload enum_value = Payload_RemoveUser;
};

template<> struct PayloadTraits<UnsetUser> {
  static const Payload enum_value = Payload_UnsetUser;
};

template<> struct PayloadTraits<AddLocation> {
  static const Payload enum_value = Payload_AddLocation;
};

template<> struct PayloadTraits<GetLocation> {
  static const Payload enum_value = Payload_GetLocation;
};

template<> struct PayloadTraits<SetSetting> {
  static const Payload enum_value = Payload_SetSetting;
};

template<> struct PayloadTraits<GetSetting> {
  static const Payload enum_value = Payload_GetSetting;
};

template<> struct PayloadTraits<GetSettings> {
  static const Payload enum_value = Payload_GetSettings;
};

template<> struct PayloadTraits<Trigger> {
  static const Payload enum_value = Payload_Trigger;
};

template<> struct PayloadTraits<AddDmxDevice> {
  static const Payload enum_value = Payload_AddDmxDevice;
};

template<> struct PayloadTraits<RemoveDmxDevice> {
  static const Payload enum_value = Payload_RemoveDmxDevice;
};

template<> struct PayloadTraits<AddDmxDeviceChannel> {
  static const Payload enum_value = Payload_AddDmxDeviceChannel;
};

template<> struct PayloadTraits<RemoveDmxDeviceChannel> {
  static const Payload enum_value = Payload_RemoveDmxDeviceChannel;
};

template<> struct PayloadTraits<AddDmxChannelRule> {
  static const Payload enum_value = Payload_AddDmxChannelRule;
};

template<> struct PayloadTraits<RemoveDmxChannelRule> {
  static const Payload enum_value = Payload_RemoveDmxChannelRule;
};

template<> struct PayloadTraits<AddDmxDeviceSetting> {
  static const Payload enum_value = Payload_AddDmxDeviceSetting;
};

template<> struct PayloadTraits<RemoveDmxDeviceSetting> {
  static const Payload enum_value = Payload_RemoveDmxDeviceSetting;
};

template<> struct PayloadTraits<AddDmxRuleRangeSetting> {
  static const Payload enum_value = Payload_AddDmxRuleRangeSetting;
};

template<> struct PayloadTraits<AddDmxRuleBoolSetting> {
  static const Payload enum_value = Payload_AddDmxRuleBoolSetting;
};

template<> struct PayloadTraits<RemoveDmxRuleSetting> {
  static const Payload enum_value = Payload_RemoveDmxRuleSetting;
};

template<> struct PayloadTraits<ChangeDmxDeviceSettingValue> {
  static const Payload enum_value = Payload_ChangeDmxDeviceSettingValue;
};

template<> struct PayloadTraits<GetDmxDevice> {
  static const Payload enum_value = Payload_GetDmxDevice;
};

template<> struct PayloadTraits<GetDmxDeviceChannel> {
  static const Payload enum_value = Payload_GetDmxDeviceChannel;
};

template<> struct PayloadTraits<GetDmxChannelRule> {
  static const Payload enum_value = Payload_GetDmxChannelRule;
};

template<> struct PayloadTraits<GetDmxDeviceSetting> {
  static const Payload enum_value = Payload_GetDmxDeviceSetting;
};

template<> struct PayloadTraits<GetDmxRuleSetting> {
  static const Payload enum_value = Payload_GetDmxRuleSetting;
};

template<> struct PayloadTraits<GetDmxDeviceRange> {
  static const Payload enum_value = Payload_GetDmxDeviceRange;
};

template<> struct PayloadTraits<GetDmxDeviceChannelRange> {
  static const Payload enum_value = Payload_GetDmxDeviceChannelRange;
};

template<> struct PayloadTraits<GetDmxChannelRuleRange> {
  static const Payload enum_value = Payload_GetDmxChannelRuleRange;
};

template<> struct PayloadTraits<GetDmxDeviceSettingRange> {
  static const Payload enum_value = Payload_GetDmxDeviceSettingRange;
};

template<> struct PayloadTraits<GetDmxRuleSettingRange> {
  static const Payload enum_value = Payload_GetDmxRuleSettingRange;
};

template<> struct PayloadTraits<SetDmxDeviceMode> {
  static const Payload enum_value = Payload_SetDmxDeviceMode;
};

bool VerifyPayload(flatbuffers::Verifier &verifier, const void *obj, Payload type);
bool VerifyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum EndReason {
  EndReason_WIN = 0,
  EndReason_MAP_BOARDER = 1,
  EndReason_COLLISION = 2,
  EndReason_INSTANT_LOSS_ANGLE = 3,
  EndReason_GROUND_DIST = 4,
  EndReason_TO_STEEP = 5,
  EndReason_FLASH = 6,
  EndReason_UNDERWATER = 7,
  EndReason_MIN = EndReason_WIN,
  EndReason_MAX = EndReason_UNDERWATER
};

inline EndReason (&EnumValuesEndReason())[8] {
  static EndReason values[] = {
    EndReason_WIN,
    EndReason_MAP_BOARDER,
    EndReason_COLLISION,
    EndReason_INSTANT_LOSS_ANGLE,
    EndReason_GROUND_DIST,
    EndReason_TO_STEEP,
    EndReason_FLASH,
    EndReason_UNDERWATER
  };
  return values;
}

inline const char **EnumNamesEndReason() {
  static const char *names[] = {
    "WIN",
    "MAP_BOARDER",
    "COLLISION",
    "INSTANT_LOSS_ANGLE",
    "GROUND_DIST",
    "TO_STEEP",
    "FLASH",
    "UNDERWATER",
    nullptr
  };
  return names;
}

inline const char *EnumNameEndReason(EndReason e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesEndReason()[index];
}

enum SettingType {
  SettingType_GAME_LANGUAGE = 0,
  SettingType_INTERFACE_LANGUAGE = 1,
  SettingType_SOUND_LEVEL = 2,
  SettingType_COMPETITION_MODE = 3,
  SettingType_WORLD = 64,
  SettingType_LEVEL = 65,
  SettingType_DIFFICULTY = 66,
  SettingType_GAME_MODE = 67,
  SettingType_MAX_COLLECT_WORLD = 68,
  SettingType_MAX_COLLECT_LEVEL = 69,
  SettingType_GEM_SCORE = 70,
  SettingType_GAME_ACTIVE = 128,
  SettingType_MIN = SettingType_GAME_LANGUAGE,
  SettingType_MAX = SettingType_GAME_ACTIVE
};

inline SettingType (&EnumValuesSettingType())[12] {
  static SettingType values[] = {
    SettingType_GAME_LANGUAGE,
    SettingType_INTERFACE_LANGUAGE,
    SettingType_SOUND_LEVEL,
    SettingType_COMPETITION_MODE,
    SettingType_WORLD,
    SettingType_LEVEL,
    SettingType_DIFFICULTY,
    SettingType_GAME_MODE,
    SettingType_MAX_COLLECT_WORLD,
    SettingType_MAX_COLLECT_LEVEL,
    SettingType_GEM_SCORE,
    SettingType_GAME_ACTIVE
  };
  return values;
}

enum TriggerType {
  TriggerType_NEW_ROUND = 0,
  TriggerType_MIN = TriggerType_NEW_ROUND,
  TriggerType_MAX = TriggerType_NEW_ROUND
};

inline TriggerType (&EnumValuesTriggerType())[1] {
  static TriggerType values[] = {
    TriggerType_NEW_ROUND
  };
  return values;
}

inline const char **EnumNamesTriggerType() {
  static const char *names[] = {
    "NEW_ROUND",
    nullptr
  };
  return names;
}

inline const char *EnumNameTriggerType(TriggerType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesTriggerType()[index];
}

enum DmxChannelRuleType {
  DmxChannelRuleType_HEIGHT = 0,
  DmxChannelRuleType_TIME = 1,
  DmxChannelRuleType_PITCH = 2,
  DmxChannelRuleType_MIN = DmxChannelRuleType_HEIGHT,
  DmxChannelRuleType_MAX = DmxChannelRuleType_PITCH
};

inline DmxChannelRuleType (&EnumValuesDmxChannelRuleType())[3] {
  static DmxChannelRuleType values[] = {
    DmxChannelRuleType_HEIGHT,
    DmxChannelRuleType_TIME,
    DmxChannelRuleType_PITCH
  };
  return values;
}

inline const char **EnumNamesDmxChannelRuleType() {
  static const char *names[] = {
    "HEIGHT",
    "TIME",
    "PITCH",
    nullptr
  };
  return names;
}

inline const char *EnumNameDmxChannelRuleType(DmxChannelRuleType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDmxChannelRuleType()[index];
}

enum DmxDeviceSettingType {
  DmxDeviceSettingType_RANGE = 0,
  DmxDeviceSettingType_BOOL = 1,
  DmxDeviceSettingType_MIN = DmxDeviceSettingType_RANGE,
  DmxDeviceSettingType_MAX = DmxDeviceSettingType_BOOL
};

inline DmxDeviceSettingType (&EnumValuesDmxDeviceSettingType())[2] {
  static DmxDeviceSettingType values[] = {
    DmxDeviceSettingType_RANGE,
    DmxDeviceSettingType_BOOL
  };
  return values;
}

inline const char **EnumNamesDmxDeviceSettingType() {
  static const char *names[] = {
    "RANGE",
    "BOOL",
    nullptr
  };
  return names;
}

inline const char *EnumNameDmxDeviceSettingType(DmxDeviceSettingType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDmxDeviceSettingType()[index];
}

enum DmxDeviceMode {
  DmxDeviceMode_TEST = 0,
  DmxDeviceMode_DISABLED = 1,
  DmxDeviceMode_MIN = DmxDeviceMode_TEST,
  DmxDeviceMode_MAX = DmxDeviceMode_DISABLED
};

inline DmxDeviceMode (&EnumValuesDmxDeviceMode())[2] {
  static DmxDeviceMode values[] = {
    DmxDeviceMode_TEST,
    DmxDeviceMode_DISABLED
  };
  return values;
}

inline const char **EnumNamesDmxDeviceMode() {
  static const char *names[] = {
    "TEST",
    "DISABLED",
    nullptr
  };
  return names;
}

inline const char *EnumNameDmxDeviceMode(DmxDeviceMode e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDmxDeviceMode()[index];
}

MANUALLY_ALIGNED_STRUCT(1) Version FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t high_;
  uint8_t low_;

 public:
  Version() {
    memset(this, 0, sizeof(Version));
  }
  Version(const Version &_o) {
    memcpy(this, &_o, sizeof(Version));
  }
  Version(uint8_t _high, uint8_t _low)
      : high_(flatbuffers::EndianScalar(_high)),
        low_(flatbuffers::EndianScalar(_low)) {
  }
  uint8_t high() const {
    return flatbuffers::EndianScalar(high_);
  }
  uint8_t low() const {
    return flatbuffers::EndianScalar(low_);
  }
};
STRUCT_END(Version, 2);

MANUALLY_ALIGNED_STRUCT(4) LiveData FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t height_;
  int32_t time_;
  int32_t pitch_;

 public:
  LiveData() {
    memset(this, 0, sizeof(LiveData));
  }
  LiveData(const LiveData &_o) {
    memcpy(this, &_o, sizeof(LiveData));
  }
  LiveData(int32_t _height, int32_t _time, int32_t _pitch)
      : height_(flatbuffers::EndianScalar(_height)),
        time_(flatbuffers::EndianScalar(_time)),
        pitch_(flatbuffers::EndianScalar(_pitch)) {
  }
  int32_t height() const {
    return flatbuffers::EndianScalar(height_);
  }
  int32_t time() const {
    return flatbuffers::EndianScalar(time_);
  }
  int32_t pitch() const {
    return flatbuffers::EndianScalar(pitch_);
  }
};
STRUCT_END(LiveData, 12);

struct Root FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VERSION = 4,
    VT_MESSAGEID = 6,
    VT_PAYLOAD_TYPE = 8,
    VT_PAYLOAD = 10
  };
  const Version *version() const {
    return GetStruct<const Version *>(VT_VERSION);
  }
  uint16_t messageId() const {
    return GetField<uint16_t>(VT_MESSAGEID, 0);
  }
  Payload payload_type() const {
    return static_cast<Payload>(GetField<uint8_t>(VT_PAYLOAD_TYPE, 0));
  }
  const void *payload() const {
    return GetPointer<const void *>(VT_PAYLOAD);
  }
  template<typename T> const T *payload_as() const;
  const Info *payload_as_Info() const {
    return payload_type() == Payload_Info ? static_cast<const Info *>(payload()) : nullptr;
  }
  const AddScore *payload_as_AddScore() const {
    return payload_type() == Payload_AddScore ? static_cast<const AddScore *>(payload()) : nullptr;
  }
  const GetScore *payload_as_GetScore() const {
    return payload_type() == Payload_GetScore ? static_cast<const GetScore *>(payload()) : nullptr;
  }
  const GetScoreRange *payload_as_GetScoreRange() const {
    return payload_type() == Payload_GetScoreRange ? static_cast<const GetScoreRange *>(payload()) : nullptr;
  }
  const SetLiveData *payload_as_SetLiveData() const {
    return payload_type() == Payload_SetLiveData ? static_cast<const SetLiveData *>(payload()) : nullptr;
  }
  const GetLiveData *payload_as_GetLiveData() const {
    return payload_type() == Payload_GetLiveData ? static_cast<const GetLiveData *>(payload()) : nullptr;
  }
  const AddUser *payload_as_AddUser() const {
    return payload_type() == Payload_AddUser ? static_cast<const AddUser *>(payload()) : nullptr;
  }
  const GetUser *payload_as_GetUser() const {
    return payload_type() == Payload_GetUser ? static_cast<const GetUser *>(payload()) : nullptr;
  }
  const SetUser *payload_as_SetUser() const {
    return payload_type() == Payload_SetUser ? static_cast<const SetUser *>(payload()) : nullptr;
  }
  const GetCurrentUser *payload_as_GetCurrentUser() const {
    return payload_type() == Payload_GetCurrentUser ? static_cast<const GetCurrentUser *>(payload()) : nullptr;
  }
  const GetUserRange *payload_as_GetUserRange() const {
    return payload_type() == Payload_GetUserRange ? static_cast<const GetUserRange *>(payload()) : nullptr;
  }
  const RemoveUser *payload_as_RemoveUser() const {
    return payload_type() == Payload_RemoveUser ? static_cast<const RemoveUser *>(payload()) : nullptr;
  }
  const UnsetUser *payload_as_UnsetUser() const {
    return payload_type() == Payload_UnsetUser ? static_cast<const UnsetUser *>(payload()) : nullptr;
  }
  const AddLocation *payload_as_AddLocation() const {
    return payload_type() == Payload_AddLocation ? static_cast<const AddLocation *>(payload()) : nullptr;
  }
  const GetLocation *payload_as_GetLocation() const {
    return payload_type() == Payload_GetLocation ? static_cast<const GetLocation *>(payload()) : nullptr;
  }
  const SetSetting *payload_as_SetSetting() const {
    return payload_type() == Payload_SetSetting ? static_cast<const SetSetting *>(payload()) : nullptr;
  }
  const GetSetting *payload_as_GetSetting() const {
    return payload_type() == Payload_GetSetting ? static_cast<const GetSetting *>(payload()) : nullptr;
  }
  const GetSettings *payload_as_GetSettings() const {
    return payload_type() == Payload_GetSettings ? static_cast<const GetSettings *>(payload()) : nullptr;
  }
  const Trigger *payload_as_Trigger() const {
    return payload_type() == Payload_Trigger ? static_cast<const Trigger *>(payload()) : nullptr;
  }
  const AddDmxDevice *payload_as_AddDmxDevice() const {
    return payload_type() == Payload_AddDmxDevice ? static_cast<const AddDmxDevice *>(payload()) : nullptr;
  }
  const RemoveDmxDevice *payload_as_RemoveDmxDevice() const {
    return payload_type() == Payload_RemoveDmxDevice ? static_cast<const RemoveDmxDevice *>(payload()) : nullptr;
  }
  const AddDmxDeviceChannel *payload_as_AddDmxDeviceChannel() const {
    return payload_type() == Payload_AddDmxDeviceChannel ? static_cast<const AddDmxDeviceChannel *>(payload()) : nullptr;
  }
  const RemoveDmxDeviceChannel *payload_as_RemoveDmxDeviceChannel() const {
    return payload_type() == Payload_RemoveDmxDeviceChannel ? static_cast<const RemoveDmxDeviceChannel *>(payload()) : nullptr;
  }
  const AddDmxChannelRule *payload_as_AddDmxChannelRule() const {
    return payload_type() == Payload_AddDmxChannelRule ? static_cast<const AddDmxChannelRule *>(payload()) : nullptr;
  }
  const RemoveDmxChannelRule *payload_as_RemoveDmxChannelRule() const {
    return payload_type() == Payload_RemoveDmxChannelRule ? static_cast<const RemoveDmxChannelRule *>(payload()) : nullptr;
  }
  const AddDmxDeviceSetting *payload_as_AddDmxDeviceSetting() const {
    return payload_type() == Payload_AddDmxDeviceSetting ? static_cast<const AddDmxDeviceSetting *>(payload()) : nullptr;
  }
  const RemoveDmxDeviceSetting *payload_as_RemoveDmxDeviceSetting() const {
    return payload_type() == Payload_RemoveDmxDeviceSetting ? static_cast<const RemoveDmxDeviceSetting *>(payload()) : nullptr;
  }
  const AddDmxRuleRangeSetting *payload_as_AddDmxRuleRangeSetting() const {
    return payload_type() == Payload_AddDmxRuleRangeSetting ? static_cast<const AddDmxRuleRangeSetting *>(payload()) : nullptr;
  }
  const AddDmxRuleBoolSetting *payload_as_AddDmxRuleBoolSetting() const {
    return payload_type() == Payload_AddDmxRuleBoolSetting ? static_cast<const AddDmxRuleBoolSetting *>(payload()) : nullptr;
  }
  const RemoveDmxRuleSetting *payload_as_RemoveDmxRuleSetting() const {
    return payload_type() == Payload_RemoveDmxRuleSetting ? static_cast<const RemoveDmxRuleSetting *>(payload()) : nullptr;
  }
  const ChangeDmxDeviceSettingValue *payload_as_ChangeDmxDeviceSettingValue() const {
    return payload_type() == Payload_ChangeDmxDeviceSettingValue ? static_cast<const ChangeDmxDeviceSettingValue *>(payload()) : nullptr;
  }
  const GetDmxDevice *payload_as_GetDmxDevice() const {
    return payload_type() == Payload_GetDmxDevice ? static_cast<const GetDmxDevice *>(payload()) : nullptr;
  }
  const GetDmxDeviceChannel *payload_as_GetDmxDeviceChannel() const {
    return payload_type() == Payload_GetDmxDeviceChannel ? static_cast<const GetDmxDeviceChannel *>(payload()) : nullptr;
  }
  const GetDmxChannelRule *payload_as_GetDmxChannelRule() const {
    return payload_type() == Payload_GetDmxChannelRule ? static_cast<const GetDmxChannelRule *>(payload()) : nullptr;
  }
  const GetDmxDeviceSetting *payload_as_GetDmxDeviceSetting() const {
    return payload_type() == Payload_GetDmxDeviceSetting ? static_cast<const GetDmxDeviceSetting *>(payload()) : nullptr;
  }
  const GetDmxRuleSetting *payload_as_GetDmxRuleSetting() const {
    return payload_type() == Payload_GetDmxRuleSetting ? static_cast<const GetDmxRuleSetting *>(payload()) : nullptr;
  }
  const GetDmxDeviceRange *payload_as_GetDmxDeviceRange() const {
    return payload_type() == Payload_GetDmxDeviceRange ? static_cast<const GetDmxDeviceRange *>(payload()) : nullptr;
  }
  const GetDmxDeviceChannelRange *payload_as_GetDmxDeviceChannelRange() const {
    return payload_type() == Payload_GetDmxDeviceChannelRange ? static_cast<const GetDmxDeviceChannelRange *>(payload()) : nullptr;
  }
  const GetDmxChannelRuleRange *payload_as_GetDmxChannelRuleRange() const {
    return payload_type() == Payload_GetDmxChannelRuleRange ? static_cast<const GetDmxChannelRuleRange *>(payload()) : nullptr;
  }
  const GetDmxDeviceSettingRange *payload_as_GetDmxDeviceSettingRange() const {
    return payload_type() == Payload_GetDmxDeviceSettingRange ? static_cast<const GetDmxDeviceSettingRange *>(payload()) : nullptr;
  }
  const GetDmxRuleSettingRange *payload_as_GetDmxRuleSettingRange() const {
    return payload_type() == Payload_GetDmxRuleSettingRange ? static_cast<const GetDmxRuleSettingRange *>(payload()) : nullptr;
  }
  const SetDmxDeviceMode *payload_as_SetDmxDeviceMode() const {
    return payload_type() == Payload_SetDmxDeviceMode ? static_cast<const SetDmxDeviceMode *>(payload()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Version>(verifier, VT_VERSION) &&
           VerifyField<uint16_t>(verifier, VT_MESSAGEID) &&
           VerifyField<uint8_t>(verifier, VT_PAYLOAD_TYPE) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           VerifyPayload(verifier, payload(), payload_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Info *Root::payload_as<Info>() const {
  return payload_as_Info();
}

template<> inline const AddScore *Root::payload_as<AddScore>() const {
  return payload_as_AddScore();
}

template<> inline const GetScore *Root::payload_as<GetScore>() const {
  return payload_as_GetScore();
}

template<> inline const GetScoreRange *Root::payload_as<GetScoreRange>() const {
  return payload_as_GetScoreRange();
}

template<> inline const SetLiveData *Root::payload_as<SetLiveData>() const {
  return payload_as_SetLiveData();
}

template<> inline const GetLiveData *Root::payload_as<GetLiveData>() const {
  return payload_as_GetLiveData();
}

template<> inline const AddUser *Root::payload_as<AddUser>() const {
  return payload_as_AddUser();
}

template<> inline const GetUser *Root::payload_as<GetUser>() const {
  return payload_as_GetUser();
}

template<> inline const SetUser *Root::payload_as<SetUser>() const {
  return payload_as_SetUser();
}

template<> inline const GetCurrentUser *Root::payload_as<GetCurrentUser>() const {
  return payload_as_GetCurrentUser();
}

template<> inline const GetUserRange *Root::payload_as<GetUserRange>() const {
  return payload_as_GetUserRange();
}

template<> inline const RemoveUser *Root::payload_as<RemoveUser>() const {
  return payload_as_RemoveUser();
}

template<> inline const UnsetUser *Root::payload_as<UnsetUser>() const {
  return payload_as_UnsetUser();
}

template<> inline const AddLocation *Root::payload_as<AddLocation>() const {
  return payload_as_AddLocation();
}

template<> inline const GetLocation *Root::payload_as<GetLocation>() const {
  return payload_as_GetLocation();
}

template<> inline const SetSetting *Root::payload_as<SetSetting>() const {
  return payload_as_SetSetting();
}

template<> inline const GetSetting *Root::payload_as<GetSetting>() const {
  return payload_as_GetSetting();
}

template<> inline const GetSettings *Root::payload_as<GetSettings>() const {
  return payload_as_GetSettings();
}

template<> inline const Trigger *Root::payload_as<Trigger>() const {
  return payload_as_Trigger();
}

template<> inline const AddDmxDevice *Root::payload_as<AddDmxDevice>() const {
  return payload_as_AddDmxDevice();
}

template<> inline const RemoveDmxDevice *Root::payload_as<RemoveDmxDevice>() const {
  return payload_as_RemoveDmxDevice();
}

template<> inline const AddDmxDeviceChannel *Root::payload_as<AddDmxDeviceChannel>() const {
  return payload_as_AddDmxDeviceChannel();
}

template<> inline const RemoveDmxDeviceChannel *Root::payload_as<RemoveDmxDeviceChannel>() const {
  return payload_as_RemoveDmxDeviceChannel();
}

template<> inline const AddDmxChannelRule *Root::payload_as<AddDmxChannelRule>() const {
  return payload_as_AddDmxChannelRule();
}

template<> inline const RemoveDmxChannelRule *Root::payload_as<RemoveDmxChannelRule>() const {
  return payload_as_RemoveDmxChannelRule();
}

template<> inline const AddDmxDeviceSetting *Root::payload_as<AddDmxDeviceSetting>() const {
  return payload_as_AddDmxDeviceSetting();
}

template<> inline const RemoveDmxDeviceSetting *Root::payload_as<RemoveDmxDeviceSetting>() const {
  return payload_as_RemoveDmxDeviceSetting();
}

template<> inline const AddDmxRuleRangeSetting *Root::payload_as<AddDmxRuleRangeSetting>() const {
  return payload_as_AddDmxRuleRangeSetting();
}

template<> inline const AddDmxRuleBoolSetting *Root::payload_as<AddDmxRuleBoolSetting>() const {
  return payload_as_AddDmxRuleBoolSetting();
}

template<> inline const RemoveDmxRuleSetting *Root::payload_as<RemoveDmxRuleSetting>() const {
  return payload_as_RemoveDmxRuleSetting();
}

template<> inline const ChangeDmxDeviceSettingValue *Root::payload_as<ChangeDmxDeviceSettingValue>() const {
  return payload_as_ChangeDmxDeviceSettingValue();
}

template<> inline const GetDmxDevice *Root::payload_as<GetDmxDevice>() const {
  return payload_as_GetDmxDevice();
}

template<> inline const GetDmxDeviceChannel *Root::payload_as<GetDmxDeviceChannel>() const {
  return payload_as_GetDmxDeviceChannel();
}

template<> inline const GetDmxChannelRule *Root::payload_as<GetDmxChannelRule>() const {
  return payload_as_GetDmxChannelRule();
}

template<> inline const GetDmxDeviceSetting *Root::payload_as<GetDmxDeviceSetting>() const {
  return payload_as_GetDmxDeviceSetting();
}

template<> inline const GetDmxRuleSetting *Root::payload_as<GetDmxRuleSetting>() const {
  return payload_as_GetDmxRuleSetting();
}

template<> inline const GetDmxDeviceRange *Root::payload_as<GetDmxDeviceRange>() const {
  return payload_as_GetDmxDeviceRange();
}

template<> inline const GetDmxDeviceChannelRange *Root::payload_as<GetDmxDeviceChannelRange>() const {
  return payload_as_GetDmxDeviceChannelRange();
}

template<> inline const GetDmxChannelRuleRange *Root::payload_as<GetDmxChannelRuleRange>() const {
  return payload_as_GetDmxChannelRuleRange();
}

template<> inline const GetDmxDeviceSettingRange *Root::payload_as<GetDmxDeviceSettingRange>() const {
  return payload_as_GetDmxDeviceSettingRange();
}

template<> inline const GetDmxRuleSettingRange *Root::payload_as<GetDmxRuleSettingRange>() const {
  return payload_as_GetDmxRuleSettingRange();
}

template<> inline const SetDmxDeviceMode *Root::payload_as<SetDmxDeviceMode>() const {
  return payload_as_SetDmxDeviceMode();
}

struct RootBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(const Version *version) {
    fbb_.AddStruct(Root::VT_VERSION, version);
  }
  void add_messageId(uint16_t messageId) {
    fbb_.AddElement<uint16_t>(Root::VT_MESSAGEID, messageId, 0);
  }
  void add_payload_type(Payload payload_type) {
    fbb_.AddElement<uint8_t>(Root::VT_PAYLOAD_TYPE, static_cast<uint8_t>(payload_type), 0);
  }
  void add_payload(flatbuffers::Offset<void> payload) {
    fbb_.AddOffset(Root::VT_PAYLOAD, payload);
  }
  explicit RootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RootBuilder &operator=(const RootBuilder &);
  flatbuffers::Offset<Root> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Root>(end);
    return o;
  }
};

inline flatbuffers::Offset<Root> CreateRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Version *version = 0,
    uint16_t messageId = 0,
    Payload payload_type = Payload_NONE,
    flatbuffers::Offset<void> payload = 0) {
  RootBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_version(version);
  builder_.add_messageId(messageId);
  builder_.add_payload_type(payload_type);
  return builder_.Finish();
}

struct Info FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct InfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit InfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InfoBuilder &operator=(const InfoBuilder &);
  flatbuffers::Offset<Info> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Info>(end);
    return o;
  }
};

inline flatbuffers::Offset<Info> CreateInfo(
    flatbuffers::FlatBufferBuilder &_fbb) {
  InfoBuilder builder_(_fbb);
  return builder_.Finish();
}

struct AddScore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HEIGHT = 4,
    VT_TIME = 6,
    VT_REASON = 8
  };
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  int32_t time() const {
    return GetField<int32_t>(VT_TIME, 0);
  }
  EndReason reason() const {
    return static_cast<EndReason>(GetField<uint8_t>(VT_REASON, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           VerifyField<int32_t>(verifier, VT_TIME) &&
           VerifyField<uint8_t>(verifier, VT_REASON) &&
           verifier.EndTable();
  }
};

struct AddScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(AddScore::VT_HEIGHT, height, 0);
  }
  void add_time(int32_t time) {
    fbb_.AddElement<int32_t>(AddScore::VT_TIME, time, 0);
  }
  void add_reason(EndReason reason) {
    fbb_.AddElement<uint8_t>(AddScore::VT_REASON, static_cast<uint8_t>(reason), 0);
  }
  explicit AddScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddScoreBuilder &operator=(const AddScoreBuilder &);
  flatbuffers::Offset<AddScore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddScore>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddScore> CreateAddScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t height = 0,
    int32_t time = 0,
    EndReason reason = EndReason_WIN) {
  AddScoreBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_height(height);
  builder_.add_reason(reason);
  return builder_.Finish();
}

struct GetScore FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct GetScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(GetScore::VT_ID, id, 0);
  }
  explicit GetScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetScoreBuilder &operator=(const GetScoreBuilder &);
  flatbuffers::Offset<GetScore> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetScore>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetScore> CreateGetScore(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0) {
  GetScoreBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct GetScoreRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RANGE = 4,
    VT_STARTID = 6
  };
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  uint32_t startId() const {
    return GetField<uint32_t>(VT_STARTID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           VerifyField<uint32_t>(verifier, VT_STARTID) &&
           verifier.EndTable();
  }
};

struct GetScoreRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetScoreRange::VT_RANGE, range, 0);
  }
  void add_startId(uint32_t startId) {
    fbb_.AddElement<uint32_t>(GetScoreRange::VT_STARTID, startId, 0);
  }
  explicit GetScoreRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetScoreRangeBuilder &operator=(const GetScoreRangeBuilder &);
  flatbuffers::Offset<GetScoreRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetScoreRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetScoreRange> CreateGetScoreRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t range = 0,
    uint32_t startId = 0) {
  GetScoreRangeBuilder builder_(_fbb);
  builder_.add_startId(startId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct AddLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STARTID = 4,
    VT_NAME = 6
  };
  uint32_t startId() const {
    return GetField<uint32_t>(VT_STARTID, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_STARTID) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct AddLocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_startId(uint32_t startId) {
    fbb_.AddElement<uint32_t>(AddLocation::VT_STARTID, startId, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AddLocation::VT_NAME, name);
  }
  explicit AddLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddLocationBuilder &operator=(const AddLocationBuilder &);
  flatbuffers::Offset<AddLocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddLocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddLocation> CreateAddLocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t startId = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  AddLocationBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_startId(startId);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddLocation> CreateAddLocationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t startId = 0,
    const char *name = nullptr) {
  return sisyfox::request::CreateAddLocation(
      _fbb,
      startId,
      name ? _fbb.CreateString(name) : 0);
}

struct GetLocation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct GetLocationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(GetLocation::VT_ID, id, 0);
  }
  explicit GetLocationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetLocationBuilder &operator=(const GetLocationBuilder &);
  flatbuffers::Offset<GetLocation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetLocation>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetLocation> CreateGetLocation(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0) {
  GetLocationBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct SetLiveData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LIVEDATA = 4
  };
  const LiveData *liveData() const {
    return GetStruct<const LiveData *>(VT_LIVEDATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<LiveData>(verifier, VT_LIVEDATA) &&
           verifier.EndTable();
  }
};

struct SetLiveDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_liveData(const LiveData *liveData) {
    fbb_.AddStruct(SetLiveData::VT_LIVEDATA, liveData);
  }
  explicit SetLiveDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetLiveDataBuilder &operator=(const SetLiveDataBuilder &);
  flatbuffers::Offset<SetLiveData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetLiveData>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetLiveData> CreateSetLiveData(
    flatbuffers::FlatBufferBuilder &_fbb,
    const LiveData *liveData = 0) {
  SetLiveDataBuilder builder_(_fbb);
  builder_.add_liveData(liveData);
  return builder_.Finish();
}

struct GetLiveData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetLiveDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit GetLiveDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetLiveDataBuilder &operator=(const GetLiveDataBuilder &);
  flatbuffers::Offset<GetLiveData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetLiveData>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetLiveData> CreateGetLiveData(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GetLiveDataBuilder builder_(_fbb);
  return builder_.Finish();
}

struct AddUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct AddUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AddUser::VT_NAME, name);
  }
  explicit AddUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddUserBuilder &operator=(const AddUserBuilder &);
  flatbuffers::Offset<AddUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddUser> CreateAddUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  AddUserBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddUser> CreateAddUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return sisyfox::request::CreateAddUser(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

struct GetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct GetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(GetUser::VT_UID, uId, 0);
  }
  explicit GetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetUserBuilder &operator=(const GetUserBuilder &);
  flatbuffers::Offset<GetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetUser> CreateGetUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0) {
  GetUserBuilder builder_(_fbb);
  builder_.add_uId(uId);
  return builder_.Finish();
}

struct SetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uId() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct SetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uId(uint32_t uId) {
    fbb_.AddElement<uint32_t>(SetUser::VT_UID, uId, 0);
  }
  explicit SetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetUserBuilder &operator=(const SetUserBuilder &);
  flatbuffers::Offset<SetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetUser> CreateSetUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uId = 0) {
  SetUserBuilder builder_(_fbb);
  builder_.add_uId(uId);
  return builder_.Finish();
}

struct GetCurrentUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetCurrentUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit GetCurrentUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetCurrentUserBuilder &operator=(const GetCurrentUserBuilder &);
  flatbuffers::Offset<GetCurrentUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetCurrentUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetCurrentUser> CreateGetCurrentUser(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GetCurrentUserBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GetUserRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STARTUID = 4,
    VT_RANGE = 6
  };
  uint32_t startUid() const {
    return GetField<uint32_t>(VT_STARTUID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_STARTUID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetUserRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_startUid(uint32_t startUid) {
    fbb_.AddElement<uint32_t>(GetUserRange::VT_STARTUID, startUid, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetUserRange::VT_RANGE, range, 0);
  }
  explicit GetUserRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetUserRangeBuilder &operator=(const GetUserRangeBuilder &);
  flatbuffers::Offset<GetUserRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetUserRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetUserRange> CreateGetUserRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t startUid = 0,
    uint8_t range = 0) {
  GetUserRangeBuilder builder_(_fbb);
  builder_.add_startUid(startUid);
  builder_.add_range(range);
  return builder_.Finish();
}

struct RemoveUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_UID = 4
  };
  uint32_t uid() const {
    return GetField<uint32_t>(VT_UID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_UID) &&
           verifier.EndTable();
  }
};

struct RemoveUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uid(uint32_t uid) {
    fbb_.AddElement<uint32_t>(RemoveUser::VT_UID, uid, 0);
  }
  explicit RemoveUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveUserBuilder &operator=(const RemoveUserBuilder &);
  flatbuffers::Offset<RemoveUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveUser> CreateRemoveUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t uid = 0) {
  RemoveUserBuilder builder_(_fbb);
  builder_.add_uid(uid);
  return builder_.Finish();
}

struct UnsetUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct UnsetUserBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit UnsetUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  UnsetUserBuilder &operator=(const UnsetUserBuilder &);
  flatbuffers::Offset<UnsetUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UnsetUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<UnsetUser> CreateUnsetUser(
    flatbuffers::FlatBufferBuilder &_fbb) {
  UnsetUserBuilder builder_(_fbb);
  return builder_.Finish();
}

struct SetSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_VALUE = 6
  };
  SettingType type() const {
    return static_cast<SettingType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  int32_t value() const {
    return GetField<int32_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct SetSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(SettingType type) {
    fbb_.AddElement<uint8_t>(SetSetting::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_value(int32_t value) {
    fbb_.AddElement<int32_t>(SetSetting::VT_VALUE, value, 0);
  }
  explicit SetSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetSettingBuilder &operator=(const SetSettingBuilder &);
  flatbuffers::Offset<SetSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetSetting> CreateSetSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    SettingType type = SettingType_GAME_LANGUAGE,
    int32_t value = 0) {
  SetSettingBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_type(type);
  return builder_.Finish();
}

struct GetSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4
  };
  SettingType type() const {
    return static_cast<SettingType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct GetSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(SettingType type) {
    fbb_.AddElement<uint8_t>(GetSetting::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  explicit GetSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetSettingBuilder &operator=(const GetSettingBuilder &);
  flatbuffers::Offset<GetSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetSetting> CreateGetSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    SettingType type = SettingType_GAME_LANGUAGE) {
  GetSettingBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

struct GetSettings FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GetSettingsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit GetSettingsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetSettingsBuilder &operator=(const GetSettingsBuilder &);
  flatbuffers::Offset<GetSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetSettings>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetSettings> CreateGetSettings(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GetSettingsBuilder builder_(_fbb);
  return builder_.Finish();
}

struct Trigger FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4
  };
  TriggerType type() const {
    return static_cast<TriggerType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct TriggerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(TriggerType type) {
    fbb_.AddElement<int8_t>(Trigger::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit TriggerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TriggerBuilder &operator=(const TriggerBuilder &);
  flatbuffers::Offset<Trigger> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Trigger>(end);
    return o;
  }
};

inline flatbuffers::Offset<Trigger> CreateTrigger(
    flatbuffers::FlatBufferBuilder &_fbb,
    TriggerType type = TriggerType_NEW_ROUND) {
  TriggerBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

struct AddDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AddDmxDevice::VT_NAME, name);
  }
  explicit AddDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceBuilder &operator=(const AddDmxDeviceBuilder &);
  flatbuffers::Offset<AddDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDevice> CreateAddDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  AddDmxDeviceBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddDmxDevice> CreateAddDmxDeviceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  return sisyfox::request::CreateAddDmxDevice(
      _fbb,
      name ? _fbb.CreateString(name) : 0);
}

struct RemoveDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDevice::VT_DEVICEID, deviceId, 0);
  }
  explicit RemoveDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceBuilder &operator=(const RemoveDmxDeviceBuilder &);
  flatbuffers::Offset<RemoveDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDevice> CreateRemoveDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0) {
  RemoveDmxDeviceBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNEL = 6,
    VT_NORM = 8,
    VT_TEST = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channel() const {
    return GetField<uint32_t>(VT_CHANNEL, 0);
  }
  uint8_t norm() const {
    return GetField<uint8_t>(VT_NORM, 0);
  }
  uint8_t test() const {
    return GetField<uint8_t>(VT_TEST, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNEL) &&
           VerifyField<uint8_t>(verifier, VT_NORM) &&
           VerifyField<uint8_t>(verifier, VT_TEST) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channel(uint32_t channel) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceChannel::VT_CHANNEL, channel, 0);
  }
  void add_norm(uint8_t norm) {
    fbb_.AddElement<uint8_t>(AddDmxDeviceChannel::VT_NORM, norm, 0);
  }
  void add_test(uint8_t test) {
    fbb_.AddElement<uint8_t>(AddDmxDeviceChannel::VT_TEST, test, 0);
  }
  explicit AddDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceChannelBuilder &operator=(const AddDmxDeviceChannelBuilder &);
  flatbuffers::Offset<AddDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDeviceChannel> CreateAddDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channel = 0,
    uint8_t norm = 0,
    uint8_t test = 0) {
  AddDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channel(channel);
  builder_.add_deviceId(deviceId);
  builder_.add_test(test);
  builder_.add_norm(norm);
  return builder_.Finish();
}

struct RemoveDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceChannel::VT_CHANNELID, channelId, 0);
  }
  explicit RemoveDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceChannelBuilder &operator=(const RemoveDmxDeviceChannelBuilder &);
  flatbuffers::Offset<RemoveDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDeviceChannel> CreateRemoveDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0) {
  RemoveDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULETYPE = 8,
    VT_ON = 10,
    VT_OFF = 12,
    VT_START = 14,
    VT_STEP = 16
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  DmxChannelRuleType ruleType() const {
    return static_cast<DmxChannelRuleType>(GetField<int8_t>(VT_RULETYPE, 0));
  }
  int32_t on() const {
    return GetField<int32_t>(VT_ON, 0);
  }
  int32_t off() const {
    return GetField<int32_t>(VT_OFF, 0);
  }
  uint8_t start() const {
    return GetField<uint8_t>(VT_START, 0);
  }
  float step() const {
    return GetField<float>(VT_STEP, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<int8_t>(verifier, VT_RULETYPE) &&
           VerifyField<int32_t>(verifier, VT_ON) &&
           VerifyField<int32_t>(verifier, VT_OFF) &&
           VerifyField<uint8_t>(verifier, VT_START) &&
           VerifyField<float>(verifier, VT_STEP) &&
           verifier.EndTable();
  }
};

struct AddDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(AddDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleType(DmxChannelRuleType ruleType) {
    fbb_.AddElement<int8_t>(AddDmxChannelRule::VT_RULETYPE, static_cast<int8_t>(ruleType), 0);
  }
  void add_on(int32_t on) {
    fbb_.AddElement<int32_t>(AddDmxChannelRule::VT_ON, on, 0);
  }
  void add_off(int32_t off) {
    fbb_.AddElement<int32_t>(AddDmxChannelRule::VT_OFF, off, 0);
  }
  void add_start(uint8_t start) {
    fbb_.AddElement<uint8_t>(AddDmxChannelRule::VT_START, start, 0);
  }
  void add_step(float step) {
    fbb_.AddElement<float>(AddDmxChannelRule::VT_STEP, step, 0.0f);
  }
  explicit AddDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxChannelRuleBuilder &operator=(const AddDmxChannelRuleBuilder &);
  flatbuffers::Offset<AddDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxChannelRule> CreateAddDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    DmxChannelRuleType ruleType = DmxChannelRuleType_HEIGHT,
    int32_t on = 0,
    int32_t off = 0,
    uint8_t start = 0,
    float step = 0.0f) {
  AddDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_step(step);
  builder_.add_off(off);
  builder_.add_on(on);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  builder_.add_start(start);
  builder_.add_ruleType(ruleType);
  return builder_.Finish();
}

struct RemoveDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(RemoveDmxChannelRule::VT_RULEID, ruleId, 0);
  }
  explicit RemoveDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxChannelRuleBuilder &operator=(const RemoveDmxChannelRuleBuilder &);
  flatbuffers::Offset<RemoveDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxChannelRule> CreateRemoveDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0) {
  RemoveDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGTYPE = 6,
    VT_NAME = 8,
    VT_NORM = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  DmxDeviceSettingType settingType() const {
    return static_cast<DmxDeviceSettingType>(GetField<int8_t>(VT_SETTINGTYPE, 0));
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  int8_t norm() const {
    return GetField<int8_t>(VT_NORM, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<int8_t>(verifier, VT_SETTINGTYPE) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int8_t>(verifier, VT_NORM) &&
           verifier.EndTable();
  }
};

struct AddDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingType(DmxDeviceSettingType settingType) {
    fbb_.AddElement<int8_t>(AddDmxDeviceSetting::VT_SETTINGTYPE, static_cast<int8_t>(settingType), 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(AddDmxDeviceSetting::VT_NAME, name);
  }
  void add_norm(int8_t norm) {
    fbb_.AddElement<int8_t>(AddDmxDeviceSetting::VT_NORM, norm, 0);
  }
  explicit AddDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxDeviceSettingBuilder &operator=(const AddDmxDeviceSettingBuilder &);
  flatbuffers::Offset<AddDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxDeviceSetting> CreateAddDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    DmxDeviceSettingType settingType = DmxDeviceSettingType_RANGE,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int8_t norm = 0) {
  AddDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_deviceId(deviceId);
  builder_.add_norm(norm);
  builder_.add_settingType(settingType);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddDmxDeviceSetting> CreateAddDmxDeviceSettingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    DmxDeviceSettingType settingType = DmxDeviceSettingType_RANGE,
    const char *name = nullptr,
    int8_t norm = 0) {
  return sisyfox::request::CreateAddDmxDeviceSetting(
      _fbb,
      deviceId,
      settingType,
      name ? _fbb.CreateString(name) : 0,
      norm);
}

struct RemoveDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxDeviceSetting::VT_SETTINGID, settingId, 0);
  }
  explicit RemoveDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxDeviceSettingBuilder &operator=(const RemoveDmxDeviceSettingBuilder &);
  flatbuffers::Offset<RemoveDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxDeviceSetting> CreateRemoveDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0) {
  RemoveDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxRuleRangeSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_CHANNELID = 8,
    VT_RULEID = 10,
    VT_ON = 12,
    VT_OFF = 14,
    VT_START = 16,
    VT_STEP = 18
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  float on() const {
    return GetField<float>(VT_ON, 0.0f);
  }
  float off() const {
    return GetField<float>(VT_OFF, 0.0f);
  }
  float start() const {
    return GetField<float>(VT_START, 0.0f);
  }
  float step() const {
    return GetField<float>(VT_STEP, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           VerifyField<float>(verifier, VT_ON) &&
           VerifyField<float>(verifier, VT_OFF) &&
           VerifyField<float>(verifier, VT_START) &&
           VerifyField<float>(verifier, VT_STEP) &&
           verifier.EndTable();
  }
};

struct AddDmxRuleRangeSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleRangeSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleRangeSetting::VT_SETTINGID, settingId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleRangeSetting::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleRangeSetting::VT_RULEID, ruleId, 0);
  }
  void add_on(float on) {
    fbb_.AddElement<float>(AddDmxRuleRangeSetting::VT_ON, on, 0.0f);
  }
  void add_off(float off) {
    fbb_.AddElement<float>(AddDmxRuleRangeSetting::VT_OFF, off, 0.0f);
  }
  void add_start(float start) {
    fbb_.AddElement<float>(AddDmxRuleRangeSetting::VT_START, start, 0.0f);
  }
  void add_step(float step) {
    fbb_.AddElement<float>(AddDmxRuleRangeSetting::VT_STEP, step, 0.0f);
  }
  explicit AddDmxRuleRangeSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxRuleRangeSettingBuilder &operator=(const AddDmxRuleRangeSettingBuilder &);
  flatbuffers::Offset<AddDmxRuleRangeSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxRuleRangeSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxRuleRangeSetting> CreateAddDmxRuleRangeSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    float on = 0.0f,
    float off = 0.0f,
    float start = 0.0f,
    float step = 0.0f) {
  AddDmxRuleRangeSettingBuilder builder_(_fbb);
  builder_.add_step(step);
  builder_.add_start(start);
  builder_.add_off(off);
  builder_.add_on(on);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct AddDmxRuleBoolSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_CHANNELID = 8,
    VT_RULEID = 10,
    VT_ON = 12,
    VT_OFF = 14,
    VT_START = 16,
    VT_STEP = 18
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  int32_t on() const {
    return GetField<int32_t>(VT_ON, 0);
  }
  int32_t off() const {
    return GetField<int32_t>(VT_OFF, 0);
  }
  uint8_t start() const {
    return GetField<uint8_t>(VT_START, 0);
  }
  float step() const {
    return GetField<float>(VT_STEP, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           VerifyField<int32_t>(verifier, VT_ON) &&
           VerifyField<int32_t>(verifier, VT_OFF) &&
           VerifyField<uint8_t>(verifier, VT_START) &&
           VerifyField<float>(verifier, VT_STEP) &&
           verifier.EndTable();
  }
};

struct AddDmxRuleBoolSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleBoolSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleBoolSetting::VT_SETTINGID, settingId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleBoolSetting::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(AddDmxRuleBoolSetting::VT_RULEID, ruleId, 0);
  }
  void add_on(int32_t on) {
    fbb_.AddElement<int32_t>(AddDmxRuleBoolSetting::VT_ON, on, 0);
  }
  void add_off(int32_t off) {
    fbb_.AddElement<int32_t>(AddDmxRuleBoolSetting::VT_OFF, off, 0);
  }
  void add_start(uint8_t start) {
    fbb_.AddElement<uint8_t>(AddDmxRuleBoolSetting::VT_START, start, 0);
  }
  void add_step(float step) {
    fbb_.AddElement<float>(AddDmxRuleBoolSetting::VT_STEP, step, 0.0f);
  }
  explicit AddDmxRuleBoolSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AddDmxRuleBoolSettingBuilder &operator=(const AddDmxRuleBoolSettingBuilder &);
  flatbuffers::Offset<AddDmxRuleBoolSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddDmxRuleBoolSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddDmxRuleBoolSetting> CreateAddDmxRuleBoolSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    int32_t on = 0,
    int32_t off = 0,
    uint8_t start = 0,
    float step = 0.0f) {
  AddDmxRuleBoolSettingBuilder builder_(_fbb);
  builder_.add_step(step);
  builder_.add_off(off);
  builder_.add_on(on);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_start(start);
  return builder_.Finish();
}

struct RemoveDmxRuleSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           verifier.EndTable();
  }
};

struct RemoveDmxRuleSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(RemoveDmxRuleSetting::VT_RULESETTINGID, ruleSettingId, 0);
  }
  explicit RemoveDmxRuleSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RemoveDmxRuleSettingBuilder &operator=(const RemoveDmxRuleSettingBuilder &);
  flatbuffers::Offset<RemoveDmxRuleSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RemoveDmxRuleSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<RemoveDmxRuleSetting> CreateRemoveDmxRuleSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0) {
  RemoveDmxRuleSettingBuilder builder_(_fbb);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct ChangeDmxDeviceSettingValue FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_VALUE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  int8_t value() const {
    return GetField<int8_t>(VT_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<int8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct ChangeDmxDeviceSettingValueBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(ChangeDmxDeviceSettingValue::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(ChangeDmxDeviceSettingValue::VT_SETTINGID, settingId, 0);
  }
  void add_value(int8_t value) {
    fbb_.AddElement<int8_t>(ChangeDmxDeviceSettingValue::VT_VALUE, value, 0);
  }
  explicit ChangeDmxDeviceSettingValueBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ChangeDmxDeviceSettingValueBuilder &operator=(const ChangeDmxDeviceSettingValueBuilder &);
  flatbuffers::Offset<ChangeDmxDeviceSettingValue> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ChangeDmxDeviceSettingValue>(end);
    return o;
  }
};

inline flatbuffers::Offset<ChangeDmxDeviceSettingValue> CreateChangeDmxDeviceSettingValue(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    int8_t value = 0) {
  ChangeDmxDeviceSettingValueBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_value(value);
  return builder_.Finish();
}

struct SetDmxDeviceMode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_MODE = 6,
    VT_VALUE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  DmxDeviceMode mode() const {
    return static_cast<DmxDeviceMode>(GetField<int8_t>(VT_MODE, 0));
  }
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<int8_t>(verifier, VT_MODE) &&
           VerifyField<uint8_t>(verifier, VT_VALUE) &&
           verifier.EndTable();
  }
};

struct SetDmxDeviceModeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(SetDmxDeviceMode::VT_DEVICEID, deviceId, 0);
  }
  void add_mode(DmxDeviceMode mode) {
    fbb_.AddElement<int8_t>(SetDmxDeviceMode::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(SetDmxDeviceMode::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit SetDmxDeviceModeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SetDmxDeviceModeBuilder &operator=(const SetDmxDeviceModeBuilder &);
  flatbuffers::Offset<SetDmxDeviceMode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetDmxDeviceMode>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetDmxDeviceMode> CreateSetDmxDeviceMode(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    DmxDeviceMode mode = DmxDeviceMode_TEST,
    bool value = false) {
  SetDmxDeviceModeBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  builder_.add_value(value);
  builder_.add_mode(mode);
  return builder_.Finish();
}

struct GetDmxDevice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDevice::VT_DEVICEID, deviceId, 0);
  }
  explicit GetDmxDeviceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceBuilder &operator=(const GetDmxDeviceBuilder &);
  flatbuffers::Offset<GetDmxDevice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDevice>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDevice> CreateGetDmxDevice(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0) {
  GetDmxDeviceBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_RANGE = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceRange::VT_DEVICEID, deviceId, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxDeviceRange::VT_RANGE, range, 0);
  }
  explicit GetDmxDeviceRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceRangeBuilder &operator=(const GetDmxDeviceRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceRange> CreateGetDmxDeviceRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint8_t range = 0) {
  GetDmxDeviceRangeBuilder builder_(_fbb);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct GetDmxDeviceChannel FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceChannelBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannel::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannel::VT_CHANNELID, channelId, 0);
  }
  explicit GetDmxDeviceChannelBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceChannelBuilder &operator=(const GetDmxDeviceChannelBuilder &);
  flatbuffers::Offset<GetDmxDeviceChannel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceChannel>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceChannel> CreateGetDmxDeviceChannel(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0) {
  GetDmxDeviceChannelBuilder builder_(_fbb);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceChannelRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RANGE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceChannelRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannelRange::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceChannelRange::VT_CHANNELID, channelId, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxDeviceChannelRange::VT_RANGE, range, 0);
  }
  explicit GetDmxDeviceChannelRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceChannelRangeBuilder &operator=(const GetDmxDeviceChannelRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceChannelRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceChannelRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceChannelRange> CreateGetDmxDeviceChannelRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint8_t range = 0) {
  GetDmxDeviceChannelRangeBuilder builder_(_fbb);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct GetDmxChannelRule FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           verifier.EndTable();
  }
};

struct GetDmxChannelRuleBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRule::VT_RULEID, ruleId, 0);
  }
  explicit GetDmxChannelRuleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxChannelRuleBuilder &operator=(const GetDmxChannelRuleBuilder &);
  flatbuffers::Offset<GetDmxChannelRule> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxChannelRule>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxChannelRule> CreateGetDmxChannelRule(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0) {
  GetDmxChannelRuleBuilder builder_(_fbb);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxChannelRuleRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_CHANNELID = 6,
    VT_RULEID = 8,
    VT_RANGE = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t channelId() const {
    return GetField<uint32_t>(VT_CHANNELID, 0);
  }
  uint32_t ruleId() const {
    return GetField<uint32_t>(VT_RULEID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_CHANNELID) &&
           VerifyField<uint32_t>(verifier, VT_RULEID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxChannelRuleRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_DEVICEID, deviceId, 0);
  }
  void add_channelId(uint32_t channelId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_CHANNELID, channelId, 0);
  }
  void add_ruleId(uint32_t ruleId) {
    fbb_.AddElement<uint32_t>(GetDmxChannelRuleRange::VT_RULEID, ruleId, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxChannelRuleRange::VT_RANGE, range, 0);
  }
  explicit GetDmxChannelRuleRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxChannelRuleRangeBuilder &operator=(const GetDmxChannelRuleRangeBuilder &);
  flatbuffers::Offset<GetDmxChannelRuleRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxChannelRuleRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxChannelRuleRange> CreateGetDmxChannelRuleRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t channelId = 0,
    uint32_t ruleId = 0,
    uint8_t range = 0) {
  GetDmxChannelRuleRangeBuilder builder_(_fbb);
  builder_.add_ruleId(ruleId);
  builder_.add_channelId(channelId);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct GetDmxDeviceSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSetting::VT_SETTINGID, settingId, 0);
  }
  explicit GetDmxDeviceSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceSettingBuilder &operator=(const GetDmxDeviceSettingBuilder &);
  flatbuffers::Offset<GetDmxDeviceSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceSetting> CreateGetDmxDeviceSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0) {
  GetDmxDeviceSettingBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  return builder_.Finish();
}

struct GetDmxDeviceSettingRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RANGE = 8
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxDeviceSettingRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSettingRange::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxDeviceSettingRange::VT_SETTINGID, settingId, 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxDeviceSettingRange::VT_RANGE, range, 0);
  }
  explicit GetDmxDeviceSettingRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxDeviceSettingRangeBuilder &operator=(const GetDmxDeviceSettingRangeBuilder &);
  flatbuffers::Offset<GetDmxDeviceSettingRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxDeviceSettingRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxDeviceSettingRange> CreateGetDmxDeviceSettingRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint8_t range = 0) {
  GetDmxDeviceSettingRangeBuilder builder_(_fbb);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  return builder_.Finish();
}

struct GetDmxRuleSetting FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8,
    VT_TYPE = 10
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  DmxDeviceSettingType type() const {
    return static_cast<DmxDeviceSettingType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct GetDmxRuleSettingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSetting::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSetting::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSetting::VT_RULESETTINGID, ruleSettingId, 0);
  }
  void add_type(DmxDeviceSettingType type) {
    fbb_.AddElement<int8_t>(GetDmxRuleSetting::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit GetDmxRuleSettingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxRuleSettingBuilder &operator=(const GetDmxRuleSettingBuilder &);
  flatbuffers::Offset<GetDmxRuleSetting> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxRuleSetting>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxRuleSetting> CreateGetDmxRuleSetting(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    DmxDeviceSettingType type = DmxDeviceSettingType_RANGE) {
  GetDmxRuleSettingBuilder builder_(_fbb);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_type(type);
  return builder_.Finish();
}

struct GetDmxRuleSettingRange FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICEID = 4,
    VT_SETTINGID = 6,
    VT_RULESETTINGID = 8,
    VT_TYPE = 10,
    VT_RANGE = 12
  };
  uint32_t deviceId() const {
    return GetField<uint32_t>(VT_DEVICEID, 0);
  }
  uint32_t settingId() const {
    return GetField<uint32_t>(VT_SETTINGID, 0);
  }
  uint32_t ruleSettingId() const {
    return GetField<uint32_t>(VT_RULESETTINGID, 0);
  }
  DmxDeviceSettingType type() const {
    return static_cast<DmxDeviceSettingType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint8_t range() const {
    return GetField<uint8_t>(VT_RANGE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_DEVICEID) &&
           VerifyField<uint32_t>(verifier, VT_SETTINGID) &&
           VerifyField<uint32_t>(verifier, VT_RULESETTINGID) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_RANGE) &&
           verifier.EndTable();
  }
};

struct GetDmxRuleSettingRangeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_deviceId(uint32_t deviceId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSettingRange::VT_DEVICEID, deviceId, 0);
  }
  void add_settingId(uint32_t settingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSettingRange::VT_SETTINGID, settingId, 0);
  }
  void add_ruleSettingId(uint32_t ruleSettingId) {
    fbb_.AddElement<uint32_t>(GetDmxRuleSettingRange::VT_RULESETTINGID, ruleSettingId, 0);
  }
  void add_type(DmxDeviceSettingType type) {
    fbb_.AddElement<int8_t>(GetDmxRuleSettingRange::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_range(uint8_t range) {
    fbb_.AddElement<uint8_t>(GetDmxRuleSettingRange::VT_RANGE, range, 0);
  }
  explicit GetDmxRuleSettingRangeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetDmxRuleSettingRangeBuilder &operator=(const GetDmxRuleSettingRangeBuilder &);
  flatbuffers::Offset<GetDmxRuleSettingRange> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetDmxRuleSettingRange>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetDmxRuleSettingRange> CreateGetDmxRuleSettingRange(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t deviceId = 0,
    uint32_t settingId = 0,
    uint32_t ruleSettingId = 0,
    DmxDeviceSettingType type = DmxDeviceSettingType_RANGE,
    uint8_t range = 0) {
  GetDmxRuleSettingRangeBuilder builder_(_fbb);
  builder_.add_ruleSettingId(ruleSettingId);
  builder_.add_settingId(settingId);
  builder_.add_deviceId(deviceId);
  builder_.add_range(range);
  builder_.add_type(type);
  return builder_.Finish();
}

inline bool VerifyPayload(flatbuffers::Verifier &verifier, const void *obj, Payload type) {
  switch (type) {
    case Payload_NONE: {
      return true;
    }
    case Payload_Info: {
      auto ptr = reinterpret_cast<const Info *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddScore: {
      auto ptr = reinterpret_cast<const AddScore *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetScore: {
      auto ptr = reinterpret_cast<const GetScore *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetScoreRange: {
      auto ptr = reinterpret_cast<const GetScoreRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_SetLiveData: {
      auto ptr = reinterpret_cast<const SetLiveData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetLiveData: {
      auto ptr = reinterpret_cast<const GetLiveData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddUser: {
      auto ptr = reinterpret_cast<const AddUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetUser: {
      auto ptr = reinterpret_cast<const GetUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_SetUser: {
      auto ptr = reinterpret_cast<const SetUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetCurrentUser: {
      auto ptr = reinterpret_cast<const GetCurrentUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetUserRange: {
      auto ptr = reinterpret_cast<const GetUserRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_RemoveUser: {
      auto ptr = reinterpret_cast<const RemoveUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_UnsetUser: {
      auto ptr = reinterpret_cast<const UnsetUser *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddLocation: {
      auto ptr = reinterpret_cast<const AddLocation *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetLocation: {
      auto ptr = reinterpret_cast<const GetLocation *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_SetSetting: {
      auto ptr = reinterpret_cast<const SetSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetSetting: {
      auto ptr = reinterpret_cast<const GetSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetSettings: {
      auto ptr = reinterpret_cast<const GetSettings *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_Trigger: {
      auto ptr = reinterpret_cast<const Trigger *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddDmxDevice: {
      auto ptr = reinterpret_cast<const AddDmxDevice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_RemoveDmxDevice: {
      auto ptr = reinterpret_cast<const RemoveDmxDevice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddDmxDeviceChannel: {
      auto ptr = reinterpret_cast<const AddDmxDeviceChannel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_RemoveDmxDeviceChannel: {
      auto ptr = reinterpret_cast<const RemoveDmxDeviceChannel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddDmxChannelRule: {
      auto ptr = reinterpret_cast<const AddDmxChannelRule *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_RemoveDmxChannelRule: {
      auto ptr = reinterpret_cast<const RemoveDmxChannelRule *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddDmxDeviceSetting: {
      auto ptr = reinterpret_cast<const AddDmxDeviceSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_RemoveDmxDeviceSetting: {
      auto ptr = reinterpret_cast<const RemoveDmxDeviceSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddDmxRuleRangeSetting: {
      auto ptr = reinterpret_cast<const AddDmxRuleRangeSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_AddDmxRuleBoolSetting: {
      auto ptr = reinterpret_cast<const AddDmxRuleBoolSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_RemoveDmxRuleSetting: {
      auto ptr = reinterpret_cast<const RemoveDmxRuleSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_ChangeDmxDeviceSettingValue: {
      auto ptr = reinterpret_cast<const ChangeDmxDeviceSettingValue *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxDevice: {
      auto ptr = reinterpret_cast<const GetDmxDevice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxDeviceChannel: {
      auto ptr = reinterpret_cast<const GetDmxDeviceChannel *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxChannelRule: {
      auto ptr = reinterpret_cast<const GetDmxChannelRule *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxDeviceSetting: {
      auto ptr = reinterpret_cast<const GetDmxDeviceSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxRuleSetting: {
      auto ptr = reinterpret_cast<const GetDmxRuleSetting *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxDeviceRange: {
      auto ptr = reinterpret_cast<const GetDmxDeviceRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxDeviceChannelRange: {
      auto ptr = reinterpret_cast<const GetDmxDeviceChannelRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxChannelRuleRange: {
      auto ptr = reinterpret_cast<const GetDmxChannelRuleRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxDeviceSettingRange: {
      auto ptr = reinterpret_cast<const GetDmxDeviceSettingRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_GetDmxRuleSettingRange: {
      auto ptr = reinterpret_cast<const GetDmxRuleSettingRange *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Payload_SetDmxDeviceMode: {
      auto ptr = reinterpret_cast<const SetDmxDeviceMode *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyPayloadVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyPayload(
        verifier,  values->Get(i), types->GetEnum<Payload>(i))) {
      return false;
    }
  }
  return true;
}

inline const sisyfox::request::Root *GetRoot(const void *buf) {
  return flatbuffers::GetRoot<sisyfox::request::Root>(buf);
}

inline bool VerifyRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<sisyfox::request::Root>(nullptr);
}

inline void FinishRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<sisyfox::request::Root> root) {
  fbb.Finish(root);
}

}  // namespace request
}  // namespace sisyfox

#endif  // FLATBUFFERS_GENERATED_SISYCOLREQ_SISYFOX_REQUEST_H_
