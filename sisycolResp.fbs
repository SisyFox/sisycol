namespace sisyfox.response;

union Payload { Error, Info, AddScore, GetScore, GetScoreRange,
             GetLocation, GetLiveData, AddRule, AddUser, GetUser,
             GetCurrentUser, GetUserRange, SetUser, UnsetUser,
             RemoveUser, SetSetting, GetSetting, GetSettings, Trigger,
             AddDmxDevice, RemoveDmxDevice, AddDmxDeviceChannel,
             RemoveDmxDeviceChannel, AddDmxChannelRule,
             RemoveDmxChannelRule, AddDmxDeviceSetting,
             RemoveDmxDeviceSetting, AddDmxRuleSetting,
             RemoveDmxRuleSetting, ChangeDmxDeviceSettingValue,
             GetDmxDevice, GetDmxDeviceChannel, GetDmxChannelRule,
             GetDmxDeviceSetting, GetDmxRuleRangeSetting,
             GetDmxRuleBoolSetting, GetDmxDeviceRange, GetDmxDeviceChannelRange,
             GetDmxChannelRuleRange, GetDmxDeviceSettingRange,
             GetDmxRuleRangeSettingRange, GetDmxRuleBoolSettingRange,
             SetDmxDeviceMode }

enum Err:short { BAD_TRANSMISSION, BAD_VERSION, BAD_PAYLOAD_TYPE,
                 GENERAL_ERROR, NOT_AVAILABLE }

struct Version {
    high:ubyte;
    low:ubyte;
}

table Root {
    version:Version;
    messageId:ushort;
    payload:Payload;
}

table Error {
    err:Err;
}

table Info {
    scoreCount:uint = 0xffffffff;
    userCount:uint = 0xffffffff;
    dmxDeviceCount:uint = 0xffffffff;
    registryEntryCount:uint = 0xffffffff;
    userId:uint = 0xffffffff;
}

enum EndReason:ubyte { WIN, MAP_BORDER, COLLISION, INSTANT_LOSS_ANGLE,
                       GROUND_DIST, TOO_STEEP, FLASH, UNDERWATER }

struct Score {
    id:uint;
    height:int;
    time:int;
    rank:uint;
    timestamp:long;
    level:ubyte;
    world:ubyte;
    gameMode:ubyte;
    difficulty:ubyte;
    score:int;
    reason:EndReason;
}

table AddScore {
    data:Score;
}

table GetScore {
    data:Score;
}

table GetScoreRange {
    data:[Score];
}

table GetLocation {
    name:string;
}

struct LiveData {
    height:int;
    time:int;
    pitch:int;
}

table GetLiveData {
    liveData:LiveData;
}

table AddRule {
    id:uint;
}

table AddUser {
    uId:uint;
}

table User {
    uId:uint;
    timestamp:ulong;
    name:string;
}

table GetUser {
    data:User;
}

table SetUser {
    uId:uint;
}

table UnsetUser {}

table GetCurrentUser {
    uId:uint;
    timestamp:ulong;
    name:string;
}

table GetUserRange {
    user:[User];
}

table RemoveUser {
    uId:uint;
}

enum SettingType:ubyte { GAME_LANGUAGE, INTERFACE_LANGUAGE, SOUND_LEVEL,
                        COMPETITION_MODE,
                        WORLD = 64, LEVEL, DIFFICULTY, GAME_MODE,
                        MAX_COLLECT_WORLD, MAX_COLLECT_LEVEL, GEM_SCORE,
                        GAME_ACTIVE = 128 }

table SetSetting {
    type:SettingType;
    value:int;
}

table GetSetting {
    value:int;
}

enum GameMode:ubyte { FREESTYLE, LEVEL_COLLECT }

enum Language:ubyte { ENGLISH, GERMAN, CRUMMY_GERMAN = 0xff }

enum World:ubyte { ORIGIN_MOUNTAIN, BLOCKSBERG, RED_CANYON }

struct GeneralSetting {
    available:bool = false;
    gameLanguage:Language;
    interfaceLanguage:Language;
    soundLevel:ubyte;
    competitionMode:bool;
    gameActive:bool;
}

struct UserSetting {
    available:bool = false;
    world:World;
    level:ubyte;
    difficulty:ubyte;
    gameMode:ubyte;
    gemScore:uint;
    maxCollectWorld:ubyte;
    maxCollectLevel:ubyte;
}

table GetSettings {
    generalSetting:GeneralSetting;
    userSetting:UserSetting;
}

enum TriggerType:byte { NEW_ROUND }

table Trigger {
    type:TriggerType;
}

table AddDmxDevice {
    deviceId:uint;
}

table RemoveDmxDevice {
    deviceId:uint;
}

table AddDmxDeviceChannel {
    deviceId:uint;
    channelId:uint;
}

table RemoveDmxDeviceChannel {
    deviceId:uint;
    channelId:uint;
}

table AddDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
}

table RemoveDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
}

table AddDmxDeviceSetting {
    deviceId:uint;
    settingId:uint;
}

table RemoveDmxDeviceSetting {
    deviceId:uint;
    settingId:uint;
}

table AddDmxRuleSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
}

table RemoveDmxRuleSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
}

table ChangeDmxDeviceSettingValue {
    deviceId:uint;
    settingId:uint;
    value:byte;
}

enum DmxDeviceMode:byte { TEST, DISABLED }

table SetDmxDeviceMode {
    deviceId:uint;
    mode:DmxDeviceMode;
    value:bool;
}

table DmxDevice {
    name:string;
    disabled:bool;
    testMode:bool;
    channelCount:uint;
    settingCount:uint;
}

table GetDmxDevice {
    deviceId:uint;
    device:DmxDevice;
}

table GetDmxDeviceRange {
    deviceId:uint;
    device:[DmxDevice];
}

struct DmxDeviceChannel {
    storageRef:int;
    channel:uint;
    test:ubyte;
    norm:ubyte;
    ruleCount:uint;
}
table GetDmxDeviceChannel {
    deviceId:uint;
    channelId:uint;
    channel:DmxDeviceChannel;
}

table GetDmxDeviceChannelRange {
    deviceId:uint;
    channelId:uint;
    channel:[DmxDeviceChannel];
}

enum DmxChannelRuleType:byte { HEIGHT, TIME, PITCH }

struct DmxChannelRule {
    storageRef:int;
    type:DmxChannelRuleType;
    on:int;
    calcOn:int;
    off:int;
    calcOff:int;
    start:ubyte;
    calcStart:ubyte;
    step:float;
    calcStep:float;
}

table GetDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
    rule:DmxChannelRule;
}

table GetDmxChannelRuleRange {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
    rule:[DmxChannelRule];
}

enum DmxDeviceSettingType:byte { RANGE, BOOL }

table DmxDeviceSetting {
    name:string;
    storageRef:int;
    ruleSettingCount:uint;
    norm:byte;
    value:byte;
    type:DmxDeviceSettingType;
}

table GetDmxDeviceSetting {
    deviceId:uint;
    settingId:uint;
    setting:DmxDeviceSetting;
}

table GetDmxDeviceSettingRange {
    deviceId:uint;
    settingId:uint;
    setting:[DmxDeviceSetting];
}

struct DmxRuleRangeSetting {
    storageRef:int;
    channel:uint;
    ruleNo:uint;
    on:float;
    off:float;
    start:float;
    step:float;
}

table GetDmxRuleRangeSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    ruleSetting:DmxRuleRangeSetting;
}

table GetDmxRuleRangeSettingRange {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    ruleSetting:[DmxRuleRangeSetting];
}

struct DmxRuleBoolSetting {
    storageRef:int;
    channel:uint;
    ruleNo:uint;
    on:int;
    off:int;
    start:ubyte;
    step:float;
}

table GetDmxRuleBoolSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    ruleSetting:DmxRuleBoolSetting;
}

table GetDmxRuleBoolSettingRange {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    ruleSetting:[DmxRuleBoolSetting];
}
root_type Root;
