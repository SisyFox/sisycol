
////////////////////////////////////////////////////////////////////////////////
// Sisycol API - SisyFox Protocol Scheme
////////////////////////////////////////////////////////////////////////////////
namespace sisyfox.sisycol;

union Payload { Error, Info, /* DEPRECATED */ AddScore /* DEPRECATED */,
             GetScore, GetScoreRange, SetLiveData,
             GetLiveData, AddUser, GetUser, SetUser, GetCurrentUser,
             GetUserRange, RemoveUser,UnsetUser, AddLocation, GetLocation,
             SetSetting, GetSetting, GetSettings, Trigger, AddDmxDevice,
             RemoveDmxDevice, AddDmxDeviceChannel, RemoveDmxDeviceChannel,
             AddDmxChannelRule, RemoveDmxChannelRule, AddDmxDeviceSetting,
             AddDmxRuleSetting, RemoveDmxDeviceSetting,
             AddDmxRuleRangeSetting, AddDmxRuleBoolSetting,
             RemoveDmxRuleSetting, ChangeDmxDeviceSettingValue,
             GetDmxDevice, GetDmxDeviceChannel, GetDmxChannelRule,
             GetDmxDeviceSetting, GetDmxRuleSetting,
             GetDmxDeviceRange, GetDmxDeviceChannelRange,
             GetDmxChannelRuleRange, GetDmxDeviceSettingRange,
             GetDmxRuleSettingRange, GetDmxRuleRangeSetting,
             GetDmxRuleRangeSettingRange, GetDmxRuleBoolSetting,
             GetDmxRuleBoolSettingRange, SetDmxDeviceMode, ResetDmxConfig,
             GetIdealTime_DEPRECATED, SuspendSystem, GetScoreFiltered, GetDetectedDevices,
             ChangeRemoteMultiplayerSetting, CoinUpdate, GameUnlock, CreditStatus,
             AddCredits, AddScoreNew, CalculateScore, GetPayPerPlayStatistics_DEPRECATED, GetIdealTime,
             GetScoreStatistics, GetPayPerPlayStatistics, EjectToken }

table Root {
  version:Version;
  messageId:ushort;
  payload:Payload;
}
root_type Root;

enum ErrorCode:ubyte   { BAD_TRANSMISSION, BAD_VERSION, BAD_PAYLOAD_TYPE,
                         GENERAL_ERROR, NOT_AVAILABLE }

enum EndReason:ubyte   { WIN, MAP_BORDER, COLLISION, INSTANT_LOSS_ANGLE,
                         GROUND_DIST, TOO_STEEP, FLASH, UNDERWATER, TIME_UP }

enum TriggerType:ubyte { NEW_ROUND }

// Enumerations below 64 are GeneralSettings
// Enumerations below 128 are UserSettings
// all other are VirtualSettings
enum SettingType:ubyte { GAME_LANGUAGE, INTERFACE_LANGUAGE, MASTER_VOLUME,
                         COMPETITION_MODE, DEBUG_MODE, TIMEFRAME, MUSIC_VOLUME,
                         SFX_VOLUME, VOICES, IDLE_TIME, WIN_TRANSITIONS_TO_LOSS,
                         BALL_SETTING, PLAY_VIDEO, VIDEO_DELAY, VIDEO_SELECTION,
                         INGAME_MENU, SENSOR, MULTIPLAYER_ENABLED, VIDEO_VOLUME,
                         PAY_PER_PLAY_ENABLED, BONUS_CREDITS_ENABLED, CREDIT_PRICE,
                         LIFES_PER_ROUND, COIN_CREDIT_MULTIPLICATOR,
                         PAY_PER_PLAY_MODE, TOP_TEN_ENABLED, TICKET_DISPENSER_ENABLED,
                         SF_CONTROL_INTERNAL=0x3f,
                         WORLD = 64, LEVEL, DIFFICULTY, GAME_MODE,
                         MAX_COLLECT_WORLD, MAX_COLLECT_LEVEL, GEM_SCORE,
                         TIME_ATTACK, RESERVED_FOR_FUTURE_USE_1, HASH, GAME,
                         GAME_ACTIVE = 128, GAME_ENABLED_DEPRECATED }

enum Language:ubyte    { ENGLISH, GERMAN, CHINESE, FRENCH, JAPANESE, CRUMMY_GERMAN = 0xff }

enum GameMode:ubyte    { CLIMB, COLLECT, EXPLORE }

enum Difficulty:ubyte  { VERY_EASY, EASY, NORMAL, HARD, VERY_HARD }

enum World:ubyte       { ORIGIN_MOUNTAIN, BLOCKSBERG, RED_CANYON, SECRET_ISLAND, TUTORIAL }

enum Game:ubyte        { CLASSIC, DOWNHILL, PHYSICS_BASH, RUMBLE_BALL }

enum BallSetting:ubyte { BIG_BALL, SMALL_BALL }

enum VideoSelection:ubyte      { DEFAULT, PRODUCT, CUSTOMER }

enum Sensor:ubyte              { V1_0, V1_1, V2_0 }

enum DmxChannelRuleType:byte   { GOAL, TIME, PITCH }

enum DmxDeviceSettingType:byte { RANGE, CHECKBOX }

enum DmxDeviceMode:byte        { TEST, DISABLED }

enum Currency:byte             { EURO }

enum GameBlockReason:byte      { UNKNOWN, COIN_ACCEPTOR }

enum PayPerPlayMode:byte       { COIN, TOKEN }

enum TimeFrame:byte       { HOURLY, DAILY, WEEKLY, MONTHLY }

struct Version {
  high:ubyte = 2;
  low:ubyte  = 1;
}

struct LiveData {
  goal:int;
  time:int;
  pitch:int;
}

struct Coordinates {
  x:int;
  y:int;
  z:int;
}

struct Initials {
    first:byte = 83; // S
    second:byte = 70; // F
    third:byte = 88; // X
}

table Score {
    id:uint;
    goal:int;
    maxGoal:int;
    time:int;
    rank:uint;
    timestamp:long;
    level:ubyte;
    world:ubyte;
    gameMode:GameMode;
    difficulty:Difficulty;
    reason:EndReason;
    goalScore:int;
    timeScore:int;
    totalScore:int;
    rating:int;
    modeSpecifcValue:int;
    endPosition:Coordinates;
    game:ubyte;
    hash:[ubyte];
    multiplayer:bool;
    initials:Initials;
}

table BoolSetting {
    value:bool;
}

table ByteSetting {
    value:ubyte;
}

table IntSetting {
    value:uint;
}

table Hash {
    value:[ubyte];
}

union SettingValue { BoolSetting, ByteSetting, IntSetting, Hash }

table Setting {
    type:SettingType;
    value:SettingValue;
}

struct DmxDeviceChannel {
    storageRef:int;
    channel:uint;
    test:ubyte;
    norm:ubyte;
    ruleCount:uint;
}

struct DmxChannelRule {
    storageRef:int;
    type:DmxChannelRuleType;
    on:int;
    calcOn:int;
    off:int;
    calcOff:int;
    start:ubyte;
    calcStart:ubyte;
    step:float;
    calcStep:float;
}

struct DmxRuleRangeSetting {
    storageRef:int;
    channel:uint;
    ruleNo:uint;
    on:float;
    off:float;
    start:float;
    step:float;
}

struct DmxRuleBoolSetting {
    storageRef:int;
    channel:uint;
    ruleNo:uint;
    on:int;
    off:int;
    start:ubyte;
    step:float;
}

table User {
    uId:uint;
    timestamp:ulong;
    name:string;
    info:string;
}

////////////////////////////////////////////////////////////////////////////////
// Sisycol Request Tables
////////////////////////////////////////////////////////////////////////////////
namespace sisyfox.sisycol.request;

table Info {}

// DEPRECATED
table AddScore {
    goal:int;
    maxGoal:int;
    time:int;
    reason:EndReason;
    level:ubyte;
    world:ubyte;
    gameMode:GameMode;
    difficulty:Difficulty;
    modeSpecificValue:int;
    endPosition:Coordinates;
    game:ubyte;
    hash:[ubyte];
    multiplayer:bool;
}

table GetScore {
  id:uint;
}

table GetScoreRange {
  range:ubyte;
  startId:uint;
}

table GetScoreFiltered {
  timestamp_begin:ulong;
  timestamp_end:ulong;
  range:ubyte;
  startId:uint;
}

table AddLocation {
  startId:uint;
  name:string;
}

table GetLocation {
  id:uint;
}

table SetLiveData {
  liveData:LiveData;
}

table GetLiveData {}

table AddUser {
  name:string;
  info:string;
}

table GetUser {
  uId:uint;
}

table SetUser {
  uId:uint;
}

table GetCurrentUser {}

table GetUserRange {
  startUid:uint;
  range:ubyte;
}

table RemoveUser {
  uid:uint;
}

table UnsetUser {}

table SetSetting {
  type:SettingType;
  value:SettingValue;
}

table GetSetting {
  type:SettingType;
}

table GetSettings {
}

table Trigger {
    type:TriggerType;
}

table AddDmxDevice {
    name:string;
}

table RemoveDmxDevice {
    deviceId:uint;
}

table AddDmxDeviceChannel {
    deviceId:uint;
    channel:uint;
    norm:ubyte;
    test:ubyte;
}

table RemoveDmxDeviceChannel {
    deviceId:uint;
    channelId:uint;
}

table AddDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleType:DmxChannelRuleType;
    on:int;
    off:int;
    start:ubyte;
    step:float;
}

table RemoveDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
}

table AddDmxDeviceSetting {
    deviceId:uint;
    settingType:DmxDeviceSettingType;
    name:string;
    norm:byte;
}

table RemoveDmxDeviceSetting {
    deviceId:uint;
    settingId:uint;
}

table AddDmxRuleRangeSetting {
    deviceId:uint;
    settingId:uint;
    channelId:uint;
    ruleId:uint;
    on:float;
    off:float;
    start:float;
    step:float;
}

table AddDmxRuleBoolSetting {
    deviceId:uint;
    settingId:uint;
    channelId:uint;
    ruleId:uint;
    on:int;
    off:int;
    start:ubyte;
    step:float;
}

table RemoveDmxRuleSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
}

table ChangeDmxDeviceSettingValue {
    deviceId:uint;
    settingId:uint;
    value:byte;
}

table SetDmxDeviceMode {
    deviceId:uint;
    mode:DmxDeviceMode;
    value:bool;
}

table GetDmxDevice {
    deviceId:uint;
}

table GetDmxDeviceRange {
    deviceId:uint;
    range:ubyte;
}

table GetDmxDeviceChannel {
    deviceId:uint;
    channelId:uint;
}

table GetDmxDeviceChannelRange {
    deviceId:uint;
    channelId:uint;
    range:ubyte;
}

table GetDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
}

table GetDmxChannelRuleRange {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
    range:ubyte;
}

table GetDmxDeviceSetting {
    deviceId:uint;
    settingId:uint;
}

table GetDmxDeviceSettingRange {
    deviceId:uint;
    settingId:uint;
    range:ubyte;
}

table GetDmxRuleSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    type:DmxDeviceSettingType;
}

table GetDmxRuleSettingRange {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    type:DmxDeviceSettingType;
    range:ubyte;
}

table ResetDmxConfig {}

table GetIdealTime_DEPRECATED {}

table GetIdealTime {
    world:ubyte;
    level:ubyte;
    gameMode:ubyte;
    difficulty:ubyte;
}

table SuspendSystem {}

table GetDetectedDevices {}

table ChangeRemoteMultiplayerSetting {
    ip:uint;
    value:bool;
}

table UnlockGame {}

table CreditStatus {}

table AddCredits {
    amount:int;
}

table AddScoreNew { // Deprecates AddScore
    data:Score;
}

// NOTE: rank is not calculated
table CalculateScore {
    goal:int;
    maxGoal:int;
    time:int;
    reason:EndReason;
    level:ubyte;
    world:ubyte;
    gameMode:GameMode;
    difficulty:Difficulty;
    modeSpecificValue:int;
    endPosition:Coordinates;
    game:ubyte;
    hash:[ubyte];
    multiplayer:bool;
}

table GetPayPerPlayStatistics_DEPRECATED {
    timestamp_begin:ulong;
    timestamp_end:ulong;
    range:ubyte;
    offset:uint;
}

table GetScoreStatistics {
    timestamp_begin:ulong;
    timestamp_end:ulong;
    range:ubyte;
    offset:uint;
    frame:TimeFrame;
    timezone:string;
}

table GetPayPerPlayStatistics {
    timestamp_begin:ulong;
    timestamp_end:ulong;
    range:ubyte;
    offset:uint;
    frame:TimeFrame;
    timezone:string;
}

# To test if there is an Ticket Dispenser available and enabled use amount=0
# and check success in response
table EjectToken {
    amount:uint;
}

////////////////////////////////////////////////////////////////////////////////
// Sisycol Response Tables
////////////////////////////////////////////////////////////////////////////////
namespace sisyfox.sisycol.response;

table Error {
    errorCode:ErrorCode;
}

table Info {
    serverVersion:uint = 0xffffffff;
    scoreCount:uint = 0xffffffff;
    userCount:uint = 0xffffffff;
    dmxDeviceCount:uint = 0xffffffff;
    registryEntryCount:uint = 0xffffffff;
    userId:uint = 0xffffffff;
}

table AddScore {
    data:Score;
}

table GetScore {
    data:Score;
}

table GetScoreRange {
    data:[Score];
}

table GetScoreFiltered {
    data:[Score];
}

table GetLocation {
    name:string;
}

table GetLiveData {
    liveData:LiveData;
}

table AddRule {
    id:uint;
}

table AddUser {
    uId:uint;
}

table GetUser {
    data:User;
}

table SetUser {
    uId:uint;
}

table UnsetUser {}

table GetCurrentUser {
    uId:uint;
    timestamp:ulong;
    name:string;
    info:string;
}

table GetUserRange {
    user:[User];
}

table RemoveUser {
    uId:uint;
}

table SetSetting {
    setting:Setting;
}

table GetSetting {
    value:SettingValue;
}

table GetSettings {
    settings:[Setting];
}

table Trigger {
    type:TriggerType;
}

table AddDmxDevice {
    deviceId:uint;
}

table RemoveDmxDevice {
    deviceId:uint;
}

table AddDmxDeviceChannel {
    deviceId:uint;
    channelId:uint;
}

table RemoveDmxDeviceChannel {
    deviceId:uint;
    channelId:uint;
}

table AddDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
}

table RemoveDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
}

table AddDmxDeviceSetting {
    deviceId:uint;
    settingId:uint;
}

table RemoveDmxDeviceSetting {
    deviceId:uint;
    settingId:uint;
}

table AddDmxRuleSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
}

table RemoveDmxRuleSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
}

table ChangeDmxDeviceSettingValue {
    deviceId:uint;
    settingId:uint;
    value:byte;
}

table SetDmxDeviceMode {
    deviceId:uint;
    mode:DmxDeviceMode;
    value:bool;
}

table DmxDevice {
    name:string;
    disabled:bool;
    testMode:bool;
    channelCount:uint;
    settingCount:uint;
}

table GetDmxDevice {
    deviceId:uint;
    device:DmxDevice;
}

table GetDmxDeviceRange {
    deviceId:uint;
    device:[DmxDevice];
}

table GetDmxDeviceChannel {
    deviceId:uint;
    channelId:uint;
    channel:DmxDeviceChannel;
}

table GetDmxDeviceChannelRange {
    deviceId:uint;
    channelId:uint;
    channel:[DmxDeviceChannel];
}

table GetDmxChannelRule {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
    rule:DmxChannelRule;
}

table GetDmxChannelRuleRange {
    deviceId:uint;
    channelId:uint;
    ruleId:uint;
    rule:[DmxChannelRule];
}

table DmxDeviceSetting {
    name:string;
    storageRef:int;
    ruleSettingCount:uint;
    norm:byte;
    value:byte;
    type:DmxDeviceSettingType;
}

table GetDmxDeviceSetting {
    deviceId:uint;
    settingId:uint;
    setting:DmxDeviceSetting;
}

table GetDmxDeviceSettingRange {
    deviceId:uint;
    settingId:uint;
    setting:[DmxDeviceSetting];
}

table GetDmxRuleRangeSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    ruleSetting:DmxRuleRangeSetting;
}

table GetDmxRuleRangeSettingRange {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    ruleSetting:[DmxRuleRangeSetting];
}

table GetDmxRuleBoolSetting {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    ruleSetting:DmxRuleBoolSetting;
}

table GetDmxRuleBoolSettingRange {
    deviceId:uint;
    settingId:uint;
    ruleSettingId:uint;
    ruleSetting:[DmxRuleBoolSetting];
}

table ResetDmxConfig {}

table GetIdealTime {
    time:float;
}

table SuspendSystem {}

table Device {
    ip:uint;
    enabledMultiplayer:bool;
    isHost:bool;
    isSelf:bool;
}

table GetDetectedDevices {
    devices:[Device];
}

table ChangeRemoteMultiplayerSetting {}

table CoinUpdate {
    currency:Currency;
    balance:uint;
    requiredBalance:uint;
}

union GameUnlockResult { GameUnlockComplete, GameUnlockWait }

table GameUnlockComplete {
    success:bool;
}

table GameUnlockWait {
    reason:GameBlockReason;
}

table GameUnlock {
    result:GameUnlockResult;
}

table CreditStatus {
    // -1 means infinite amount of credits
    availableCredits:int = -1;
}

table AddCredits {}

table CalculateScore {
    data:Score;
}

table PayPerPlayStatistic_DEPRECATED {
    timestamp:ulong;
    
    generated_credits:uint;
    accepted_money:uint;
    credits_worth:uint;
}

table GetPayPerPlayStatistics_DEPRECATED {
    data:[PayPerPlayStatistic_DEPRECATED];
}

table ScoreStatistic {
    timestamp:ulong;
    game:ubyte;
    gameMode:GameMode;
    
    playtime:uint;
    gamesCount:uint;
}

table GetScoreStatistics {
    data:[ScoreStatistic];
}

table PayPerPlayStatistic {
    timestamp:ulong;
    
    generated_credits:uint;
    accepted_money:uint;
    accepted_tokens:uint;
    credits_worth:uint;
}

table GetPayPerPlayStatistics {
    data:[PayPerPlayStatistic];
}


table EjectToken {
    success:bool;
    amount:uint;
}
